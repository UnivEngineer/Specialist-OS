;----------------------------------------------------------------------------
; MXOS
; ROM.COM - драйвер ром-диска через ВВ55
; Адаптация оригинального DISK-H.COM
; Прддерживается только одна 64к страница
;
; Драйвер имеет три функции (номер передаётся в регистре b):
;   b == 1 - записать сектор (256 байт, номер сектора в de, адрес буфера в hl);
;   b == 2 - считать  сектор (256 байт, номер сектора в de, адрес буфера в hl);
;   b == 3 - выдать размер диска в секторах (резльтат в de, адрес DISK_INFO в hl).
;
; 2022-02-15 Разработано SpaceEngineer
;----------------------------------------------------------------------------

    INCLUDE "../include/mxos.inc"

; Команды для дрыгания ножками ВВ55
LATCH_0 = 0Ah   ; пин защёлки ИР22 = 0
LATCH_1 = 0Bh   ; пин защёлки ИР22 = 1
WRITE_0 = 0Ch   ; пин записи = 0
WRITE_1 = 0Dh   ; пин записи = 1
READ_0  = 0Eh   ; пин чтения = 0
READ_1  = 0Fh   ; пин чтения = 1

; Маски управляющих пинов ВВ55
MASK_STADBY = 0C0h  ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
MASK_READ   = 040h  ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0

; Накопитель, куда назначается драйвер
DRIVE       = 7     ; "H"

; Объем накопителя по умолчанию (64 кб)
DISK_SECTORS = 64 * 4

; Схема ром-диска:
; Порт A - данные (ввод)
; Порт B - адрес [A0-A7]  (вывод)
; Порт C - адрес [A8-A15] (вывод)
; Вывод С6 порта клавиатуры (пин 11) - включение ПЗУ (лог. 1)

;----------------------------------------------------------------------------

    ORG     0DE00h

    ; Установить драйвер для накопителя 7 ("H")
    ld      a, DRIVE
    ld      hl, Driver
    call    bios_installDriver

    ; Запоминаем адрес структуры DISK_INFO и выходим
    ld      (v_diskInfo), hl
    ret

Driver:

    ; Анализ номера функции
    ld      a, b
    cp      1
    ret z               ; запись - не поддерживается
    cp      2
    jp z,   FuncRead    ; чтение
    cp      3
    jp z,   FuncSize    ; размер
    ret                 ; иначе выход

;-----------------------------------------------------------------------------------
; Функция 3 - определение объема накопителя
; выход:
;  de = количество секторов (1 - диск не отформатирован)

FuncSize:
    ; Читаем поле isValid из структуры DISK_INFO
    ld      hl, (v_diskInfo)            ; hl = адрес структуры
    ld      de, DISK_INFO.isValid       ; de = смещение поля
    add     hl, de                      ; hl = адрес поля
    ld      a, (hl)                     ; a = isValid

    ; Если диск не отформатирован, возвращаем de = DISK_SECTORS
    ld      de, DISK_SECTORS
    cp      DISK_VALID
    jp nz,  fsExit

    ; Иначе возвращаем в de поле totalSectors из структуры DISK_INFO
    ld      hl, (v_diskInfo)            ; hl = адрес структуры
    ld      de, DISK_INFO.totalSectors  ; de = смещение поля
    add     hl, de                      ; hl = адрес поля
    ld      e, (hl)
    inc     hl
    ld      d, (hl)

fsExit:
    ; Возвращаем в hl адрес структуры DISK_INFO
    ld      hl, (v_diskInfo)
    ret

;----------------------------------------------------------------------------
; Функция 2 - чтение сектора
; вход:
;   de = номер сектора
;   hl = адрес буфера в памяти

FuncRead:
    ; Сохранение регистров
    push    hl
    push    de
    push    bc

    ; Настройка портов ВВ55
    ld      a, 90h              ; порт A - ввод, порты B и C - вывод 
    ld      (IO_PROG_MODE), a
    ld      a, 0Dh              ; вывод С6 порта клавиатуры = 1
    ld      (IO_KEYB_MODE), a

    ; de = адрес начала сектора в 64к странице ром-диска
    ; а номер страницы (d) теряется, т.к. поддерживается только одна страница
    ld      d, e
    ld      e, 0

ReadLoop:
    ex      de, hl          ; hl = адрес в ПЗУ, de = адрес в памяти
    ld      (IO_PROG_B), hl ; порт B = младший байт адреса, порт C = старший байт адреса
    ld      a, (IO_PROG_A)  ; a = байт из ПЗУ
    ex      de, hl          ; hl = адрес в памяти, de = адрес в ПЗУ
    ld      (hl), a         ; сохраняем байт в память
    inc     hl              ; следующий адрес в памяти
    inc     e               ; следующий адрес в ПЗУ
    jp nz,  ReadLoop        ; повтор цикла, пока адрес в ПЗУ не пересечет XX00h

    ; Восстановление портов, регистров и выход
    push    af
    ld      a, 0Ch          ; вывод С6 порта клавиатуры = 0
    ld      (IO_KEYB_MODE), a
    ld      a, 9Bh          ; Порты A, B, C - ввод
    ld      (IO_PROG_MODE), a
    pop     af
    pop     bc
    pop     de
    pop     hl
    ret

;----------------------------------------------------------------------------
; Чтение байта из чипа флеш памяти
; вход:
;   de = адрес в 64к странице
; выход:
;   a  = байт данных
;   пин чтения остаётся активным (C7 = 0)

ReadByteFromChip:
    ex      de, hl
    ld      (IO_PROG_B), hl
    ld      a, (IO_PROG_A)
    ex      de, hl
    ret

;----------------------------------------------------------------------------
; Переменные

v_diskInfo: DW 0

;----------------------------------------------------------------------------

    ; Проверка - ROM.COM не должен вылезать за эти пределы
    ASSERT_DONT_FIT 0E000h

    END
