;----------------------------------------------------------------------------
; MXOS
; FLASH.COM - драйвер флеш-диска на AT29C040A
;
; Драйвер имеет три функции (номер передаётся в регистре Е):
; 1 - записать кластер (256 байт, номер кластера в регистре D, адрес буфера в HL);
; 2 - считать  кластер (256 байт, номер кластера в регистре D, адрес буфера в HL);
; 3 - выдать размер диска (в кластерах, в регистре А).
;
; Поддерживается флеш-память AT29C040A
;
; 2022-01-25 Разработано SpaceEngineer
;
;----------------------------------------------------------------------------

; Функции системы
fileGetSetDrive	= 0C842h	; Получить/установить активное устройство
installDriver   = 0C860h	; Установить драйвер накопителя

; Переменные системы
v_flashPage     = 8FF9h     ; Текущая страница флеш-диска (макс. 1Fh = 31)

; Порты ВВ55 #2
IO_PROG_A    = 0FFE4h
IO_PROG_B    = 0FFE5h
IO_PROG_C    = 0FFE6h
IO_PROG_MODE = 0FFE7h

; Команды для дрыгания ножками ВВ55
LATCH_0 = 0Ah   ; пин защёлки ИР22 = 0
LATCH_1 = 0Bh   ; пин защёлки ИР22 = 1
WRITE_0 = 0Ch   ; пин записи = 0
WRITE_1 = 0Dh   ; пин записи = 1
READ_0  = 0Eh   ; пин чтения = 0
READ_1  = 0Fh   ; пин чтения = 1

; Маски управляющих пинов ВВ55
MASK_STANDBY  = 0C0h    ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
MASK_READ     = 040h    ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0

; Накопитель
DRIVE = 7 ; "H"

; Схема флеш-диска:
; Порт A - данные
; Порт B - адрес [A0-A7] или [A8-A15]
; Порт C0...C4 - адрес [A17-A20]
; Порт С5 - строб защёлки адреса [A8-A15] в ИР22 (лог. 1)
; Порт С6 - строб записи в ПЗУ  (лог. 0)
; Порт С7 - строб чтения из ПЗУ (лог. 0)

;----------------------------------------------------------------------------

.ORG 0FA00H

    ; Установить драйвер для накопителя 7 ("H")
	MVI  A, DRIVE
	LXI  H, Driver
	JMP	 installDriver

    ; Установить накопитель 7 ("H")
	MVI	 E, 1 ; функция 1 - установить накопитель
	MVI	 A, DRIVE
	JMP	 fileGetSetDrive

Driver:
	PUSH H
	PUSH D
	PUSH B

    MOV	 A, E   ; номер функции
	CPI	 1
    JZ   FuncWrite
	CPI	 2
    JZ   FuncRead
	CPI	 3
	JZ	 FuncGetSize

Exit:
    PUSH PSW
    MVI  A, MASK_STANDBY    ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
	STA	 IO_PROG_C
	POP  PSW
	POP  B
	POP  D
	POP  H
	RET

;----------------------------------------------------------------------------
; Чтение кластера
; вход:
; D  - номер кластера
; HL - адрес буфера в памяти

FuncRead:
    ; Настройка портов ВВ55
	MVI	A, 90H          ; порт A - ввод, порты B и C - вывод 
	STA	IO_PROG_MODE

    ; Запись номера 64к страницы и управляющих битов в порт C
    LDA v_flashPage     ; номер 64к страницы, макс 1Fh
    ANI 01FH            ; на всякий случай
    ORI MASK_READ       ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0
	STA	IO_PROG_C       ; записываем номер 64к страницы и управляющие биты

    CALL LatchHiAddr    ; записвываем старший байт адреса (номер кластера) в ИР22
	XRA  A
	MOV  E, A           ; начинаем с 0 адреса кластера

ReadLoop:
    MOV  A, E
    STA  IO_PROG_B      ; порт B = младший байт адреса в странице
	LDA  IO_PROG_A      ; читаем байт из порта A
	MOV	 M, A           ; сохраняем в память
	INX	 H
	INR	 E
	JNZ  ReadLoop
	JMP  Exit

;----------------------------------------------------------------------------
; Запись кластера
; вход:
; D  - номер кластера
; HL - адрес буфера в памяти

FuncWrite:
    ; Настройка портов ВВ55
	MVI	A, 80H          ; порты A, B и C - вывод 
	STA	IO_PROG_MODE

    ; Определяем номер чипа на флеш-диске
    LDA v_flashPage     ; номер 64к страницы, макс 1Fh
    ANI 18h             ; обнуляем все биты кроме 3-го и 4-го
    MOV B, A            ; в B получаем номер чипа * 8 (0, 8, 16, 24)

    ; Отключение программной защиты от записи
    CALL DisableWriteProtection

    ; Запись номера 64к страницы и управляющих битов в порт C
    LDA v_flashPage     ; номер 64к страницы, макс 1Fh
    ANI 01FH            ; на всякий случай
    ORI MASK_STANDBY    ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
	STA	IO_PROG_C       ; записываем номер 64к страницы и управляющие биты

    CALL LatchHiAddr    ; записвываем старший байт адреса (номер кластера) в ИР22
	XRA  A
	MOV  E, A           ; начинаем с начала кластера (E = 0)

WriteLoop:
    MOV  A, E
    STA  IO_PROG_B      ; порт B = младший байт адреса в странице
	MOV	 A, M           ; читаем байт из памяти
	STA  IO_PROG_A      ; записываем в порт A
    MVI  A, WRITE_0
    STA  IO_PROG_MODE   ; устанавливаем пин записи (C6 = 0)
    MVI  A, WRITE_1
    STA  IO_PROG_MODE   ; снимаем пин записи (C6 = 1)
	INX	 H
	INR	 E
	JNZ  WriteLoop

    ; Ожидание окончания внутреннего цикла программирования флеш-памяти
    DCX  H              ; последний адрес в буфере
    MOV  C, M           ; читаем в C последний записанный байт из буфера
    DCR  E              ; последний байт в кластере

    ; Настройка портов ВВ55
    MVI  A, 90h        ; порт A - ввод, порты B и C - вывод 
    STA  IO_PROG_MODE

    ; Максимум итераций цикла ожидания: надо 20 мс, 
    ; 1 цикл = 197 тактов = 98.5 мкс,
    ; 20 мс = 203 итераций
    MVI  L, 204

    ; Цикл ожидания
Wait:
    DCR  L
    JZ   Exit

    CALL ReadByteFromChip   ; читаем последний записанный байт из флеш памяти

    ; пока программирование не окончено, флеш память будет выдавать
    ; бит 7 последнего записанного байта в инверсном виде
    CMP  C
    JNZ  Wait

    JMP  Exit

;    ; Задержка 840 циклов по 24 тактов = 10 мс
;    lxi h, 840
;Delay:
;    dcx	h       ; 5 тактов
;    mov	a, h    ; 5 тактов
;    ora	l       ; 4 такта
;    jnz	Delay   ; 10 тактов
;    jmp Exit

;----------------------------------------------------------------------------
; Отключение программной защиты от записи
; вход:
;  B - номер чипа * 8 (0, 8, 16, 24)

DisableWriteProtection:
    ; Управляющие коды пишутся в нулевую 64к страницу чипа,
    ; поэтому номер страницы менять не надо
    push d
    ; Записываем байт AAh по адресу 05555h в чип флеш-памяти
    mvi  a, 0AAh
    lxi  d, 5555h
    call WriteByteToChip
    ; Записываем байт 55h по адресу 02AAAh в чип флеш-памяти
    mvi  a, 55h
    lxi  d, 2AAAh
    call WriteByteToChip
    ; Записываем байт A0h по адресу 05555h в чип флеш-памяти
    mvi  a, 0A0h
    lxi  d, 5555h
    call WriteByteToChip
    pop  d
    ret

;-----------------------------------------------------------------------------------
; Определение объема накопителя
; выход:
;  A - количество кластеров

FuncGetSize:
    XRA  A  ; Размер страниы флеш диска всегда 256 (= 0) кластеров
    JMP  Exit

;    XRA	A
;    MOV	B, A ; счётчик занятых кластеров
;    MOV	D, A ; читаем кластер 0 (FAT)
;    MVI	E, 4 ; начиная с 4 байта
;    CALL LatchHiAddr
;Rep:
;    MOV  A, E
;    STA  IO_PROG_B    ; порт B = младший байт адреса в странице
;    LDA  IO_PROG_A    ; читаем байт из порта A
;    CPI  0FFH
;    JZ   SectorIsFree
;    INR  B    ; увеличить счетчик занятых кластеров
;SectorIsFree:
;    INR  E    ; следующий байт в кластере FAT
;    JNZ  Rep  ; E обнулится при переходе через 0FFh
;    JMP  Exit

;----------------------------------------------------------------------------
; Защёлкивание старшего байта адреса в ИР22 флеш-диска
; вход:
;   D - старший байт адреса (номер кластера)

LatchHiAddr:
    MVI A, LATCH_1
    STA IO_PROG_MODE  ; поднимаем защёлку ИР22 (C5 = 1)
    MOV A, D
    STA IO_PROG_B     ; порт B = старший байт адреса (номер кластера)
    MVI A, LATCH_0
    STA IO_PROG_MODE  ; опускаем защёлку ИР22 (C5 = 0), защёлкивая старший байт адреса
    RET

;----------------------------------------------------------------------------
; Чтеие байта из чипа флеш памяти
; вход:
;   DE - адрес в 64к странице
;   B - номер 64к страницы
; выход:
;   A - байт данных
;   пин чтения остаётся активным (C7 = 0)

ReadByteFromChip:
    CALL LatchHiAddr    ; записвываем старший байт адреса (номер кластера) в ИР22
    MOV  A, E
    STA  IO_PROG_B      ; порт B = младший байт адреса
    MOV  A, B
    ORI  MASK_READ      ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0
	STA  IO_PROG_C      ; записываем номер 64к страницы и управляющие биты
    LDA  IO_PROG_A      ; читаем байт из порта A
    RET

;----------------------------------------------------------------------------
; Запись байта в чип флеш памяти
; вход:
;   DE - адрес в 64к странице
;   B - номер 64к страницы
;   A - байт данных

WriteByteToChip:
    STA  IO_PROG_A      ; порт A = байт данных
    CALL LatchHiAddr    ; записвываем старший байт адреса (номер кластера) в ИР22
    MOV  A, E
    STA  IO_PROG_B      ; порт B = младший байт адреса
    MOV  A, B
    ORI  MASK_STANDBY   ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
	STA  IO_PROG_C      ; записываем номер 64к страницы и управляющие биты
    MVI  A, WRITE_0
    STA  IO_PROG_MODE   ; устанавливаем пин записи (C6 = 0)
    MVI  A, WRITE_1
    STA  IO_PROG_MODE   ; снимаем пин записи (C6 = 1)
    RET

;----------------------------------------------------------------------------

WaitFlag: .db 0     ; флаг ожидания завершения форматирования предыдущего сектора

;----------------------------------------------------------------------------

.END
