  1   0000              ;----------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; FLASH.COM - драйвер флеш-диска на AT29C040A
  4   0000              ;
  5   0000              ; Драйвер имеет три функции (номер передаётся в регистре b):
  6   0000              ;   b == 1 - записать сектор (256 байт, номер сектора в de, адрес буфера в hl);
  7   0000              ;   b == 2 - считать  сектор (256 байт, номер сектора в de, адрес буфера в hl);
  8   0000              ;   b == 3 - выдать размер диска в секторах (резльтат в de, адрес DISK_INFO в hl).
  9   0000              ;
 10   0000              ; Поддерживается флеш-память AT29C040A
 11   0000              ;
 12   0000              ; 2022-01-25 Разработано SpaceEngineer
 13   0000              ;----------------------------------------------------------------------------
 14   0000
 15   0000                  INCLUDE "../include/mxos.inc"
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Новая карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-D3FF - [5120 B] DOS.SYS
  9+  0000              ;   D400-DBFF - [2048 B] Свободно (2048 байт)
 10+  0000              ;   DC00-EDFF - [ 512 B] Драйвер магнитофона
 11+  0000              ;   DE00-DFFF - [ 512 B] Драйвер флеш-диска
 12+  0000              ;   E000-E7FF - [2048 B] Шрифт
 13+  0000              ;   E800-FAFF - [4864 B] Системные программы (NC.COM, E.COM, DL-RED.COM, FORMAT.COM, MON2.COM, ...)
 14+  0000              ;   FB00-FEFF - [1024 B] Дисковый кэш (fat + каталог)
 15+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 16+  0000              ;   FF82-FFBF - [  62 B] Стек
 17+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 18+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 19+  0000              ;
 20+  0000              ; Старая карта памяти:
 21+  0000              ;   8FDF-8FFF - [  32 B] Переменные
 22+  0000              ;   9000-BFFF - [12  KB] Экран
 23+  0000              ;   C000-CFFF - [4096 B] DOS.SYS
 24+  0000              ;   D000-E1FF - [4607 B] Системные программы (NC.COM, E.COM, DL-RED.COM)
 25+  0000              ;   E200-E5FF - [1024 B] Свободно (1024 байт)
 26+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 27+  0000              ;   E800-E8FF - [ 256 B] Свободно (256 байт)
 28+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 29+  0000              ;   F100-F8FF - [2048 B] Системные программы (FORMAT.COM, MON2.COM, ...)
 30+  0000              ;   F900-F9FF - [ 256 B] Свободно (256 байт)
 31+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 32+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер (fat + каталог)
 33+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 34+  0000              ;   FF82-FFBF - [  62 B] Стек
 35+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 36+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 37+  0000              ;-----------------------------------------------------------------------
 38+  0000
 39+  0000
 40+  0000              ;-----------------------------------------------------------------------
 41+  0000              ; Конфигурация сборки
 42+  0000              ;-----------------------------------------------------------------------
 43+  0000
 44+  0000              NEW_MEMORY_MAP       =  1       ; Новая карта памяти
 45+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 46+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 47+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 48+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 49+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 50+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 51+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 52+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 53+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 54+  0000
 55+  0000                  IF  NEW_MEMORY_MAP
 56+  0000              FONT_ADDR = 0E000h  ; Адрес шрфита
 57+  0000                  ELSE
 58+  0000 ~            FONT_ADDR = 0E900h  ; Адрес шрфита
 59+  0000                  ENDIF
 60+  0000
 61+  0000                  IF  LOAD_FONT
 62+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 63+  0000                  ELSE
 64+  0000 ~            FONT_ADDR_DIV_8 = -1
 65+  0000                  ENDIF
 66+  0000
 67+  0000              ;-----------------------------------------------------------------------
 68+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 69+  0000              ; Доступ к переменным и программ польователя:
 70+  0000              ; ld a, bios_vars.lastKey
 71+  0000              ;-----------------------------------------------------------------------
 72+  0000
 73+  0000                  STRUCT BIOS_VARIABLES
 74+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 75+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 76+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 77+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 78+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 79+  0000 ~            cursorCfg     DB       21h ; 0A9h     ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 80+  0000 ~            koi7          DB       0   ; 0FFh     ; 8FEAh - 0FFh = включен KOI-7, 0 = включен KOI-8
 81+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 82+  0000 ~            keyLocks      DB      0BAh ; 3Ah      ; 8FECh - Caps Lock или Рус/Lat (3A - прописные анг, BA - строчные анг, BB - прописные рус, 3B - строчные рус)
 83+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 84+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 85+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 86+  0000 ~            beepFreq      DB       5Fh            ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 87+  0000 ~            beepDuration  DB       20h            ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 88+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 89+  0000 ~            cursorDelay   DB       20h            ; 8FF4h - Задержка мигания курсора
 90+  0000 ~            antiBsDelay   DB      0E0h            ; 8FF5h - Задержка защиты от дребезга контактов клавиш
 91+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 92+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 93+  0000 ~            _reserv_4     DB       0              ; 8FF9h -
 94+  0000 ~            inverse       DW       0              ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 95+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 96+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 97+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 98+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 99+  0000                  ENDS
100+  0000
101+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
102+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
103+  0000
104+  0000              ;-----------------------------------------------------------------------
105+  0000              ; Стандартные точки входа ОС
106+  0000              ; Отмеченные [OLD] применять не рекомендуется
107+  0000              ; Отмеченные [MXOS2] - новые в MXOS 2
108+  0000              ;-----------------------------------------------------------------------
109+  0000
110+  0000              bios_init               = 0C000h ; Теплая перезагрузка
111+  0000
112+  0000              ; Устаревшие точки, лечше не применять
113+  0000              bios_keyScanOld         = 0C003h ; [OLD] Получить код нажатой клавиши, = bios_keyScan
114+  0000              bios_drawCursorOld      = 0C006h ; [OLD] Нарисовать/стереть курсор
115+  0000              bios_clearScreenOld     = 0C010h ; [OLD] Оистка экрана
116+  0000              bios_printCharOld       = 0C037h ; [OLD] Вывод символа на экран
117+  0000              bios_beep_Old           = 0C170h ; [OLD] Звуковой сигнал
118+  0000              bios_delay_l            = 0C18Fh ; [OLD] Задержка l циклов
119+  0000              bios_delay_b            = 0C190h ; [OLD] Задержка b циклов
120+  0000              bios_getchOld           = 0C337h ; [OLD] Ожидание ввода с клавиатуры
121+  0000              bios_tapeReadOld        = 0C377h ; [OLD] Чтение байта с магнитофона
122+  0000              bios_tapeWriteOld       = 0C3D0h ; [OLD] Запись байта на магнитофон
123+  0000              bios_cmp_hl_de          = 0C427h ; [OLD] Сравнить hl и de
124+  0000              bios_memcpy_bc_hl       = 0C42Dh ; [OLD] Скопировать блок памяти
125+  0000              bios_printStringOld     = 0C438h ; [OLD] Вывод строки на экран
126+  0000
127+  0000              ; Стандартные точки C800h
128+  0000              bios_reboot             = 0C800h ; Запустить NC.COM
129+  0000              bios_getch              = 0C803h ; Ожидание ввода с клавиатуры
130+  0000              bios_tapeRead           = 0C806h ; Чтение байта с магнитофона
131+  0000              bios_printChar          = 0C809h ; Вывод символа на экран
132+  0000              bios_tapeWrite          = 0C80Ch ; Запись байта на магнитофон
133+  0000              bios_input              = 0C80Fh ; Ввод строки с клавиатуры
134+  0000              bios_keyCheck           = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
135+  0000              bios_printHexByte       = 0C815h ; Вывод HEX числа на экран (байт)
136+  0000              bios_printString        = 0C818h ; Вывод строки на экран
137+  0000              bios_keyScan            = 0C81Bh ; Получить код нажатой клавиши
138+  0000              bios_getCursorPos       = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
139+  0000              bios_setCursorPos       = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
140+  0000              bios_tapeLoad           = 0C824h ; Загрузить программу с магнитофона
141+  0000              bios_tapeSave           = 0C827h ; Сохранить программу на магнитофон
142+  0000              bios_calcCS             = 0C82Ah ; Расчет контрольной суммы
143+  0000              bios_printHexWord       = 0C82Dh ; Вывод HEX числа на экран (слово)
144+  0000              bios_getMemTop          = 0C830h ; Получить объем доступной памяти
145+  0000              bios_setMemTop          = 0C833h ; Установить объем доступной памяти
146+  0000              bios_printer            = 0C836h ; Напечатать байт на принтере
147+  0000                  IF RAMFOS_COMPATIBILITY
148+  0000              bios_strToHex           = 0C839h ; [MXOS2] Преобразвоние строки в HEX формате в число
149+  0000                  ELSE
150+  0000 ~            bios_rebootAlt          = 0C839h ; Запустить NC.COM
151+  0000                  ENDIF
152+  0000              bios_rebootAlt2         = 0C83Ch ; Запустить NC.COM
153+  0000              bios_fileList           = 0C83Fh ; Получить список файлов
154+  0000              bios_fileGetSetDrive    = 0C842h ; Получить/установить активное устройство
155+  0000              bios_fileCreate         = 0C845h ; Создать файл
156+  0000              bios_fileLoad           = 0C848h ; Загрузить файл по адресу из заголовка этого файла
157+  0000              bios_fileDelete         = 0C84Bh ; Удалить файл
158+  0000              bios_fileRename         = 0C84Eh ; Переименовать файл
159+  0000              bios_fileLoadInfo       = 0C851h ; Загрузить информацию о файле
160+  0000              bios_fileGetSetAddr     = 0C854h ; Получить/установить адрес загрузки файла
161+  0000              bios_fileGetSetAttr     = 0C857h ; Получить/установить атрибуты файла
162+  0000              bios_fileNamePrepare    = 0C85Ah ; Преобразовать имя файла во внутренний формат
163+  0000              bios_fileExec           = 0C85Dh ; Запустить файл
164+  0000              bios_installDriver      = 0C860h ; Установить драйвер накопителя
165+  0000              bios_diskDriver         = 0C863h ; Драйвер выбранного диска
166+  0000              bios_fileLoad2          = 0C866h ; Загрузить файл по адресу de
167+  0000
168+  0000              ; Новые точки C800h MXOS2
169+  0000              bios_printCharReal      = 0C869h ; [MXOS2] Вывод символа на экран (только реальные символы)
170+  0000              bios_printDecWord       = 0C86Ch ; [MXOS2] Вывод числа экран в десятичной форме
171+  0000              bios_setRAMDDriver      = 0C86Fh ; [MXOS2] Установить драйвр рам-диска
172+  0000              bios_getDriveFreeSpace  = 0C872h ; [MXOS2] Получить оставшийся свободный объем диска
173+  0000              bios_upperCase          = 0C875h ; [MXOS2] Перевод кода символа КОИ-8 в верхний регистр
174+  0000              bios_strcmp             = 0C878h ; [MXOS2] Сравнение строк, чувствительное к регистру
175+  0000              bios_stricmp            = 0C87Bh ; [MXOS2] Сравнение строк, нечувствительное к регистру
176+  0000              bios_sub_hl_de          = 0C87Eh ; [MXOS2] Вычитание hl и de: hl = hl - de
177+  0000              bios_div_hl_2           = 0C881h ; [MXOS2] Деление hl на 2: hl = hl / 2
178+  0000              bios_mul_hl_de          = 0C884h ; [MXOS2] Умножение hl на de: hl = hl * de
179+  0000              bios_div_hl_de          = 0C887h ; [MXOS2] Деление hl на de: hl = hl / de, de = hl % de
180+  0000
181+  0000              ;-----------------------------------------------------------------------
182+  0000              ; Адрес таблицы переходов драйвера магнитофона
183+  0000              ;-----------------------------------------------------------------------
184+  0000
185+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
186+  0000
187+  0000              ;-----------------------------------------------------------------------
188+  0000              ; Непереключаемое ОЗУ ПК "Специалист-MX" (0FFC0h-0FFDF, 32 байта)
189+  0000              ;-----------------------------------------------------------------------
190+  0000
191+  0000              bios_RAMDRead   = 0FFC0h ; п/п чтения из ДОЗУ
192+  0000              bios_RAMDWrite  = 0FFD0h ; п/п записи в  ДОЗУ
193+  0000
194+  0000              ;-----------------------------------------------------------------------
195+  0000              ; Порты устройств ПК "Специалист-MX2" (0FFE0h-0FFFF, 32 байта)
196+  0000              ;-----------------------------------------------------------------------
197+  0000
198+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
199+  0000              IO_KEYB_B       =  0FFE1h
200+  0000              IO_KEYB_C       =  0FFE2h
201+  0000              IO_KEYB_MODE    =  0FFE3h
202+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
203+  0000              IO_PROG_B       =  0FFE5h
204+  0000              IO_PROG_C       =  0FFE6h
205+  0000              IO_PROG_MODE    =  0FFE7h
206+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
207+  0000              IO_FDD_TRACK    =  0FFE9h
208+  0000              IO_FDD_SECTOR   =  0FFEAh
209+  0000              IO_FDD_DATA     =  0FFEBh
210+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
211+  0000              IO_TIMER_CH1    =  0FFEDh
212+  0000              IO_TIMER_CH2    =  0FFEEh
213+  0000              IO_TIMER_MODE   =  0FFEFh
214+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
215+  0000              IO_FDD_MOTOR    =  0FFF1h
216+  0000              IO_FDD_SIDE     =  0FFF2h
217+  0000              IO_FDD_DRIVE    =  0FFF3h
218+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
219+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
220+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
221+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
222+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
223+  0000
224+  0000              ;-----------------------------------------------------------------------
225+  0000              ; Структура файловой системы
226+  0000              ;-----------------------------------------------------------------------
227+  0000
228+  0000              ; Структура каталога
229+  0000              DIR_DESCR_SIZE  = 32    ; размер дескриптора файла в каталоге (байт)
230+  0000              DIR_NAME_LENGTH = 8     ; длина имени файла  (байт)
231+  0000              FAT_ITEM_SIZE   = 2     ; размер записи в таблице FAT (байт)
232+  0000
233+  0000              SECTOR_SIZE  = 00100h   ; размер сектора 256 байт
234+  0000              CLUSTER_SIZE = 00100h   ; размер кластера 256 байт
235+  0000
236+  0000              ; Специальные коды кластеров FAT
237+  0000              FAT12_BAD = 00FF7h  ; плохой кластер
238+  0000              FAT16_BAD = 0FFF7h
239+  0000              FAT12_EOC = 00FFFh  ; последний кластер файла
240+  0000              FAT16_EOC = 0FFFFh
241+  0000              FAT12_RES = 00FFFh  ; зарезервированный кластер
242+  0000              FAT16_RES = 0FFFFh
243+  0000
244+  0000              ;-----------------------------------------------------------------------
245+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
246+  0000              ;-----------------------------------------------------------------------
247+  0000
248+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
249+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
250+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
251+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
252+  0000 ~            ntReserved      BLOCK   1                   ; смещение 0Ch, 1 байт  - используются в Windows NT
253+  0000 ~            createTimeTenth BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
254+  0000 ~            createTime      BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
255+  0000 ~            createDate      BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
256+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
257+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
258+  0000 ~            writeTime       BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
259+  0000 ~            writeDate       BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
260+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
261+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
262+  0000                  ENDS
263+  0000
264+  0000              ;-----------------------------------------------------------------------
265+  0000              ; Информация о активном накопителе (диске)
266+  0000              ;-----------------------------------------------------------------------
267+  0000
268+  0000                  STRUCT DISK_INFO
269+  0000 ~            sectorSize          BLOCK   2   ; размер сектора, байт (256, 512, 1024)
270+  0000 ~            sectorsPerCluster   BLOCK   2   ; размер кластера, секторов (1, 2, 4, 8)
271+  0000 ~            resSectors          BLOCK   2   ; сколько секторов занимает зарезервированная область = первый сектор таблицы fat
272+  0000 ~            fatSectors          BLOCK   2   ; сколько секторов занимает таблица fat
273+  0000 ~            dirSectors          BLOCK   2   ; сколько секторов занимает корневой каталог
274+  0000 ~            totalSectors        BLOCK   2   ; сколько всего секторов на диске
275+  0000 ~            rootDirMaxFiles     BLOCK   2   ; максимум файлов в корневом каталоге
276+  0000 ~            descrPerSector      BLOCK   2   ; сколько дескрипторов файлов вмещается в один сектор
277+  0000 ~            fatNumCells         BLOCK   2   ; количество ячеек в таблице fat (= fatSectors * sectorSize / 2)
278+  0000 ~            dirStartSector      BLOCK   2   ; первый сектор корневого каталога
279+  0000 ~            dataStartSector     BLOCK   2   ; первый сектор области данных
280+  0000 ~            volumeLabel         BLOCK  12   ; метка тома и 0 в конце
281+  0000 ~            isValid             BLOCK   1   ; 0 = нет драйвера, 1 = диск не распознан, 2 = диск распознан, корректно отформатирован
282+  0000                  ENDS
283+  0000
284+  0000              DISK_NO_DRIVER = 0
285+  0000              DISK_INVALID   = 1
286+  0000              DISK_VALID     = 2
287+  0000
288+  0000              ;-----------------------------------------------------------------------
289+  0000              ; Буферы в памяти
290+  0000              ;-----------------------------------------------------------------------
291+  0000
292+  0000              ; Дисковый кэш
293+  0000              FAT_CACHE_ADDR = 0FB00h ; адрес кэша секторов fat в памяти
294+  0000              FAT_CACHE_SIZE = 1024   ; размер кэша в байтах
295+  0000              FAT_CACHE_CAPACITY = FAT_CACHE_SIZE / SECTOR_SIZE   ; сколько секторов вмещается в кэш
296+  0000
297+  0000              ; Буфер для загрузки BAT файла
298+  0000                  IF NEW_MEMORY_MAP
299+  0000              BAT_BUFFER = 0E800h
300+  0000                  ELSE
301+  0000 ~            BAT_BUFFER = 0FC00h
302+  0000                  ENDIF
303+  0000
304+  0000              ; Командная строка и стек
305+  0000              CMD_LINE   = 0FF00h  ; 192 байта, но в конце стек
306+  0000              STACK_ADDR = 0FFC0h  ; стек
307+  0000
308+  0000              ;-----------------------------------------------------------------------
309+  0000              ; Всякие полезности
310+  0000              ;-----------------------------------------------------------------------
311+  0000
312+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
313+  0000                  MACRO ORG_PAD adr
314+  0000 ~                     IF $ > adr
315+  0000 ~                       ; вывод сообщения об ошибке
316+  0000 ~                       ASSERT 0
317+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
318+  0000 ~                     ELSE
319+  0000 ~                       ; заполнение памяти
320+  0000 ~                       BLOCK adr-$, 0FFh
321+  0000 ~                     ENDIF
322+  0000 ~                     ORG adr
323+  0000                  ENDM
324+  0000
325+  0000                  MACRO ORG_PAD0 adr
326+  0000 ~                     IF $ > adr
327+  0000 ~                       ; вывод сообщения об ошибке
328+  0000 ~                       ASSERT 0
329+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
330+  0000 ~                     ELSE
331+  0000 ~                       ; заполнение памяти
332+  0000 ~                       BLOCK adr-$, 0
333+  0000 ~                     ENDIF
334+  0000 ~                     ORG adr
335+  0000                  ENDM
336+  0000
337+  0000              ; Макросы для проверки текущего адреса
338+  0000                  MACRO ASSERT_EQUAL adr
339+  0000 ~                     IF $ != adr
340+  0000 ~                       ASSERT 0
341+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
342+  0000 ~                     ENDIF
343+  0000                  ENDM
344+  0000
345+  0000                  MACRO ASSERT_DONT_FIT adr
346+  0000 ~                     IF $ > adr
347+  0000 ~                       ASSERT 0
348+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
349+  0000 ~                     ENDIF
350+  0000                  ENDM
351+  0000
352+  0000              ;-----------------------------------------------------------------------
353+  0000              ; Конец
354+  0000              ;-----------------------------------------------------------------------
355+  0000
 16   0000
 17   0000              ; Команды для дрыгания ножками ВВ55
 18   0000              LATCH_0 = 0Ah   ; пин защёлки ИР22 = 0
 19   0000              LATCH_1 = 0Bh   ; пин защёлки ИР22 = 1
 20   0000              WRITE_0 = 0Ch   ; пин записи = 0
 21   0000              WRITE_1 = 0Dh   ; пин записи = 1
 22   0000              READ_0  = 0Eh   ; пин чтения = 0
 23   0000              READ_1  = 0Fh   ; пин чтения = 1
 24   0000
 25   0000              ; Маски управляющих пинов ВВ55
 26   0000              MASK_STADBY = 0C0h  ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
 27   0000              MASK_READ   = 040h  ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0
 28   0000
 29   0000              ; Накопитель, куда назначается драйвер
 30   0000              DRIVE       = 7     ; "H"
 31   0000
 32   0000              ; Объем накопителя по умолчанию (2 Мб, 4 х AT29C040A)
 33   0000              DISK_SECTORS = 4 * 512 * 4
 34   0000
 35   0000              ; Схема флеш-диска:
 36   0000              ; Порт A - данные
 37   0000              ; Порт B - адрес [A0-A7] или [A8-A15]
 38   0000              ; Порт C0...C4 - адрес [A17-A20]
 39   0000              ; Порт С5 - строб защёлки адреса [A8-A15] в ИР22 (лог. 1)
 40   0000              ; Порт С6 - строб записи в  ПЗУ (лог. 0)
 41   0000              ; Порт С7 - строб чтения из ПЗУ (лог. 0)
 42   0000
 43   0000              ;----------------------------------------------------------------------------
 44   0000
 45   0000                  ORG     0DE00h
 46   DE00
 47   DE00                  ; Установить драйвер для накопителя 7 ("H")
 48   DE00 3E 07            ld      a, DRIVE
 49   DE02 21 0C DE         ld      hl, Driver
 50   DE05 CD 60 C8         call    bios_installDriver
 51   DE08
 52   DE08                  ; Запоминаем адрес структуры DISK_INFO и выходим
 53   DE08 22 09 DF         ld      (v_diskInfo), hl
 54   DE0B C9               ret
 55   DE0C
 56   DE0C              Driver:
 57   DE0C
 58   DE0C                  ; Анализ номера функции
 59   DE0C 78               ld      a, b
 60   DE0D FE 03            cp      3
 61   DE0F CA 28 DE         jp z,   FuncSize
 62   DE12
 63   DE12 E5               push    hl
 64   DE13 D5               push    de
 65   DE14 C5               push    bc
 66   DE15
 67   DE15 3D               dec     a
 68   DE16 CA 69 DE         jp z,   FuncWrite
 69   DE19 3D               dec     a
 70   DE1A CA 46 DE         jp z,   FuncRead
 71   DE1D
 72   DE1D              Exit:
 73   DE1D F5               push    af
 74   DE1E 3E C0            ld      a, MASK_STADBY    ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
 75   DE20 32 E6 FF         ld      (IO_PROG_C), a
 76   DE23 F1               pop     af
 77   DE24 C1               pop     bc
 78   DE25 D1               pop     de
 79   DE26 E1               pop     hl
 80   DE27 C9               ret
 81   DE28
 82   DE28              ;-----------------------------------------------------------------------------------
 83   DE28              ; Функция 3 - определение объема накопителя
 84   DE28              ; выход:
 85   DE28              ;  de = количество секторов (1 - диск не отформатирован)
 86   DE28
 87   DE28              FuncSize:
 88   DE28                  ; Читаем поле isValid из структуры DISK_INFO
 89   DE28 2A 09 DF         ld      hl, (v_diskInfo)            ; hl = адрес структуры
 90   DE2B 11 22 00         ld      de, DISK_INFO.isValid       ; de = смещение поля
 91   DE2E 19               add     hl, de                      ; hl = адрес поля
 92   DE2F 7E               ld      a, (hl)                     ; a = isValid
 93   DE30
 94   DE30                  ; Если диск не отформатирован, возвращаем de = DISK_SECTORS
 95   DE30 11 00 20         ld      de, DISK_SECTORS
 96   DE33 FE 02            cp      DISK_VALID
 97   DE35 C2 42 DE         jp nz,  fsExit
 98   DE38
 99   DE38                  ; Иначе возвращаем в de поле totalSectors из структуры DISK_INFO
100   DE38 2A 09 DF         ld      hl, (v_diskInfo)            ; hl = адрес структуры
101   DE3B 11 0A 00         ld      de, DISK_INFO.totalSectors  ; de = смещение поля
102   DE3E 19               add     hl, de                      ; hl = адрес поля
103   DE3F 5E               ld      e, (hl)
104   DE40 23               inc     hl
105   DE41 56               ld      d, (hl)
106   DE42
107   DE42              fsExit:
108   DE42                  ; Возвращаем в hl адрес структуры DISK_INFO
109   DE42 2A 09 DF         ld      hl, (v_diskInfo)
110   DE45 C9               ret
111   DE46
112   DE46              ;----------------------------------------------------------------------------
113   DE46              ; Функция 2 - чтение сектора
114   DE46              ; вход:
115   DE46              ;   de = номер сектора
116   DE46              ;   hl = адрес буфера в памяти
117   DE46
118   DE46              FuncRead:
119   DE46                  ; Настройка портов ВВ55
120   DE46 3E 90            ld      a, 90h          ; порт A - ввод, порты B и C - вывод
121   DE48 32 E7 FF         ld      (IO_PROG_MODE), a
122   DE4B
123   DE4B                  ; Запись номера 64к страницы и управляющих битов в порт C
124   DE4B                  ; Т.к. секторы по 256 байт, старший байт de это просто номер 64к страницы
125   DE4B 7A               ld      a, d            ; номер 64к страницы, макс 1Fh
126   DE4C E6 1F            and     01Fh            ; на всякий случай
127   DE4E F6 40            or      MASK_READ       ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0
128   DE50 32 E6 FF         ld      (IO_PROG_C), a  ; записываем номер 64к страницы и управляющие биты
129   DE53
130   DE53                  ; de = адрес начала сектора в 64к странице флеш-диска
131   DE53 53               ld      d, e
132   DE54 1E 00            ld      e, 0
133   DE56 CD CE DE         call    LatchHiAddr     ; записываем d = старший байт адреса (номер сектора) в ИР22
134   DE59
135   DE59              ReadLoop:
136   DE59 7B               ld      a, e
137   DE5A 32 E5 FF         ld      (IO_PROG_B), a  ; порт B = младший байт адреса в странице
138   DE5D 3A E4 FF         ld      a, (IO_PROG_A)  ; читаем байт из порта A
139   DE60 77               ld      (hl), a         ; сохраняем в память
140   DE61 23               inc     hl
141   DE62 1C               inc     e
142   DE63 C2 59 DE         jp nz,  ReadLoop
143   DE66
144   DE66 C3 1D DE         jp      Exit
145   DE69
146   DE69              ;----------------------------------------------------------------------------
147   DE69              ; Функция 1 - запись сектора
148   DE69              ; вход:
149   DE69              ;   de = номер сектора
150   DE69              ;   hl = адрес буфера в памяти
151   DE69
152   DE69              FuncWrite:
153   DE69                  ; Настройка портов ВВ55
154   DE69 3E 80            ld      a, 80h          ; порты A, B и C - вывод
155   DE6B 32 E7 FF         ld      (IO_PROG_MODE), a
156   DE6E
157   DE6E                  ; Определяем номер чипа на флеш-диске
158   DE6E 7A               ld      a, d            ; номер 64к страницы, макс 1Fh
159   DE6F E6 18            and     18h             ; обнуляем все биты кроме 3-го и 4-го
160   DE71 47               ld      b, a            ; в B получаем номер чипа * 8 (0, 8, 16, 24)
161   DE72
162   DE72                  ; Отключение программной защиты от записи
163   DE72 CD B3 DE         call    DisableWriteProtection
164   DE75
165   DE75                  ; Запись номера 64к страницы и управляющих битов в порт C
166   DE75                  ; Т.к. секторы по 256 байт, старший байт de это просто номер 64к страницы
167   DE75 7A               ld      a, d            ; номер 64к страницы, макс 1Fh
168   DE76 E6 1F            and     01FH            ; на всякий случай
169   DE78 F6 C0            or      MASK_STADBY     ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
170   DE7A 32 E6 FF         ld      (IO_PROG_C),a   ; записываем номер 64к страницы и управляющие биты
171   DE7D
172   DE7D                  ; de = адрес начала сектора в 64к странице флеш-диска
173   DE7D 42               ld      b, d            ; сохраняем номер 64к страницы (понадобится для ReadByteFromChip)
174   DE7E 53               ld      d, e
175   DE7F 1E 00            ld      e, 0
176   DE81 CD CE DE         call    LatchHiAddr     ; записываем d = старший байт адреса (номер сектора) в ИР22
177   DE84
178   DE84              WriteLoop:
179   DE84 7B               ld      a, e
180   DE85 32 E5 FF         ld      (IO_PROG_B), a      ; порт B = младший байт адреса в странице
181   DE88 7E               ld      a, (hl)             ; читаем байт из памяти
182   DE89 32 E4 FF         ld      (IO_PROG_A), a      ; записываем в порт A
183   DE8C 3E 0C            ld      a, WRITE_0
184   DE8E 32 E7 FF         ld      (IO_PROG_MODE), a   ; устанавливаем пин записи (C6 = 0)
185   DE91 3E 0D            ld      a, WRITE_1
186   DE93 32 E7 FF         ld      (IO_PROG_MODE), a   ; снимаем пин записи (C6 = 1)
187   DE96 23               inc     hl
188   DE97 1C               inc     e
189   DE98 C2 84 DE         jp nz,  WriteLoop
190   DE9B
191   DE9B                  ; Ожидание окончания внутреннего цикла программирования флеш-памяти
192   DE9B 2B               dec     hl              ; последний адрес в буфере
193   DE9C 4E               ld      c, (hl)         ; читаем в C последний записанный байт из буфера
194   DE9D 1D               dec     e               ; адрес последнего байта в секторе
195   DE9E
196   DE9E                  ; Настройка портов ВВ55
197   DE9E 3E 90            ld   a, 90h             ; порт A - ввод, порты B и C - вывод
198   DEA0 32 E7 FF         ld  (IO_PROG_MODE), a
199   DEA3
200   DEA3                  ; Максимум итераций цикла ожидания: надо 20 мс,
201   DEA3                  ; 1 цикл = 197 тактов = 98.5 мкс,
202   DEA3                  ; 20 мс = 203 итерации
203   DEA3 2E CC            ld   l, 204
204   DEA5
205   DEA5                  ; Цикл ожидания
206   DEA5              Wait:
207   DEA5 2D               dec     l
208   DEA6 CA 1D DE         jp z,   Exit
209   DEA9
210   DEA9                   ; читаем последний записанный байт из флеш памяти
211   DEA9 CD DD DE         call    ReadByteFromChip ; b = номер 64к страницы
212   DEAC
213   DEAC                  ; Пока программирование не окончено, флеш память будет выдавать
214   DEAC                  ; бит 7 последнего записанного байта в инверсном виде
215   DEAC B9               cp      c
216   DEAD C2 A5 DE         jp nz,  Wait
217   DEB0
218   DEB0 C3 1D DE         jp      Exit
219   DEB3
220   DEB3              ;    ; Задержка 840 циклов по 24 тактов = 10 мс
221   DEB3              ;    ld     h, 840
222   DEB3              ;Delay:
223   DEB3              ;    dec    h       ; 5 тактов
224   DEB3              ;    ld     a, h    ; 5 тактов
225   DEB3              ;    or     l       ; 4 такта
226   DEB3              ;    jp nz, Delay   ; 10 тактов
227   DEB3              ;    jp     Exit
228   DEB3
229   DEB3              ;----------------------------------------------------------------------------
230   DEB3              ; Отключение программной защиты от записи
231   DEB3              ; вход:
232   DEB3              ;  b = номер чипа * 8 (0, 8, 16, 24)
233   DEB3
234   DEB3              DisableWriteProtection:
235   DEB3                  ; Управляющие коды пишутся в нулевую 64к страницу чипа,
236   DEB3                  ; поэтому номер страницы менять не надо
237   DEB3 D5               push    de
238   DEB4                  ; Записываем байт AAh по адресу 05555h в чип флеш-памяти
239   DEB4 3E AA            ld      a,  0AAh
240   DEB6 11 55 55         ld      de, 5555h
241   DEB9 CD EE DE         call    WriteByteToChip ; b = номер 64к страницы
242   DEBC                  ; Записываем байт 55h по адресу 02AAAh в чип флеш-памяти
243   DEBC 3E 55            ld      a,  55h
244   DEBE 11 AA 2A         ld      de, 2AAAh
245   DEC1 CD EE DE         call    WriteByteToChip ; b = номер 64к страницы
246   DEC4                  ; Записываем байт A0h по адресу 05555h в чип флеш-памяти
247   DEC4 3E A0            ld      a,  0A0h
248   DEC6 11 55 55         ld      de, 5555h
249   DEC9 CD EE DE         call    WriteByteToChip ; b = номер 64к страницы
250   DECC D1               pop     de
251   DECD C9               ret
252   DECE
253   DECE              ;----------------------------------------------------------------------------
254   DECE              ; Защёлкивание старшего байта адреса в ИР22 флеш-диска
255   DECE              ; вход:
256   DECE              ;   d = старший байт адреса (номер сектора)
257   DECE
258   DECE              LatchHiAddr:
259   DECE 3E 0B            ld      a, LATCH_1
260   DED0 32 E7 FF         ld      (IO_PROG_MODE), a   ; поднимаем защёлку ИР22 (C5 = 1)
261   DED3 7A               ld      a, d
262   DED4 32 E5 FF         ld      (IO_PROG_B), a      ; порт B = старший байт адреса (номер сектора)
263   DED7 3E 0A            ld      a, LATCH_0
264   DED9 32 E7 FF         ld      (IO_PROG_MODE), a   ; опускаем защёлку ИР22 (C5 = 0), защёлкивая старший байт адреса
265   DEDC C9               ret
266   DEDD
267   DEDD              ;----------------------------------------------------------------------------
268   DEDD              ; Чтение байта из чипа флеш памяти
269   DEDD              ; вход:
270   DEDD              ;   de = адрес в 64к странице
271   DEDD              ;   b  = номер 64к страницы
272   DEDD              ; выход:
273   DEDD              ;   a  = байт данных
274   DEDD              ;   пин чтения остаётся активным (C7 = 0)
275   DEDD
276   DEDD              ReadByteFromChip:
277   DEDD CD CE DE         call    LatchHiAddr     ; записываем d = старший байт адреса (номер сектора) в ИР22
278   DEE0 7B               ld      a, e
279   DEE1 32 E5 FF         ld      (IO_PROG_B), a  ; порт B = младший байт адреса
280   DEE4 78               ld      a, b
281   DEE5 F6 40            or      MASK_READ       ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 0
282   DEE7 32 E6 FF         ld      (IO_PROG_C), a  ; записываем номер 64к страницы и управляющие биты
283   DEEA 3A E4 FF         ld      a,(IO_PROG_A)   ; читаем байт из порта A
284   DEED C9               ret
285   DEEE
286   DEEE              ;----------------------------------------------------------------------------
287   DEEE              ; Запись байта в чип флеш памяти
288   DEEE              ; вход:
289   DEEE              ;   de = адрес в 64к странице
290   DEEE              ;   b  = номер 64к страницы
291   DEEE              ;   a  = байт данных
292   DEEE
293   DEEE              WriteByteToChip:
294   DEEE 32 E4 FF         ld      (IO_PROG_A), a      ; порт A = байт данных
295   DEF1 CD CE DE         call    LatchHiAddr         ; записываем d = старший байт адреса (номер сектора) в ИР22
296   DEF4 7B               ld      a, e
297   DEF5 32 E5 FF         ld      (IO_PROG_B), a      ; порт B = младший байт адреса
298   DEF8 78               ld      a, b
299   DEF9 F6 C0            or      MASK_STADBY         ; пин защёлки ИР22 = 0, пин записи = 1, пин чтения = 1
300   DEFB 32 E6 FF         ld      (IO_PROG_C), a      ; записываем номер 64к страницы и управляющие биты
301   DEFE 3E 0C            ld      a, WRITE_0
302   DF00 32 E7 FF         ld      (IO_PROG_MODE), a   ; устанавливаем пин записи (C6 = 0)
303   DF03 3E 0D            ld      a, WRITE_1
304   DF05 32 E7 FF         ld      (IO_PROG_MODE), a   ; снимаем пин записи (C6 = 1)
305   DF08 C9               ret
306   DF09
307   DF09              ;----------------------------------------------------------------------------
308   DF09              ; Переменные
309   DF09
310   DF09 00 00        v_diskInfo: DW 0
311   DF0B
312   DF0B              ;----------------------------------------------------------------------------
313   DF0B
314   DF0B                  ; Проверка - FLASH.COM не должен вылезать за эти пределы
315   DF0B                  ASSERT_DONT_FIT 0E000h
315   DF0B             >         IF $ > 0E000h
315   DF0B ~           >           ASSERT 0
315   DF0B ~           >           DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
315   DF0B             >         ENDIF
316   DF0B
317   DF0B                  END
