  1   0000              ;----------------------------------------------------------------------------
  2   0000              ; MXOS - Файловый менеджер NC.COM
  3   0000              ;
  4   0000              ; 2013-12-18 Дизассемблировано и доработано vinxru
  5   0000              ; 2022-01-31 Доработано SpaceEngineer
  6   0000              ;----------------------------------------------------------------------------
  7   0000
  8   0000                  INCLUDE "../include/mxos.inc"
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-CFFF - [4096 B] DOS.SYS (в конце чуть чуть свободного места под доработки)
  9+  0000              ;   D000-E1FF - [4607 B] NC.COM (в конце место под список файлов и чуть чуть свободного места под доработки)
 10+  0000              ;   E200-E5FF - [1024 B] (свободно 1024 байт)
 11+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 12+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 13+  0000              ;   F100-F8FF - [2048 B] FORMAT.COM, FPAGE.COM, MON2.COM и прочие утилиты
 14+  0000              ;   F900-F9FF - [ 256 B] (Свободно 256 байт)
 15+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 16+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер
 17+  0000              ;   FF00-FF81 - [ 129 B] Командная строка. Заполняется функцией bios_fileExec
 18+  0000              ;   FF82-FFBF - [ 130 B] Стек
 19+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвера обмена с RAM диском
 20+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 21+  0000              ;-----------------------------------------------------------------------
 22+  0000
 23+  0000
 24+  0000              ;-----------------------------------------------------------------------
 25+  0000              ; Конфигурация сборки
 26+  0000              ;-----------------------------------------------------------------------
 27+  0000
 28+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 29+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 30+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 31+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 32+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 33+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 34+  0000              FONT_ADDR            =  0E900h  ; Адрес шрфита
 35+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 36+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 37+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 38+  0000              FAT16                =  1       ; Включить поддержку FAT16
 39+  0000
 40+  0000                  IF  LOAD_FONT
 41+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 42+  0000                  ELSE
 43+  0000 ~            FONT_ADDR_DIV_8 = -1
 44+  0000                  ENDIF
 45+  0000
 46+  0000              ;-----------------------------------------------------------------------
 47+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 48+  0000              ; Доступ к переменным и программ польователя:
 49+  0000              ; ld a, bios_vars.lastKey
 50+  0000              ;-----------------------------------------------------------------------
 51+  0000
 52+  0000                  STRUCT BIOS_VARIABLES
 53+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 54+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 55+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 56+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 57+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 58+  0000 ~            cursorCfg     DB      11h ; 0A9h      ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 59+  0000 ~            koi8          DB      -1              ; 8FEAh - 0FFh = включен KOI-8, 0 = включен KOI-7
 60+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 61+  0000 ~            keyLocks      DB      3Ah             ; 8FECh -
 62+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 63+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 64+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 65+  0000 ~            beepFreq      DB      5Fh             ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 66+  0000 ~            beepDuration  DB      20h             ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 67+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 68+  0000 ~            cursorDelay   DB      020h            ; 8FF4h -
 69+  0000 ~            byte_8FF5     DB      0E0h            ; 8FF5h -
 70+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 71+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 72+  0000 ~            flashPage     DB      0               ; 8FF9h - Текущий номер страницы флеш-диска
 73+  0000 ~            inverse       DW      0               ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 74+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 75+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 76+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 77+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 78+  0000                  ENDS
 79+  0000
 80+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
 81+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
 82+  0000
 83+  0000              ;-----------------------------------------------------------------------
 84+  0000              ; Стандартные точки входа ОС
 85+  0000              ; Отмеченные * применять не рекомендуется
 86+  0000              ;-----------------------------------------------------------------------
 87+  0000
 88+  0000              bios_init            = 0C000h ; Теплая перезагрузка
 89+  0000
 90+  0000              ; Устаревшие точки, лечше не применять
 91+  0000              bios_keyScanOld      = 0C003h ; * Получить код нажатой клавиши, = bios_keyScan
 92+  0000              bios_drawCursorOld   = 0C006h ; * Нарисовать/стереть курсор
 93+  0000              bios_clearScreenOld  = 0C010h ; * Оистка экрана
 94+  0000              bios_printCharOld    = 0C037h ; * Вывод символа на экран
 95+  0000              bios_beep_Old        = 0C170h ; * Звуковой сигнал
 96+  0000              bios_delay_l         = 0C18Fh ; * Задержка l циклов
 97+  0000              bios_delay_b         = 0C190h ; * Задержка b циклов
 98+  0000              bios_getchOld        = 0C337h ; * Ожидание ввода с клавиатуры
 99+  0000              bios_tapeReadOld     = 0C377h ; * Чтение байта с магнитофона
100+  0000              bios_tapeWriteOld    = 0C3D0h ; * Запись байта на магнитофон
101+  0000              bios_cmp_hl_de       = 0C427h ; * Сравнить hl и de
102+  0000              bios_memcpy_bc_hl    = 0C42Dh ; * Скопировать блок памяти
103+  0000              bios_printStringOld  = 0C438h ; * Вывод строки на экран
104+  0000
105+  0000              bios_reboot          = 0C800h ; Запустить NC.COM
106+  0000              bios_getch           = 0C803h ; Ожидание ввода с клавиатуры
107+  0000              bios_tapeRead        = 0C806h ; Чтение байта с магнитофона
108+  0000              bios_printChar       = 0C809h ; Вывод символа на экран
109+  0000              bios_tapeWrite       = 0C80Ch ; Запись байта на магнитофон
110+  0000              bios_input           = 0C80Fh ; Ввод строки с клавиатуры
111+  0000              bios_keyCheck        = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
112+  0000              bios_printHexByte    = 0C815h ; Вывод HEX числа на экран (байт)
113+  0000              bios_printString     = 0C818h ; Вывод строки на экран
114+  0000              bios_keyScan         = 0C81Bh ; Получить код нажатой клавиши
115+  0000              bios_getCursorPos    = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
116+  0000              bios_setCursorPos    = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
117+  0000              bios_tapeLoad        = 0C824h ; Загрузить программу с магнитофона
118+  0000              bios_tapeSave        = 0C827h ; Сохранить программу на магнитофон
119+  0000              bios_calcCS          = 0C82Ah ; Расчет контрольной суммы
120+  0000              bios_printHexWord    = 0C82Dh ; Вывод HEX числа на экран (слово)
121+  0000              bios_getMemTop       = 0C830h ; Получить объем доступной памяти
122+  0000              bios_setMemTop       = 0C833h ; Установить объем доступной памяти
123+  0000              bios_printer         = 0C836h ; Напечатать байт на принтере
124+  0000                  IF RAMFOS_COMPATIBILITY
125+  0000              bios_strToHex        = 0C839h ; Преобразвоние строки в HEX формате в число
126+  0000                  ELSE
127+  0000 ~            bios_rebootAlt       = 0C839h ; Запустить NC.COM
128+  0000                  ENDIF
129+  0000              bios_rebootAlt2      = 0C83Ch ; Запустить NC.COM
130+  0000              bios_fileList        = 0C83Fh ; Получить список файлов
131+  0000              bios_fileGetSetDrive = 0C842h ; Получить/установить активное устройство
132+  0000              bios_fileCreate      = 0C845h ; Создать файл
133+  0000              bios_fileLoad        = 0C848h ; Загрузить файл по адресу из заголовка этого файла
134+  0000              bios_fileDelete      = 0C84Bh ; Удалить файл
135+  0000              bios_fileRename      = 0C84Eh ; Переименовать файл
136+  0000              bios_fileLoadInfo    = 0C851h ; Загрузить информацию о файле
137+  0000              bios_fileGetSetAddr  = 0C854h ; Получить/установить адрес загрузки файла
138+  0000              bios_fileGetSetAttr  = 0C857h ; Получить/установить атрибуты файла
139+  0000              bios_fileNamePrepare = 0C85Ah ; Преобразовать имя файла во внутренний формат
140+  0000              bios_fileExec        = 0C85Dh ; Запустить файл
141+  0000              bios_installDriver   = 0C860h ; Установить драйвер накопителя
142+  0000              bios_diskDriver      = 0C863h ; Драйвер выбранного диска
143+  0000              bios_fileLoad2       = 0C866h ; Загрузить файл по адресу de
144+  0000              bios_printCharReal   = 0C869h ; Вывод символа на экран (только реальные символы)
145+  0000              bios_printDecWord    = 0C86Ch ; Вывод числа экран в десятичной форме
146+  0000              bios_setRAMDDriver   = 0C86Fh ; Установить драйвр рам-диска
147+  0000
148+  0000              ;-----------------------------------------------------------------------
149+  0000              ; Точки входа драйвера доступа к ДОЗУ
150+  0000              ;-----------------------------------------------------------------------
151+  0000
152+  0000              bios_RAMDRead  = 0FFC0h ; чтение из ДОЗУ
153+  0000              bios_RAMDWrite = 0FFD0h ; запись в  ДОЗУ
154+  0000
155+  0000              ;-----------------------------------------------------------------------
156+  0000              ; Адрес таблицы переходов драйвера магнитофона
157+  0000              ;-----------------------------------------------------------------------
158+  0000
159+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
160+  0000
161+  0000              ;-----------------------------------------------------------------------
162+  0000              ; Порты устройств ПК "Специалист-MX2"
163+  0000              ;-----------------------------------------------------------------------
164+  0000
165+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
166+  0000              IO_KEYB_B       =  0FFE1h
167+  0000              IO_KEYB_C       =  0FFE2h
168+  0000              IO_KEYB_MODE    =  0FFE3h
169+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
170+  0000              IO_PROG_B       =  0FFE5h
171+  0000              IO_PROG_C       =  0FFE6h
172+  0000              IO_PROG_MODE    =  0FFE7h
173+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
174+  0000              IO_FDD_TRACK    =  0FFE9h
175+  0000              IO_FDD_SECTOR   =  0FFEAh
176+  0000              IO_FDD_DATA     =  0FFEBh
177+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
178+  0000              IO_TIMER_CH1    =  0FFEDh
179+  0000              IO_TIMER_CH2    =  0FFEEh
180+  0000              IO_TIMER_MODE   =  0FFEFh
181+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
182+  0000              IO_FDD_MOTOR    =  0FFF1h
183+  0000              IO_FDD_SIDE     =  0FFF2h
184+  0000              IO_FDD_DRIVE    =  0FFF3h
185+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
186+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
187+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
188+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
189+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
190+  0000
191+  0000              ;-----------------------------------------------------------------------
192+  0000              ; Структура файловой системы
193+  0000              ;-----------------------------------------------------------------------
194+  0000
195+  0000              ; Структура каталога
196+  0000
197+  0000                  IF FAT16
198+  0000
199+  0000              DIR_DESCR_SIZE  = 32    ; Размер дескриптора файла в каталоге (байт)
200+  0000              DIR_NAME_LENGTH = 8     ; Длина имени файла  (байт)
201+  0000              FAT_ITEM_SIZE   = 2     ; Размер записи в таблице FAT (байт)
202+  0000
203+  0000              ;-----------------------------------------------------------------------
204+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
205+  0000              ;-----------------------------------------------------------------------
206+  0000
207+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
208+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
209+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
210+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
211+  0000 ~            checkSum        BLOCK   1  ; ntRes          ; смещение 0Ch, 1 байт  - контрольная сумма (!!! временный костыль, в FAT32 это ntRes - используются в Windows NT !!!)
212+  0000 ~            ctrTimeTenth    BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
213+  0000 ~            ctrTime         BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
214+  0000 ~            ctrDate         BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
215+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
216+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
217+  0000 ~            wrtTime         BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
218+  0000 ~            wrtDate         BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
219+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
220+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
221+  0000                  ENDS
222+  0000
223+  0000              ;-----------------------------------------------------------------------
224+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
225+  0000              ;-----------------------------------------------------------------------
226+  0000
227+  0000                  ELSE
228+  0000 ~
229+  0000 ~            DIR_DESCR_SIZE  = 16    ; Размер дескриптора файла в каталоге
230+  0000 ~            DIR_NAME_LENGTH = 6     ; Длина имени файла (байт)
231+  0000 ~            FAT_ITEM_SIZE   = 1     ; Размер записи в таблице FAT (байт)
232+  0000 ~
233+  0000 ~            ;-----------------------------------------------------------------------
234+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
235+  0000 ~            ;-----------------------------------------------------------------------
236+  0000 ~
237+  0000 ~                STRUCT FILE_DESCRIPTOR  ; 16 байт
238+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 6 байт  - имя файла
239+  0000 ~            ext             BLOCK   3                   ; смещение 06h, 3 байта - расширение имени файла
240+  0000 ~            attrib          BLOCK   1                   ; смещение 09h, 1 байт  - атрибуты файла: 00h - обычный файл, 01h - системный файл
241+  0000 ~            loadAddress     BLOCK   2                   ; смещение 0Ah, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый
242+  0000 ~            size            BLOCK   2                   ; смещение 0Ch, 2 байта - размер файла в байтах - 1
243+  0000 ~            checkSum        BLOCK   1                   ; смещение 0Eh, 1 байт  - контрольная сумма
244+  0000 ~            firstCluster    BLOCK   1                   ; смещение 0Fh, 1 байт  - номер первого кластера в FAT
245+  0000 ~                ENDS
246+  0000 ~
247+  0000 ~            ;-----------------------------------------------------------------------
248+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
249+  0000 ~            ;-----------------------------------------------------------------------
250+  0000 ~
251+  0000                  ENDIF
252+  0000
253+  0000              ;-----------------------------------------------------------------------
254+  0000              ; Буферы в памяти
255+  0000              ;-----------------------------------------------------------------------
256+  0000
257+  0000              CLUSTER_SIZE     = 00100h                   ; размер кластера 256 байт
258+  0000              CLUSTERS_IN_BANK = 10000h / CLUSTER_SIZE    ; сколько кластеров в 64 кб банке
259+  0000
260+  0000                  IF FAT16
261+  0000
262+  0000              FAT_CLUSTERS  = 16      ; сколько кластеров занимает таблица fat
263+  0000              DIR_CLUSTERS  = 4       ; сколько кластеров занимает корневой каталог
264+  0000              FAT_BUFFER    = 8000h - (FAT_CLUSTERS + DIR_CLUSTERS) * CLUSTER_SIZE; адрес буфера таблицы fat в памяти
265+  0000
266+  0000                  ELSE
267+  0000 ~
268+  0000 ~            FAT_CLUSTERS  = 1       ; сколько кластеров занимает таблица fat
269+  0000 ~            DIR_CLUSTERS  = 3       ; сколько кластеров занимает корневой каталог
270+  0000 ~            FAT_BUFFER    = 0FB00h  ; адрес буфера таблицы fat в памяти
271+  0000 ~
272+  0000                  ENDIF
273+  0000
274+  0000              FAT_SIZE      = FAT_CLUSTERS * CLUSTER_SIZE  ; размер таблицы fat в байтах
275+  0000              DIR_SIZE      = DIR_CLUSTERS * CLUSTER_SIZE  ; размер корневого каталога в байтах
276+  0000
277+  0000              DIR_BUFFER    = FAT_BUFFER + FAT_SIZE         ; адрес буфера корневого каталога в памяти
278+  0000
279+  0000              DIR_MAX_FILES = DIR_CLUSTERS * 256 / DIR_DESCR_SIZE    ; Максимум файлов в каталоге
280+  0000
281+  0000              BAT_BUFFER    = 0FC00h  ; буфер для загрузки BAT файла
282+  0000              CMD_LINE      = 0FF00h  ; 192 байта, но в конце стек
283+  0000              STACK_ADDR    = 0FFC0h  ; стек
284+  0000
285+  0000              ;-----------------------------------------------------------------------
286+  0000              ; Всякие полезности
287+  0000              ;-----------------------------------------------------------------------
288+  0000
289+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
290+  0000                  MACRO ORG_PAD adr
291+  0000 ~                     IF $ > adr
292+  0000 ~                       ; вывод сообщения об ошибке
293+  0000 ~                       ASSERT 0
294+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
295+  0000 ~                     ELSE
296+  0000 ~                       ; заполнение памяти
297+  0000 ~                       BLOCK adr-$, 0FFh
298+  0000 ~                     ENDIF
299+  0000 ~                     ORG adr
300+  0000                  ENDM
301+  0000
302+  0000                  MACRO ORG_PAD0 adr
303+  0000 ~                     IF $ > adr
304+  0000 ~                       ; вывод сообщения об ошибке
305+  0000 ~                       ASSERT 0
306+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
307+  0000 ~                     ELSE
308+  0000 ~                       ; заполнение памяти
309+  0000 ~                       BLOCK adr-$, 0
310+  0000 ~                     ENDIF
311+  0000 ~                     ORG adr
312+  0000                  ENDM
313+  0000
314+  0000              ; Макросы для проверки текущего адреса
315+  0000                  MACRO ASSERT_EQUAL adr
316+  0000 ~                     IF $ != adr
317+  0000 ~                       ASSERT 0
318+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
319+  0000 ~                     ENDIF
320+  0000                  ENDM
321+  0000
322+  0000                  MACRO ASSERT_DONT_FIT adr
323+  0000 ~                     IF $ > adr
324+  0000 ~                       ASSERT 0
325+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
326+  0000 ~                     ENDIF
327+  0000                  ENDM
328+  0000
329+  0000              ;-----------------------------------------------------------------------
330+  0000              ; Конец
331+  0000              ;-----------------------------------------------------------------------
332+  0000
  9   0000
 10   0000                    ORG 0D000h
 11   D000
 12   D000              ; Конфигурация сборки
 13   D000
 14   D000              SHOW_F9          = 0            ; Рисовать все кнопки F1...F9 на нижнем тулбаре (иначе F1...F8)
 15   D000
 16   D000              FILE_LIST_SIZE   = 36           ; Размер буфера для листинга директории (штук файлов)
 17   D000              FILE_LIST_BUFFER = 8000h        ; Адрес буфера для листинга директории (FILE_LIST_SIZE дескрипторов + 1 = 1153 байт)
 18   D000
 19   D000              ; Цвета
 20   D000
 21   D000              COLOR_CMDLINE    =  070h        ; Цвет командной строки
 22   D000              COLOR_CMDSCREEN  =  COLOR_BIOS  ; Цвет командного экрана (когда панели спрятаны)
 23   D000              COLOR_BORDER     =  0F1h        ; Цвет рамки
 24   D000              COLOR_PANELNAME  =  0A1h        ; Цвет заголовка панели (NAME)
 25   D000              COLOR_FILE       =  0B1h        ; Цвет файлов
 26   D000              COLOR_INFOLINE   =  0B1h        ; Цвет строки информации о текущем файле
 27   D000              COLOR_CURSOR     =  0B0h        ; Цвет курсора (инверсный)
 28   D000              COLOR_DIALOG     =  007h        ; Цвет окон диалогов F1-F9
 29   D000              COLOR_DIALOG_ERR =  047h        ; Цвет окна с сообщением об ошибке
 30   D000              COLOR_INFOHEADER =  0A1h        ; Заголовок информационной панели
 31   D000              COLOR_INFONUMBER =  0E1h        ; Цифры на информационной панели
 32   D000              COLOR_INFOTEXT   =  0F1h        ; Текст на информационной панели
 33   D000              COLOR_HELP_F     =  040h        ; Цвет функциональных клавиш в строке подсказки
 34   D000              COLOR_HELP_TEXT  =  071h        ; Цвет текста в строке подсказки
 35   D000
 36   D000              ;---------------------------------------------------------------------------
 37   D000              ; Макросы
 38   D000              ;---------------------------------------------------------------------------
 39   D000
 40   D000              ; Когда цвет включен, макрос вставляет такой код
 41   D000                  MACRO COLOR x
 42   D000 ~                    IF ENABLE_COLOR
 43   D000 ~                        ld a, x
 44   D000 ~                        ld (IO_COLOR), a
 45   D000 ~                    ENDIF
 46   D000                  ENDM
 47   D000
 48   D000              ; Макрос для нахождения координат строки длиной W, отцентрированной горизонтально
 49   D000                  MACRO CENTER_LINE w, y
 50   D000 ~                    ld  hl, ((60h - w * 3 / 2) << 8) + y
 51   D000 ~                    ld  (bios_vars.cursorY), hl
 52   D000                  ENDM
 53   D000
 54   D000              ;---------------------------------------------------------------------------
 55   D000              ; Код
 56   D000              ;---------------------------------------------------------------------------
 57   D000
 58   D000                  INCLUDE "start.inc"     ; Продолжается в main
  1+  D000              ;----------------------------------------------------------------------------
  2+  D000              ; MXOS NC.COM
  3+  D000              ; Запуск
  4+  D000              ;
  5+  D000              ; 2013-12-18 Дизассемблировано vinxru
  6+  D000              ;----------------------------------------------------------------------------
  7+  D000
  8+  D000              Start:      ; Отключаем инверсию
  9+  D000 21 00 00                 ld      hl, 0
 10+  D003 22 FA 8F                 ld      (bios_vars.inverse), hl
 11+  D006
 12+  D006                          ; Загружаем состояние. Если ZF, значит, уже запускали NC.COM.
 13+  D006                          ; Иначе сохраняем состояние.
 14+  D006 CD 24 D2                 call    loadState
 15+  D009 CA 0F D0                 jp z,   formatCalled
 16+  D00C
 17+  D00C                          ; Сохраняем состояние
 18+  D00C CD 08 D2                 call    saveState
 19+  D00F
 20+  D00F              ; ---------------------------------------------------------------------------
 21+  D00F
 22+  D00F              formatCalled:
 23+  D00F                          ; Выводим строку с кнопками
 24+  D00F                          COLOR   COLOR_HELP_F
 24+  D00F             >        IF ENABLE_COLOR
 24+  D00F 3E 40       >            ld a, COLOR_HELP_F
 24+  D011 32 F8 FF    >            ld (IO_COLOR), a
 24+  D014             >        ENDIF
 25+  D014 0E 1F                    ld      c, 1Fh  ; очистка экрана
 26+  D016 CD 09 C8                 call    bios_printChar
 27+  D019 21 FF 01                 ld      hl, 1FFh
 28+  D01C 22 FC 8F                 ld      (bios_vars.cursorY), hl
 29+  D01F 21 93 DC                 ld      hl, aF1LeftF2RighF3
 30+  D022 CD 18 C8                 call    bios_printString
 31+  D025
 32+  D025                          ; Раскрашиваем строку с кнопками
 33+  D025                          COLOR   COLOR_HELP_TEXT
 33+  D025             >        IF ENABLE_COLOR
 33+  D025 3E 71       >            ld a, COLOR_HELP_TEXT
 33+  D027 32 F8 FF    >            ld (IO_COLOR), a
 33+  D02A             >        ENDIF
 34+  D02A 21 F7 92                 ld      hl, 92F7h
 35+  D02D                  IF SHOW_F9
 36+  D02D ~                        ld      d, 9
 37+  D02D                  ELSE
 38+  D02D 16 08                    ld      d, 8
 39+  D02F                  ENDIF
 40+  D02F              loc_D049:
 41+  D02F                  IF SHOW_F9
 42+  D02F ~                        ld      b, 3
 43+  D02F                  ELSE
 44+  D02F 06 04                    ld      b, 4
 45+  D031                  ENDIF
 46+  D031 CD 95 D8                 call    inverseRect     ; hl - адрес, b - ширина, высота 9
 47+  D034 24                       inc     h
 48+  D035 24                       inc     h
 49+  D036 15                       dec     d
 50+  D037 C2 2F D0                 jp nz,  loc_D049
 51+  D03A
 52+  D03A                          ; Очищаем командную строку
 53+  D03A CD EA D7                 call    clearCmdLine
 54+  D03D
 59   D03D                  INCLUDE "main.inc"
  1+  D03D              ;----------------------------------------------------------------------------
  2+  D03D              ; MXOS NC.COM
  3+  D03D              ; Основной цикл
  4+  D03D              ;
  5+  D03D              ; 2013-12-18 Дизассемблировано vinxru
  6+  D03D              ;----------------------------------------------------------------------------
  7+  D03D
  8+  D03D              mainReload: ; Перерисовываем обе панели
  9+  D03D 3A AB DE                 ld    a, (activePanel)
 10+  D040 A7                       and   a
 11+  D041 C2 4D D0                 jp nz,      mainReload_0
 12+  D044 CD CA D8                 call  loadAndPrintA
 13+  D047 CD BB D8                 call  loadAndPrintB
 14+  D04A C3 53 D0                 jp    mainDriveChanged
 15+  D04D CD BB D8     mainReload_0:     call  loadAndPrintB
 16+  D050 CD CA D8                 call  loadAndPrintA
 17+  D053
 18+  D053              mainDriveChanged:
 19+  D053                          ; Вывод накопителя в ком строку
 20+  D053                          COLOR   COLOR_CMDLINE
 20+  D053             >        IF ENABLE_COLOR
 20+  D053 3E 70       >            ld a, COLOR_CMDLINE
 20+  D055 32 F8 FF    >            ld (IO_COLOR), a
 20+  D058             >        ENDIF
 21+  D058 21 F3 01                 ld      hl, 1F3h
 22+  D05B 22 FC 8F                 ld      (bios_vars.cursorY), hl
 23+  D05E 21 AE DE                 ld      hl, panelA_drive
 24+  D061 CD 16 DB                 call    readBytePanel
 25+  D064 CD FA DA                 call    printDrive
 26+  D067
 27+  D067                          ; Вывод информации о файле
 28+  D067 CD 43 D8                 call  printInfoLine
 29+  D06A
 30+  D06A              mainLoop:   ; Рисуем курсор выбранного файла
 31+  D06A                          COLOR   COLOR_CURSOR
 31+  D06A             >        IF ENABLE_COLOR
 31+  D06A 3E B0       >            ld a, COLOR_CURSOR
 31+  D06C 32 F8 FF    >            ld (IO_COLOR), a
 31+  D06F             >        ENDIF
 32+  D06F CD 11 D8                 call  drawCursor
 33+  D072
 34+  D072                          ; Положение курсора в ком строке
 35+  D072 2A C5 DE                 ld    hl, (nc_vars.cmdLinePos)
 36+  D075 22 FC 8F                 ld    (bios_vars.cursorY), hl
 37+  D078
 38+  D078                          ; Ждем нажатия клавиши
 39+  D078                          COLOR   COLOR_CMDLINE
 39+  D078             >        IF ENABLE_COLOR
 39+  D078 3E 70       >            ld a, COLOR_CMDLINE
 39+  D07A 32 F8 FF    >            ld (IO_COLOR), a
 39+  D07D             >        ENDIF
 40+  D07D CD 03 C8                 call  bios_getch
 41+  D080
 42+  D080                          ; Стираем курсор выбранного файла
 43+  D080 F5                       push    af
 44+  D081                          COLOR   COLOR_FILE
 44+  D081             >        IF ENABLE_COLOR
 44+  D081 3E B1       >            ld a, COLOR_FILE
 44+  D083 32 F8 FF    >            ld (IO_COLOR), a
 44+  D086             >        ENDIF
 45+  D086 CD 11 D8                 call    drawCursor
 46+  D089 F1                       pop     af
 47+  D08A
 48+  D08A                          ; Анализ нажатий клавиши
 49+  D08A 4F                       ld    c, a
 50+  D08B DA 5C D2                 jp c, mainLoop_ctrl
 51+  D08E A7                       and   a
 52+  D08F CA 5D D6                 jp z, F1
 53+  D092 3D                       dec   a
 54+  D093 CA 2E D6                 jp z, F2
 55+  D096 3D                       dec   a
 56+  D097 CA 6A D7                 jp z, F3
 57+  D09A 3D                       dec   a
 58+  D09B CA 66 D1                 jp z, F4
 59+  D09E 3D                       dec   a
 60+  D09F CA 16 D5                 jp z, F5
 61+  D0A2 3D                       dec   a
 62+  D0A3 CA AB D4                 jp z, F6
 63+  D0A6 3D                       dec   a
 64+  D0A7 CA F7 D2                 jp z, F7
 65+  D0AA 3D                       dec   a
 66+  D0AB CA B3 D5                 jp z, F8
 67+  D0AE 3D                       dec   a
 68+  D0AF CA BA D7                 jp z, Left
 69+  D0B2 3D                       dec   a
 70+  D0B3 CA 47 D7                 jp z, Tab
 71+  D0B6 D6 04                    sub   4
 72+  D0B8 CA 76 D1                 jp z, Enter
 73+  D0BB D6 0B                    sub   0Bh
 74+  D0BD CA CC D7                 jp z, Right
 75+  D0C0 3D                       dec   a
 76+  D0C1 CA AA D7                 jp z, Up
 77+  D0C4 3D                       dec   a
 78+  D0C5 CA 92 D7                 jp z, Down
 79+  D0C8 3D                       dec   a
 80+  D0C9 CA 18 D1                 jp z, Esc
 81+  D0CC C6 1B                    add   a,1Bh
 82+  D0CE FE 7F                    cp    7Fh
 83+  D0D0 CA FD D0                 jp z, Bkspc
 84+  D0D3 FE 8A                    cp    8Ah
 85+  D0D5 CA F3 D3                 jp z, f9
 86+  D0D8 FE 20        mainLoop_e: cp    ' '
 87+  D0DA DA 6A D0                 jp c, mainLoop
 88+  D0DD
 89+  D0DD                          ; Вывод символов в ком строку
 90+  D0DD 2A C7 DE                 ld    hl, (nc_vars.cmdLineEnd)
 91+  D0E0 4F                       ld    c, a
 92+  D0E1 77                       ld  (hl), a
 93+  D0E2
 94+  D0E2                          ; Если ком строка переполнена, выходим
 95+  D0E2 3E 0B                    ld    a, nc_vars.cmdLineCtrl & 0FFh
 96+  D0E4 BD                       cp    l
 97+  D0E5 CA 6A D0                 jp z, mainLoop
 98+  D0E8
 99+  D0E8                          ; Увеличиваем длину
100+  D0E8 23                       inc   hl
101+  D0E9 22 C7 DE                 ld    (nc_vars.cmdLineEnd), hl
102+  D0EC
103+  D0EC                          ; Выводим символ на экран
104+  D0EC                          COLOR   COLOR_CMDLINE
104+  D0EC             >        IF ENABLE_COLOR
104+  D0EC 3E 70       >            ld a, COLOR_CMDLINE
104+  D0EE 32 F8 FF    >            ld (IO_COLOR), a
104+  D0F1             >        ENDIF
105+  D0F1 CD 09 C8                 call  bios_printChar
106+  D0F4
107+  D0F4              mainLoop_savePos: ; ?
108+  D0F4 2A FC 8F                 ld    hl, (bios_vars.cursorY)
109+  D0F7 22 C5 DE                 ld    (nc_vars.cmdLinePos), hl
110+  D0FA
111+  D0FA C3 6A D0                 jp    mainLoop
112+  D0FD
113+  D0FD              ; ---------------------------------------------------------------------------
114+  D0FD
115+  D0FD              Bkspc:            ; Если ком строка пустая, выходим
116+  D0FD 2A C7 DE                 ld    hl, (nc_vars.cmdLineEnd)
117+  D100 3E D0                    ld    a, nc_vars.cmdLine & 0FFh
118+  D102 BD                       cp    l
119+  D103 CA 6A D0                 jp z, mainLoop
120+  D106
121+  D106                          ; Удаляем один символ
122+  D106 2B                       dec   hl
123+  D107 22 C7 DE                 ld    (nc_vars.cmdLineEnd), hl
124+  D10A
125+  D10A                          ; Стираем символ на экране
126+  D10A                          COLOR   070h
126+  D10A             >        IF ENABLE_COLOR
126+  D10A 3E 70       >            ld a, 070h
126+  D10C 32 F8 FF    >            ld (IO_COLOR), a
126+  D10F             >        ENDIF
127+  D10F 21 40 DD                 ld      hl, asc_DC17
128+  D112 CD 18 C8                 call    bios_printString
129+  D115
130+  D115 C3 F4 D0                 jp    mainLoop_savePos
131+  D118
132+  D118              ; ---------------------------------------------------------------------------
133+  D118
134+  D118 CD EA D7     Esc:        call  clearCmdLine
135+  D11B C3 6A D0                 jp    mainLoop
136+  D11E
137+  D11E              ; ---------------------------------------------------------------------------
138+  D11E
139+  D11E              ctrlEnter:  ; Если файл не выбран, выход
140+  D11E CD A7 D8                 call  getSelectedFile
141+  D121 7E                       ld  a, (hl)
142+  D122 FE FF                    cp    0FFh
143+  D124 CA 6A D0                 jp z, mainLoop
144+  D127
145+  D127 CD 4D D1                 call  selFileToCmdLine
146+  D12A C3 6A D0                 jp    mainLoop
147+  D12D
 60   D12D                  INCLUDE "selFileToCmdLine.inc"
  1+  D12D              ;----------------------------------------------------------------------------
  2+  D12D              ; MXOS NC.COM
  3+  D12D              ; Сформировать строку пути выбраного файла
  4+  D12D              ;
  5+  D12D              ; вход:
  6+  D12D              ;   hl - адрес дескриптора файла
  7+  D12D              ;
  8+  D12D              ; 2013-12-18 Дизассемблировано vinxru
  9+  D12D              ;----------------------------------------------------------------------------
 10+  D12D
 11+  D12D              getSelFilePath:
 12+  D12D EB                   ex      de, hl
 13+  D12E
 14+  D12E                      ; Получаем текущий накопитель
 15+  D12E 21 AE DE             ld      hl, panelA_drive
 16+  D131 CD 16 DB             call    readBytePanel
 17+  D134 C6 41                add     a, 'A'
 18+  D136
 19+  D136                      ; Выводим его в ком строку
 20+  D136 2A C7 DE             ld      hl, (nc_vars.cmdLineEnd)
 21+  D139 77                   ld      (hl), a
 22+  D13A 23                   inc     hl
 23+  D13B
 24+  D13B                      ; Выводим двоеточние
 25+  D13B 36 3A                ld      (hl), ':'
 26+  D13D 23                   inc     hl
 27+  D13E
 28+  D13E                      ; Выводим имя файла
 29+  D13E EB                   ex      de, hl
 30+  D13F CD F0 DB             call    compactName
 31+  D142
 32+  D142                      ; Ограничение длины
 33+  D142 1B                   dec     de
 34+  D143 3E 0B                ld      a, nc_vars.cmdLineCtrl & 0FFh
 35+  D145 BB                   cp      e
 36+  D146 D2 4A D1             jp nc,  loc_D146
 37+  D149 5F                   ld      e, a
 38+  D14A              loc_D146:
 39+  D14A                      ; Терминатор
 40+  D14A AF                   xor     a
 41+  D14B 12                   ld      (de), a
 42+  D14C C9                   ret
 43+  D14D
 44+  D14D              ;----------------------------------------------------------------------------
 45+  D14D              ; MXOS NC.COM
 46+  D14D              ; Поместить выбранный файл в ком строку
 47+  D14D              ;
 48+  D14D              ; вход:
 49+  D14D              ;   hl - адрес дескриптора файла
 50+  D14D              ;
 51+  D14D              ; 2013-12-18 Дизассемблировано vinxru
 52+  D14D              ;----------------------------------------------------------------------------
 53+  D14D
 54+  D14D              selFileToCmdLine:
 55+  D14D CD 2D D1             call    getSelFilePath
 56+  D150
 57+  D150                      ; Вывод
 58+  D150                      COLOR   COLOR_CMDLINE
 58+  D150             >        IF ENABLE_COLOR
 58+  D150 3E 70       >            ld a, COLOR_CMDLINE
 58+  D152 32 F8 FF    >            ld (IO_COLOR), a
 58+  D155             >        ENDIF
 59+  D155 2A C7 DE             ld      hl, (nc_vars.cmdLineEnd)
 60+  D158 CD 18 C8             call    bios_printString
 61+  D15B
 62+  D15B                      ; Дописываем имя файла
 63+  D15B EB                   ex      de, hl
 64+  D15C 22 C7 DE             ld      (nc_vars.cmdLineEnd), hl
 65+  D15F
 66+  D15F                      ; Сохраняем новое положение
 67+  D15F 2A FC 8F             ld      hl, (bios_vars.cursorY)
 68+  D162 22 C5 DE             ld      (nc_vars.cmdLinePos), hl
 69+  D165 C9                   ret
 70+  D166
 61   D166                  INCLUDE "f4.inc"
  1+  D166              ;----------------------------------------------------------------------------
  2+  D166              ; MXOS NC.COM
  3+  D166              ; Клавиша F4 - запуск редактора
  4+  D166              ;
  5+  D166              ; 2013-12-18 Дизассемблировано vinxru
  6+  D166              ;----------------------------------------------------------------------------
  7+  D166
  8+  D166              F4:     ; Получение кол-ва файлов
  9+  D166 21 B0 DE             ld      hl, panelA_filesCnt
 10+  D169 CD 16 DB             call    readBytePanel
 11+  D16C
 12+  D16C                      ; Если файлов нет, выходим
 13+  D16C A7                   and     a
 14+  D16D CA 6A D0             jp z,   mainLoop
 15+  D170
 16+  D170                      ; Запуск редактора
 17+  D170 11 BD DE             ld      de, aEditor   ; "A:E.COM\r"
 18+  D173 C3 BF D1             jp      Enter_5
 19+  D176
 62   D176                  INCLUDE "enter.inc"
  1+  D176              ;----------------------------------------------------------------------------
  2+  D176              ; MXOS NC.COM
  3+  D176              ; Клавиша ENTER
  4+  D176              ;
  5+  D176              ; 2013-12-18 Дизассемблировано vinxru
  6+  D176              ;----------------------------------------------------------------------------
  7+  D176
  8+  D176              Enter:      ; Если ком строка не пустая
  9+  D176 2A C7 DE                 ld      hl, (nc_vars.cmdLineEnd)
 10+  D179 3E D0                    ld      a, nc_vars.cmdLine & 0FFh
 11+  D17B BD                       cp      l
 12+  D17C C2 F0 D1                 jp nz,  EnterCmdLine
 13+  D17F
 14+  D17F                          ; Запомнить текущий диск в регистре b
 15+  D17F 1E 00                    ld      e, 0
 16+  D181 CD 42 C8                 call    bios_fileGetSetDrive
 17+  D184 47                       ld      b, a
 18+  D185
 19+  D185                          ; Подготовить имя файла A:NC.EXT
 20+  D185 21 B4 DE                 ld      hl, aNcExt
 21+  D188 11 39 DF                 ld      de, nc_vars.tempFileDescr; nc_vars.tempFileDescr используется как буфер
 22+  D18B CD 5A C8                 call    bios_fileNamePrepare
 23+  D18E EB                       ex      de, hl
 24+  D18F
 25+  D18F                          ; Загрузить файл A:NC.EXT по адресу 0
 26+  D18F 21 39 DF                 ld      hl, nc_vars.tempFileDescr
 27+  D192 11 00 00                 ld      de, 0
 28+  D195 0E 01                    ld      c, 1
 29+  D197 CD 54 C8                 call    bios_fileGetSetAddr ; изменить адрес загрузки файла на de = 0
 30+  D19A CD 48 C8                 call    bios_fileLoad
 31+  D19D DA E5 D1                 jp c,   Enter_stdExec
 32+  D1A0
 33+  D1A0                          ; Переключить диск обратно
 34+  D1A0                          ;mov    a, b
 35+  D1A0                          ;mvi    e, 1
 36+  D1A0                          ;call   bios_fileGetSetDrive
 37+  D1A0
 38+  D1A0                          ; Получить имя выбранного файла
 39+  D1A0 CD A7 D8                 call    getSelectedFile
 40+  D1A3 7E                       ld      a, (hl)
 41+  D1A4 3C                       inc     a
 42+  D1A5 CA 6A D0                 jp z,   mainLoop ; Ничего не выбрано
 43+  D1A8
 44+  D1A8                          ; hl = указатель на расширение файла
 45+  D1A8 11 08 00                 ld      de, FILE_DESCRIPTOR.ext
 46+  D1AB 19                       add     hl, de
 47+  D1AC
 48+  D1AC 11 00 00                 ld      de, 0
 49+  D1AF
 50+  D1AF                          ; Сравниваем с расширеним из файла
 51+  D1AF              Enter_extLoop:
 52+  D1AF 0E 03                    ld      c, 3
 53+  D1B1 E5                       push    hl
 54+  D1B2              Enter_1:
 55+  D1B2 1A                       ld      a, (de)
 56+  D1B3 BE                       cp      (hl)
 57+  D1B4 C2 4D D2                 jp nz,  Enter_nextExt
 58+  D1B7 23                       inc     hl
 59+  D1B8 13                       inc     de
 60+  D1B9 0D                       dec     c
 61+  D1BA C2 B2 D1                 jp nz,  Enter_1
 62+  D1BD E1                       pop     hl
 63+  D1BE 13                       inc     de
 64+  D1BF
 65+  D1BF                          ; Найдено расширение
 66+  D1BF
 67+  D1BF                          ; Копирование имени выбранного файла в ком строку
 68+  D1BF              Enter_5:
 69+  D1BF 21 D0 DE                 ld      hl, nc_vars.cmdLine
 70+  D1C2              Enter_4:
 71+  D1C2 1A                       ld      a, (de)
 72+  D1C3 77                       ld      (hl),a
 73+  D1C4 FE 0D                    cp      0Dh
 74+  D1C6 CA D2 D1                 jp z,   Enter_3
 75+  D1C9 3C                       inc     a
 76+  D1CA CA D2 D1                 jp z,   Enter_3
 77+  D1CD 23                       inc     hl
 78+  D1CE 13                       inc     de
 79+  D1CF C3 C2 D1                 jp      Enter_4
 80+  D1D2
 81+  D1D2              ; ---------------------------------------------------------------------------
 82+  D1D2
 83+  D1D2              Enter_3:
 84+  D1D2 36 20                    ld      (hl), ' '
 85+  D1D4 23                       inc     hl
 86+  D1D5 36 00                    ld      (hl), 0
 87+  D1D7 22 C7 DE                 ld      (nc_vars.cmdLineEnd), hl
 88+  D1DA
 89+  D1DA                          ; Вывод ком строки на экран
 90+  D1DA                          COLOR   COLOR_CMDSCREEN
 90+  D1DA             >        IF ENABLE_COLOR
 90+  D1DA 3E F0       >            ld a, COLOR_CMDSCREEN
 90+  D1DC 32 F8 FF    >            ld (IO_COLOR), a
 90+  D1DF             >        ENDIF
 91+  D1DF 21 D0 DE                 ld      hl, nc_vars.cmdLine
 92+  D1E2 CD 18 C8                 call    bios_printString
 93+  D1E5
 94+  D1E5              Enter_stdExec:    ; Получить выбранный файл
 95+  D1E5 CD A7 D8                 call     getSelectedFile
 96+  D1E8
 97+  D1E8                          ; Ничего не выбрано
 98+  D1E8 7E                       ld      a, (hl)
 99+  D1E9 3C                       inc     a
100+  D1EA CA 6A D0                 jp z,   mainLoop
101+  D1ED
102+  D1ED                          ; ?
103+  D1ED CD 4D D1                 call    selFileToCmdLine
104+  D1F0
105+  D1F0              EnterCmdLine:
106+  D1F0                          ; Очистка экрана
107+  D1F0                          COLOR   COLOR_CMDSCREEN
107+  D1F0             >        IF ENABLE_COLOR
107+  D1F0 3E F0       >            ld a, COLOR_CMDSCREEN
107+  D1F2 32 F8 FF    >            ld (IO_COLOR), a
107+  D1F5             >        ENDIF
108+  D1F5 0E 1F                    ld      c, 1Fh
109+  D1F7 CD 09 C8                 call    bios_printChar
110+  D1FA
111+  D1FA                          ; Помещаем в конец ком строки 0Dh
112+  D1FA 2A C7 DE                 ld      hl, (nc_vars.cmdLineEnd)
113+  D1FD 36 0D                    ld      (hl), 0Dh
114+  D1FF
115+  D1FF                          ; Сохраняем состояние
116+  D1FF CD 08 D2                 call    saveState
117+  D202
118+  D202                          ; Запускаем файл
119+  D202 21 D0 DE                 ld      hl, nc_vars.cmdLine
120+  D205 C3 5D C8                 jp      bios_fileExec
121+  D208
 63   D208                  INCLUDE "saveState.inc"
  1+  D208              ;----------------------------------------------------------------------------
  2+  D208              ; MXOS NC.COM
  3+  D208              ; Cохранение состояния в ДОЗУ
  4+  D208              ;
  5+  D208              ; 2013-12-18 Дизассемблировано vinxru
  6+  D208              ;----------------------------------------------------------------------------
  7+  D208
  8+  D208              saveState:
  9+  D208                          ; Устанавливаем побайтовый драйвер
 10+  D208 06 01                    ld      b, 1
 11+  D20A CD 6F C8                 call    bios_setRAMDDriver
 12+  D20D
 13+  D20D 11 AA DE                 ld      de, initState   ; откуда (в ОЗУ)
 14+  D210 21 00 FF                 ld      hl, 0FF00h      ; куда (в ДОЗУ)
 15+  D213 06 0A                    ld      b,  10          ; сколько байт байт
 16+  D215
 17+  D215              saveStateLoop:
 18+  D215 1A                       ld      a, (de)
 19+  D216 4F                       ld      c, a            ; записываемый байт в c
 20+  D217 AF                       xor     a               ; 0 страница ДОЗУ
 21+  D218 CD D0 FF                 call    bios_RAMDWrite
 22+  D21B 23                       inc     hl
 23+  D21C 13                       inc     de
 24+  D21D 05                       dec     b
 25+  D21E C2 15 D2                 jp nz,  saveStateLoop
 26+  D221
 27+  D221                          ; Восстанавливаем блочный драйвер
 28+  D221                          ; b уже 0 здесь
 29+  D221 C3 6F C8                 jp      bios_setRAMDDriver
 30+  D224
 31+  D224
 32+  D224              ;----------------------------------------------------------------------------
 33+  D224              ; MXOS NC.COM
 34+  D224              ; Загрузка состояния из ДОЗУ
 35+  D224              ;
 36+  D224              ; выход:
 37+  D224              ;   флаг  z, если в ДОЗУ есть метка "отформатировано"
 38+  D224              ;   флаг nz, если в ДОЗУ нет метки "отформатировано". Дравер не восстанавливается!
 39+  D224              ;
 40+  D224              ; 2022.02.02 SpaceEngineer
 41+  D224              ;----------------------------------------------------------------------------
 42+  D224
 43+  D224              loadState:
 44+  D224                          ; Устанавливаем побайтовый драйвер
 45+  D224 06 01                    ld      b, 1
 46+  D226 CD 6F C8                 call    bios_setRAMDDriver
 47+  D229
 48+  D229                          ; Если в рам-диске по адресу 0FF00h (последний неполный сектор)
 49+  D229                          ; нет специальной метки, значит, не запускали форматирование.
 50+  D229 21 00 FF                 ld      hl, 0FF00h      ; адрес в странице
 51+  D22C AF                       xor     a               ; 0 страница
 52+  D22D CD C0 FF                 call    bios_RAMDRead
 53+  D230 79                       ld      a, c            ; считанный байт в c
 54+  D231 FE 5A                    cp      5Ah
 55+  D233 C0                       ret nz                  ; метки нет - выходим с флагом nz
 56+  D234
 57+  D234                          ; Иначе загружаем состояние
 58+  D234 11 AB DE                 ld      de, activePanel ; куда (в ОЗУ)
 59+  D237 21 01 FF                 ld      hl, 0FF01h      ; откуда (в ДОЗУ)
 60+  D23A 06 09                    ld      b,  9           ; сколько байт байт
 61+  D23C
 62+  D23C              loadStateLoop:
 63+  D23C AF                       xor     a               ; 0 страница ДОЗУ
 64+  D23D CD C0 FF                 call    bios_RAMDRead
 65+  D240 79                       ld      a, c            ; считанный байт в c
 66+  D241 12                       ld      (de), a
 67+  D242 23                       inc     hl
 68+  D243 13                       inc     de
 69+  D244 05                       dec     b
 70+  D245 C2 3C D2                 jp nz,  loadStateLoop
 71+  D248
 72+  D248                          ; Восстанавливаем блочный драйвер
 73+  D248                          ; b уже 0 здесь
 74+  D248 CD 6F C8                 call    bios_setRAMDDriver
 75+  D24B
 76+  D24B AF                       xor     a   ; для выхода с флагом z
 77+  D24C C9                       ret
 78+  D24D
 64   D24D                  INCLUDE "enter2.inc"
  1+  D24D              ;----------------------------------------------------------------------------
  2+  D24D              ; MXOS NC.COM
  3+  D24D              ; Клавиша ENTER (продолжение)
  4+  D24D              ;
  5+  D24D              ; 2013-12-18 Дизассемблировано vinxru
  6+  D24D              ;----------------------------------------------------------------------------
  7+  D24D
  8+  D24D              Enter_nextExt:
  9+  D24D E1                 pop   hl
 10+  D24E              Enter_2:
 11+  D24E 1A                 ld    a, (de)
 12+  D24F 13                 inc   de
 13+  D250 FE 0D              cp    0Dh
 14+  D252 CA AF D1           jp z, Enter_extLoop
 15+  D255 3C                 inc   a
 16+  D256 C2 4E D2           jp    nz, Enter_2
 17+  D259 C3 E5 D1           jp    Enter_stdExec
 18+  D25C
 65   D25C                  INCLUDE "main2.inc"
  1+  D25C              ;----------------------------------------------------------------------------
  2+  D25C              ; MXOS NC.COM
  3+  D25C              ; Основной цикл (продолжение)
  4+  D25C              ;
  5+  D25C              ; 2013-12-18 Дизассемблировано vinxru
  6+  D25C              ;----------------------------------------------------------------------------
  7+  D25C
  8+  D25C FE 0D        mainLoop_ctrl:    cp    0Dh
  9+  D25E CA 1E D1                 jp z, ctrlEnter
 10+  D261 C3 D8 D0                 jp    mainLoop_e
 11+  D264
 66   D264                  INCLUDE "drawWindow.inc"
  1+  D264              ;----------------------------------------------------------------------------
  2+  D264              ; MXOS NC.COM
  3+  D264              ; Рисование окошек
  4+  D264              ;
  5+  D264              ; 2013-12-18 Дизассемблировано vinxru
  6+  D264              ;----------------------------------------------------------------------------
  7+  D264
  8+  D264              drawWindowIfSel:; Получить кол-во файлов
  9+  D264 21 B0 DE             ld      hl, panelA_filesCnt
 10+  D267 CD 16 DB             call    readBytePanel
 11+  D26A
 12+  D26A                      ; Если файлов нет, выходим
 13+  D26A A7                   and     a
 14+  D26B E1                   pop     hl ; Адрес возврата
 15+  D26C CA 53 D0             jp z,   mainDriveChanged
 16+  D26F E5                   push    hl
 17+  D270
 18+  D270
 19+  D270              ; ---------------------------------------------------------------------------
 20+  D270
 21+  D270              drawWindow1:
 22+  D270                      COLOR   COLOR_DIALOG
 22+  D270             >        IF ENABLE_COLOR
 22+  D270 3E 07       >            ld a, COLOR_DIALOG
 22+  D272 32 F8 FF    >            ld (IO_COLOR), a
 22+  D275             >        ENDIF
 23+  D275
 24+  D275                      ; Рисуем окно
 25+  D275 21 92 DE             ld      hl, g_window1
 26+  D278 CD 4B DB             call    draw
 27+  D27B
 28+  D27B                      ; Рисуем прямоугольник
 29+  D27B 21 66 9F             ld      hl, 9F66h   ; x=120 y=102
 30+  D27E 06 12                ld      b, 18       ; w=144 h=9
 31+  D280 C3 95 D8             jp      inverseRect
 32+  D283
 33+  D283              ; ---------------------------------------------------------------------------
 34+  D283
 35+  D283              drawWindow2:
 36+  D283                      COLOR   COLOR_DIALOG
 36+  D283             >        IF ENABLE_COLOR
 36+  D283 3E 07       >            ld a, COLOR_DIALOG
 36+  D285 32 F8 FF    >            ld (IO_COLOR), a
 36+  D288             >        ENDIF
 37+  D288
 38+  D288                      ; Рисуем окно
 39+  D288 21 9E DE             ld      hl, g_window2
 40+  D28B CD 4B DB             call    draw
 41+  D28E
 42+  D28E                      ; Рисуем прямоугольник
 43+  D28E 21 88 9E             ld      hl, 9E88h   ; x=112 y=136
 44+  D291 06 14                ld      b, 20       ; w=160 h=9
 45+  D293 C3 95 D8             jp      inverseRect
 46+  D296
 67   D296                  INCLUDE "printStringInv.inc"
  1+  D296              ;----------------------------------------------------------------------------
  2+  D296              ; MXOS NC.COM
  3+  D296              ; Вывод инверсной строки
  4+  D296              ;
  5+  D296              ; 2013-12-18 Дизассемблировано vinxru
  6+  D296              ;----------------------------------------------------------------------------
  7+  D296
  8+  D296 3E 01        printStringInv:   ld    a, 1
  9+  D298 32 FA 8F                 ld    (bios_vars.inverse),a
 10+  D29B CD 18 C8                 call  bios_printString
 11+  D29E AF                       xor   a
 12+  D29F 32 FA 8F                 ld    (bios_vars.inverse),a
 13+  D2A2 C9                       ret
 14+  D2A3
 68   D2A3                  INCLUDE "inputForCopyMove.inc"
  1+  D2A3              ;----------------------------------------------------------------------------
  2+  D2A3              ; MXOS NC.COM
  3+  D2A3              ; Ввод строки в которой изначально содержится имя выбранного файла
  4+  D2A3              ;
  5+  D2A3              ; 2013-12-18 Дизассемблировано vinxru
  6+  D2A3              ;----------------------------------------------------------------------------
  7+  D2A3
  8+  D2A3              inputForCopyMove:
  9+  D2A3                          ; Положение курсора
 10+  D2A3 21 6E 3D                 ld      hl, 3D6Eh
 11+  D2A6 22 FC 8F                 ld      (bios_vars.cursorY), hl
 12+  D2A9
 13+  D2A9                          ; Строка для редактирования
 14+  D2A9 11 19 DF                 ld      de, nc_vars.input
 15+  D2AC
 16+  D2AC                          ; Отображается ли панель?
 17+  D2AC 21 AC DE                 ld      hl, panelA_info
 18+  D2AF 3A AB DE                 ld      a, (activePanel)
 19+  D2B2 A7                       and     a
 20+  D2B3 C2 B7 D2                 jp nz,      loc_D255
 21+  D2B6 23                       inc     hl
 22+  D2B7 7E           loc_D255:   ld      a, (hl)
 23+  D2B8
 24+  D2B8                          ; Если не отображается, то накопитель в стркоу не помещать
 25+  D2B8 A7                       and     a
 26+  D2B9 C2 C7 D2                 jp nz,      loc_D265
 27+  D2BC
 28+  D2BC                          ; Записываем букву накопителя
 29+  D2BC 23                       inc     hl
 30+  D2BD 23                       inc     hl
 31+  D2BE 7E                       ld      a, (hl)
 32+  D2BF C6 41                    add     a, 'A'
 33+  D2C1 12                       ld      (de),a
 34+  D2C2 13                       inc     de
 35+  D2C3
 36+  D2C3                          ; Записываем ':'
 37+  D2C3 3E 3A                    ld      a, ':'
 38+  D2C5 12                       ld      (de),a
 39+  D2C6 13                       inc     de
 40+  D2C7
 41+  D2C7              loc_D265:   ; Записать выбранный файл
 42+  D2C7 CD A7 D8                 call    getSelectedFile
 43+  D2CA CD F0 DB                 call    compactName
 44+  D2CD
 45+  D2CD                          ; Записать терминатор
 46+  D2CD 1B                       dec     de  ; compactName добавляет в конец строки ' ', 0Dh
 47+  D2CE 1B                       dec     de
 48+  D2CF AF                       xor     a
 49+  D2D0 12                       ld      (de),a
 50+  D2D1
 51+  D2D1                          ; Перейти к редакированию
 52+  D2D1 C3 2D DC                 jp      input
 53+  D2D4
 69   D2D4                  INCLUDE "printSelDrive.inc"
  1+  D2D4              ;----------------------------------------------------------------------------
  2+  D2D4              ; MXOS NC.COM
  3+  D2D4              ; Вывод текущего накопителя
  4+  D2D4              ;
  5+  D2D4              ; 2013-12-18 Дизассемблировано vinxru
  6+  D2D4              ;----------------------------------------------------------------------------
  7+  D2D4
  8+  D2D4              ; Печать буквы активного диска
  9+  D2D4
 10+  D2D4 21 AE DE     printSelDrive:    ld    hl, panelA_drive
 11+  D2D7 CD 16 DB                 call  readBytePanel
 12+  D2DA C3 FA DA                 jp    printDrive
 13+  D2DD
 70   D2DD                  INCLUDE "f7.inc"
  1+  D2DD              ;----------------------------------------------------------------------------
  2+  D2DD              ; MXOS NC.COM
  3+  D2DD              ; Клавиша F7. Загрузка файла с ленты на накопитель
  4+  D2DD              ;
  5+  D2DD              ; 2013-12-18 Дизассемблировано vinxru
  6+  D2DD              ;----------------------------------------------------------------------------
  7+  D2DD
  8+  D2DD              ; Сохранение sp   и установка обр   ошибок.
  9+  D2DD
 10+  D2DD              prepareTapeLoad:
 11+  D2DD 21 00 00                 ld          hl, 0
 12+  D2E0 39                       add         hl, sp
 13+  D2E1 23                       inc         hl
 14+  D2E2 23                       inc         hl
 15+  D2E3 22 CC DE                 ld          (nc_vars.savedSP), hl
 16+  D2E6
 17+  D2E6 21 E6 D3                 ld          hl, tapeErrorHandler
 18+  D2E9 22 E1 8F                 ld          (bios_vars.tapeError), hl
 19+  D2EC
 20+  D2EC 3E 0F                    ld          a, 0Fh
 21+  D2EE 32 E2 FF                 ld          (IO_KEYB_C),a
 22+  D2F1 3E FE                    ld          a, 0FEh
 23+  D2F3 32 E0 FF                 ld          (IO_KEYB_A),a
 24+  D2F6 C9                       ret
 25+  D2F7
 26+  D2F7              ; ---------------------------------------------------------------------------
 27+  D2F7
 28+  D2F7              F7:         ; Рисуем окно
 29+  D2F7 CD 70 D2                 call        drawWindow1
 30+  D2FA
 31+  D2FA                          ; Выводим "LOADING FROM TAPE TO A:"
 32+  D2FA                          CENTER_LINE 23, 5Eh
 32+  D2FA 21 5E 3E    >        ld  hl, ((60h - 23 * 3 / 2) << 8) + 5Eh
 32+  D2FD 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 33+  D300 21 20 DE                 ld          hl, aLoadingFromTapeTo
 34+  D303 CD 18 C8                 call        bios_printString
 35+  D306 CD D4 D2                 call        printSelDrive
 36+  D309
 37+  D309                          ; Сохранение sp и установка обработчика ошибок
 38+  D309 CD DD D2                 call        prepareTapeLoad
 39+  D30C
 40+  D30C              loc_D2AA:
 41+  D30C                          ; Ждем пилот и D9 D9 D9
 42+  D30C 3E FF                    ld          a, 0FFh
 43+  D30E 0E 03                    ld          c, 3
 44+  D310 C3 15 D3                 jp          loc_D2B3
 45+  D313              loc_D2B1:
 46+  D313 3E 08                    ld          a, 8
 47+  D315              loc_D2B3:
 48+  D315 CD 06 C8                 call        bios_tapeRead
 49+  D318 FE D9                    cp          0D9h
 50+  D31A C2 0C D3                 jp nz,      loc_D2AA
 51+  D31D 0D                       dec c
 52+  D31E C2 13 D3                 jp nz,      loc_D2B1
 53+  D321
 54+  D321                          ; Читаем имя
 55+  D321 21 39 DF                 ld          hl, nc_vars.tempFileDescr
 56+  D324 54                       ld          d, h
 57+  D325 5D                       ld          e, l
 58+  D326 0E 0B                    ld          c, DIR_NAME_LENGTH + 3 ; старый формат файла 9 символов, новый - DIR_NAME_LENGTH + 3 символов
 59+  D328              loc_D2C6:
 60+  D328 3E 08                    ld          a, 8
 61+  D32A CD 06 C8                 call        bios_tapeRead
 62+  D32D FE 20                    cp          ' '
 63+  D32F DA DC D3                 jp c,       tapeReadAppendName
 64+  D332 77                       ld          (hl), a
 65+  D333 23                       inc         hl
 66+  D334 0D                       dec         c
 67+  D335 C2 28 D3                 jp nz,      loc_D2C6
 68+  D338
 69+  D338              loc_D2D6:
 70+  D338 36 00                    ld         (hl), 0 ; обнуляем байт атрибута в дескрипторе файла
 71+  D33A
 72+  D33A CD A0 D5                 call        printInvFile
 73+  D33D
 74+  D33D                          ; Пропускаем пилот и читаем начальный адрес загрузки
 75+  D33D 3E FF                    ld          a, 0FFh
 76+  D33F CD D1 D3                 call        tapeReadWord2
 77+  D342 22 CE DE                 ld          (nc_vars.tapeLoadAddr), hl
 78+  D345
 79+  D345                          ; Читаем конечный адрес загрузки
 80+  D345 EB                       ex          de, hl
 81+  D346 CD CF D3                 call        tapeReadWord
 82+  D349
 83+  D349                          ; Считаем размер файла (hl = hl - de)
 84+  D349 7D                       ld          a, l
 85+  D34A 93                       sub         e
 86+  D34B 6F                       ld          l, a
 87+  D34C 7C                       ld          a, h
 88+  D34D 9A                       sbc         d
 89+  D34E 67                       ld          h, a
 90+  D34F 22 55 DF                 ld          (nc_vars.tempFileDescr.size), hl
 91+  D352
 92+  D352                          ; Читаем данные по адресу 0000
 93+  D352 23                       inc         hl
 94+  D353 EB                       ex          de, hl
 95+  D354 21 00 00                 ld          hl, 0
 96+  D357 22 4B DF                 ld          (nc_vars.tempFileDescr.loadAddress), hl
 97+  D35A 3E 08        loc_D2F8:   ld          a, 8
 98+  D35C CD 06 C8                 call        bios_tapeRead
 99+  D35F 77                       ld          (hl), a
100+  D360 23                       inc         hl
101+  D361 1B                       dec         de
102+  D362 7A                       ld          a, d
103+  D363 B3                       or          e
104+  D364 C2 5A D3                 jp nz,      loc_D2F8
105+  D367
106+  D367                          ; Чиаем CRC
107+  D367 CD CF D3                 call        tapeReadWord
108+  D36A 22 CA DE                 ld          (nc_vars.tapeSaveCRC), hl
109+  D36D
110+  D36D                          ; Считаем CRC
111+  D36D 2A 55 DF                 ld          hl, (nc_vars.tempFileDescr.size)
112+  D370 EB                       ex          de, hl
113+  D371 21 00 00                 ld          hl, 0
114+  D374 19                       add         hl, de
115+  D375 EB                       ex          de, hl
116+  D376 21 00 00                 ld          hl, 0
117+  D379 CD 2A C8                 call        bios_calcCS
118+  D37C 2A CA DE                 ld          hl, (nc_vars.tapeSaveCRC)
119+  D37F
120+  D37F                          ; Если расчетный CRC не равен реальному, выходим
121+  D37F 78                       ld          a, b
122+  D380 BC                       cp          h
123+  D381 C2 9F D3                 jp nz,      F7_crcError
124+  D384 79                       ld          a, c
125+  D385 BD                       cp          l
126+  D386 C2 9F D3                 jp nz,      F7_crcError
127+  D389
128+  D389                          ; Соханяем файл на текущий диск
129+  D389 CD 95 D3                 call        F7_saveFile
130+  D38C
131+  D38C                          ; Перерисовываем экран и продолжаем загрузку
132+  D38C CD CA D8                 call        loadAndPrintA
133+  D38F CD BB D8                 call        loadAndPrintB
134+  D392 C3 F7 D2                 jp          F7
135+  D395
136+  D395              ; ---------------------------------------------------------------------------
137+  D395
138+  D395              F7_saveFile:
139+  D395 2A CE DE                 ld          hl, (nc_vars.tapeLoadAddr)
140+  D398 E5                       push        hl
141+  D399 21 39 DF                 ld          hl, nc_vars.tempFileDescr
142+  D39C C3 56 D5                 jp          saveFileInt
143+  D39F
144+  D39F              ; ---------------------------------------------------------------------------
145+  D39F
146+  D39F              F7_crcError:
147+  D39F CD 83 D2                 call        drawWindow2
148+  D3A2
149+  D3A2                          ; Вывод "ERROR LOADING FROM TAPE"
150+  D3A2                          COLOR       COLOR_DIALOG_ERR
150+  D3A2             >        IF ENABLE_COLOR
150+  D3A2 3E 47       >            ld a, COLOR_DIALOG_ERR
150+  D3A4 32 F8 FF    >            ld (IO_COLOR), a
150+  D3A7             >        ENDIF
151+  D3A7                          CENTER_LINE 23, 80h
151+  D3A7 21 80 3E    >        ld  hl, ((60h - 23 * 3 / 2) << 8) + 80h
151+  D3AA 22 FC 8F    >        ld  (bios_vars.cursorY), hl
152+  D3AD 21 36 DE                 ld          hl, aErrorLoadingTa
153+  D3B0 CD 18 C8                 call        bios_printString
154+  D3B3
155+  D3B3                          ; Вывод строки из nc_vars.input
156+  D3B3                          COLOR       COLOR_DIALOG
156+  D3B3             >        IF ENABLE_COLOR
156+  D3B3 3E 07       >            ld a, COLOR_DIALOG
156+  D3B5 32 F8 FF    >            ld (IO_COLOR), a
156+  D3B8             >        ENDIF
157+  D3B8 21 90 50                 ld          hl, 5090h
158+  D3BB 22 FC 8F                 ld          (bios_vars.cursorY), hl
159+  D3BE 21 19 DF                 ld          hl, nc_vars.input
160+  D3C1 CD 96 D2                 call        printStringInv
161+  D3C4
162+  D3C4              loc_D358:   ; Ждем нажатия ESC
163+  D3C4 CD 1B C8                 call        bios_keyScan
164+  D3C7 FE 1B                    cp          1Bh
165+  D3C9 C2 C4 D3                 jp nz,      loc_D358
166+  D3CC
167+  D3CC C3 3D D0                 jp          mainReload
168+  D3CF
169+  D3CF              ;----------------------------------------------------------------------------
170+  D3CF              ; Чтение слова с ленты
171+  D3CF              ;----------------------------------------------------------------------------
172+  D3CF
173+  D3CF              tapeReadWord:
174+  D3CF 3E 08                    ld          a, 8
175+  D3D1              tapeReadWord2:
176+  D3D1 CD 06 C8                 call        bios_tapeRead
177+  D3D4 6F                       ld          l, a
178+  D3D5 3E 08                    ld          a, 8
179+  D3D7 CD 06 C8                 call        bios_tapeRead
180+  D3DA 67                       ld          h, a
181+  D3DB C9                       ret
182+  D3DC
183+  D3DC
184+  D3DC              ; ---------------------------------------------------------------------------
185+  D3DC
186+  D3DC              ; Если имя файла на ленте было короче, чем DIR_NAME_LENGTH+3, дополняем его пробелами
187+  D3DC              tapeReadAppendName:
188+  D3DC 36 20                    ld          (hl), ' '
189+  D3DE 23                       inc         hl
190+  D3DF 0D                       dec         c
191+  D3E0 C2 DC D3                 jp nz,      tapeReadAppendName
192+  D3E3 C3 38 D3                 jp          loc_D2D6
193+  D3E6
 71   D3E6                  INCLUDE "tapeErrorHandler.inc"
  1+  D3E6              ;----------------------------------------------------------------------------
  2+  D3E6              ; MXOS NC.COM
  3+  D3E6              ; Вызывается при ошибке загрузки с ленты
  4+  D3E6              ;
  5+  D3E6              ; 2013-12-18 Дизассемблировано vinxru
  6+  D3E6              ;----------------------------------------------------------------------------
  7+  D3E6
  8+  D3E6              tapeErrorHandler:
  9+  D3E6                          ; Восстановление обработчика
 10+  D3E6 21 00 C8                 ld    hl, 0C800h
 11+  D3E9 22 E1 8F                 ld    (bios_vars.tapeError), hl
 12+  D3EC
 13+  D3EC                          ; Восстановление стека
 14+  D3EC 2A CC DE                 ld    hl, (nc_vars.savedSP)
 15+  D3EF F9                       ld    sp, hl
 16+  D3F0
 17+  D3F0                          ; Перезагрузка файлов и продолжение работы
 18+  D3F0 C3 3D D0                 jp    mainReload
 19+  D3F3
 72   D3F3                  INCLUDE "f9.inc"
  1+  D3F3              ;----------------------------------------------------------------------------
  2+  D3F3              ; MXOS NC.COM
  3+  D3F3              ; Клавиша F9 - Сохранение файла на магнитофон
  4+  D3F3              ;
  5+  D3F3              ; 2013-12-18 Дизассемблировано vinxru
  6+  D3F3              ;----------------------------------------------------------------------------
  7+  D3F3
  8+  D3F3              f9:         ; Рисуем окно
  9+  D3F3 CD 64 D2                 call    drawWindowIfSel
 10+  D3F6
 11+  D3F6                          ; Выводим "SAVING FROM A: TO TAPE"
 12+  D3F6                          CENTER_LINE 20, 5Eh
 12+  D3F6 21 5E 42    >        ld  hl, ((60h - 20 * 3 / 2) << 8) + 5Eh
 12+  D3F9 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 13+  D3FC 21 F2 DD                 ld      hl, aSaveFromToTape
 14+  D3FF CD 18 C8                 call    bios_printString
 15+  D402 CD D4 D2                 call    printSelDrive
 16+  D405
 17+  D405                          ; ?
 18+  D405 CD 9C D5                 call    printInvSelFile
 19+  D408
 20+  D408                          ; Ждем нажатия Enter или ESC.
 21+  D408 CD 1B C8     loc_D39C:   call    bios_keyScan
 22+  D40B FE 1B                    cp      1Bh
 23+  D40D CA 3D D0                 jp z,   mainReload
 24+  D410 FE 0D                    cp      0Dh
 25+  D412 C2 08 D4                 jp nz,  loc_D39C
 26+  D415
 27+  D415                          ; Сохранение sp   и установка обр   ошибок.
 28+  D415 CD DD D2                 call    prepareTapeLoad
 29+  D418
 30+  D418 CD 64 D2                 call    drawWindowIfSel
 31+  D41B
 32+  D41B                          ; Выводим "SAVING TO TAPE"
 33+  D41B                          CENTER_LINE 14, 5Eh
 33+  D41B 21 5E 4B    >        ld  hl, ((60h - 14 * 3 / 2) << 8) + 5Eh
 33+  D41E 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 34+  D421 21 11 DE                 ld      hl, aSavingToTape
 35+  D424 CD 18 C8                 call    bios_printString
 36+  D427
 37+  D427                          ; Загрузка файла на адрес 0
 38+  D427 CD 39 D5                 call    loadSelFileAt0  ; на выходе de - оригинальный адрес загрузки
 39+  D42A
 40+  D42A                          ; Получение адреса загрузки и размера файла
 41+  D42A D5                       push    de  ; оригинальный адрес загрузки
 42+  D42B E5                       push    hl  ; начало дескриптора
 43+  D42C 11 1C 00                 ld      de, FILE_DESCRIPTOR.size
 44+  D42F 19                       add     hl, de
 45+  D430 5E                       ld      e, (hl)
 46+  D431 23                       inc     hl
 47+  D432 56                       ld      d, (hl) ; de = размер-1
 48+  D433 E1                       pop     hl  ; начало дескриптора
 49+  D434 D5                       push    de  ; размер
 50+  D435 E5                       push    hl  ; начало дескриптора
 51+  D436 21 00 00                 ld      hl, 0   ; файл загружен на адрес 0
 52+  D439 19                       add     hl, de  ; hl = размер-1 + 0
 53+  D43A EB                       ex      de, hl  ; de = размер-1 + 0
 54+  D43B 21 00 00                 ld      hl, 0
 55+  D43E
 56+  D43E                          ; Расчет контрольной суммы от hl до de
 57+  D43E CD 2A C8                 call    bios_calcCS ; bc = crc
 58+  D441 60                       ld      h, b
 59+  D442 69                       ld      l, c
 60+  D443 22 CA DE                 ld      (nc_vars.tapeSaveCRC), hl
 61+  D446
 62+  D446                          ; Пилот-тон
 63+  D446 CD 8E D4                 call    tapeWritePilot  ; 200h нулей, затем E6h
 64+  D449
 65+  D449                          ; Начало файла
 66+  D449 3E D9                    ld      a, 0D9h
 67+  D44B CD 0C C8                 call    bios_tapeWrite  ; три раза 0D9h
 68+  D44E CD 0C C8                 call    bios_tapeWrite
 69+  D451 CD 0C C8                 call    bios_tapeWrite
 70+  D454
 71+  D454                          ; имя файла
 72+  D454 E1                       pop     hl ; начало дескриптра
 73+  D455 01 0A 00                 ld      bc, DIR_NAME_LENGTH+2 ; длина (запишется +1); старый формат - 9 символов, новый - DIR_NAME_LENGTH+3
 74+  D458 CD 7E D4                 call    tapeWriteBlock
 75+  D45B
 76+  D45B                          ; Пилот-тон
 77+  D45B CD 8E D4                 call    tapeWritePilot  ; 200h нулей, затем E6h
 78+  D45E
 79+  D45E C1                       pop     bc ; размер
 80+  D45F E1                       pop     hl ; оригинальный адрес загрузки
 81+  D460 CD 76 D4                 call    tapeWriteWord
 82+  D463
 83+  D463 09                       add     hl, bc ; конечный адрес загрузки
 84+  D464 CD 76 D4                 call    tapeWriteWord
 85+  D467
 86+  D467                          ; Запись файла
 87+  D467 21 00 00                 ld      hl, 0
 88+  D46A CD 7E D4                 call    tapeWriteBlock    ; hl = адрес, bc = размер-1
 89+  D46D
 90+  D46D                          ; Запись контрольной суммы
 91+  D46D 2A CA DE                 ld      hl, (nc_vars.tapeSaveCRC)
 92+  D470 CD 76 D4                 call    tapeWriteWord
 93+  D473
 94+  D473 C3 3D D0                 jp      mainReload
 95+  D476
 73   D476                  INCLUDE "tapeWrite.inc"
  1+  D476              ;----------------------------------------------------------------------------
  2+  D476              ; MXOS NC.COM
  3+  D476              ; Запись слова на ленту
  4+  D476              ;
  5+  D476              ; 2013-12-18 Дизассемблировано vinxru
  6+  D476              ;----------------------------------------------------------------------------
  7+  D476
  8+  D476              tapeWriteWord:
  9+  D476 7D                       ld    a, l
 10+  D477 CD 0C C8                 call  bios_tapeWrite
 11+  D47A 7C                       ld    a, h
 12+  D47B C3 0C C8                 jp    bios_tapeWrite
 13+  D47E
 14+  D47E              ;----------------------------------------------------------------------------
 15+  D47E              ; Запись блока данных по адресу hl длиной bc+1 на ленту
 16+  D47E              ;----------------------------------------------------------------------------
 17+  D47E
 18+  D47E              tapeWriteBlock:
 19+  D47E 03                       inc    bc
 20+  D47F CD A3 D4     loc_D410:   call   checkBreak
 21+  D482 7E                       ld     a, (hl)
 22+  D483 CD 0C C8                 call   bios_tapeWrite
 23+  D486 23                       inc    hl
 24+  D487 0B                       dec    bc
 25+  D488 78                       ld     a, b
 26+  D489 B1                       or     c
 27+  D48A C2 7F D4                 jp nz, loc_D410
 28+  D48D C9                       ret
 29+  D48E
 30+  D48E              ;----------------------------------------------------------------------------
 31+  D48E              ; Запись пилот тона на ленту
 32+  D48E              ; 200h нулей, затем E6h
 33+  D48E              ;----------------------------------------------------------------------------
 34+  D48E
 35+  D48E              tapeWritePilot:
 36+  D48E 01 00 02                 ld     bc, 200h
 37+  D491 CD A3 D4     loc_D422:   call   checkBreak
 38+  D494 AF                       xor    a
 39+  D495 CD 0C C8                 call   bios_tapeWrite
 40+  D498 0B                       dec    bc
 41+  D499 78                       ld     a, b
 42+  D49A B1                       or     c
 43+  D49B C2 91 D4                 jp nz, loc_D422
 44+  D49E
 45+  D49E 3E E6                    ld    a, 0E6h
 46+  D4A0 C3 0C C8                 jp    bios_tapeWrite
 47+  D4A3
 48+  D4A3              ; ---------------------------------------------------------------------------
 49+  D4A3
 50+  D4A3 3A E1 FF     checkBreak: ld     a, (IO_KEYB_B)
 51+  D4A6 A7                       and    a
 52+  D4A7 F2 E6 D3                 jp p,  tapeErrorHandler
 53+  D4AA C9                       ret
 54+  D4AB
 74   D4AB                  INCLUDE "f6.inc"
  1+  D4AB              ;----------------------------------------------------------------------------
  2+  D4AB              ; MXOS NC.COM
  3+  D4AB              ; Клавиша F6 - переименование
  4+  D4AB              ;
  5+  D4AB              ; 2013-12-18 Дизассемблировано vinxru
  6+  D4AB              ;----------------------------------------------------------------------------
  7+  D4AB
  8+  D4AB              F6:         ; Рисуем окно
  9+  D4AB CD 64 D2                 call        drawWindowIfSel
 10+  D4AE
 11+  D4AE                          ; Выводим "REMOVE FROM A: TO"
 12+  D4AE                          CENTER_LINE 23, 5Eh
 12+  D4AE 21 5E 3E    >        ld  hl, ((60h - 23 * 3 / 2) << 8) + 5Eh
 12+  D4B1 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 13+  D4B4 21 6C DD                 ld          hl, aRemoveFromTo
 14+  D4B7 CD 18 C8                 call        bios_printString
 15+  D4BA CD D4 D2                 call        printSelDrive
 16+  D4BD
 17+  D4BD CD A3 D2                 call        inputForCopyMove
 18+  D4C0 FE 1B                    cp          1Bh
 19+  D4C2 CA 3D D0                 jp z,       mainReload
 20+  D4C5
 21+  D4C5 21 19 DF                 ld          hl, nc_vars.input
 22+  D4C8 11 39 DF                 ld          de, nc_vars.tempFileDescr
 23+  D4CB CD 5A C8                 call        bios_fileNamePrepare
 24+  D4CE
 25+  D4CE 1E 02                    ld          e, 2
 26+  D4D0 CD 42 C8                 call        bios_fileGetSetDrive
 27+  D4D3 4F                       ld          c, a
 28+  D4D4 21 AE DE                 ld          hl, panelA_drive
 29+  D4D7 CD 16 DB                 call        readBytePanel
 30+  D4DA B9                       cp          c
 31+  D4DB C2 EA D4                 jp nz,      loc_D47B
 32+  D4DE CD A7 D8                 call        getSelectedFile
 33+  D4E1 11 39 DF                 ld          de, nc_vars.tempFileDescr
 34+  D4E4 CD 4E C8                 call        bios_fileRename
 35+  D4E7 C3 3D D0                 jp          mainReload
 36+  D4EA              ; ---------------------------------------------------------------------------
 37+  D4EA
 38+  D4EA 1E 01        loc_D47B:   ld          e, 1
 39+  D4EC CD 42 C8                 call        bios_fileGetSetDrive
 40+  D4EF CD A7 D8                 call        getSelectedFile
 41+  D4F2 11 39 DF                 ld          de, nc_vars.tempFileDescr
 42+  D4F5
 43+  D4F5                          ; копируем имя файла
 44+  D4F5 0E 0B                    ld          c, DIR_NAME_LENGTH + 3
 45+  D4F7              loc_D488:
 46+  D4F7 7E                       ld          a, (hl)
 47+  D4F8 12                       ld          (de),a
 48+  D4F9 23                       inc         hl
 49+  D4FA 13                       inc         de
 50+  D4FB 0D                       dec         c
 51+  D4FC C2 F7 D4                 jp nz,      loc_D488
 52+  D4FF
 53+  D4FF CD 4A D5                 call        copyFileInt
 54+  D502 21 AE DE                 ld          hl, panelA_drive
 55+  D505 CD 16 DB                 call        readBytePanel
 56+  D508 1E 01                    ld          e, 1
 57+  D50A CD 42 C8                 call        bios_fileGetSetDrive
 58+  D50D 21 39 DF                 ld          hl, nc_vars.tempFileDescr
 59+  D510 CD 4B C8                 call        bios_fileDelete
 60+  D513 C3 3D D0                 jp          mainReload
 61+  D516
 75   D516                  INCLUDE "f5.inc"
  1+  D516              ;----------------------------------------------------------------------------
  2+  D516              ; MXOS NC.COM
  3+  D516              ; Клавиша F5 - копирование
  4+  D516              ;
  5+  D516              ; 2013-12-18 Дизассемблировано vinxru
  6+  D516              ;----------------------------------------------------------------------------
  7+  D516
  8+  D516              F5:     ; Рисуем окно
  9+  D516 CD 64 D2             call    drawWindowIfSel
 10+  D519
 11+  D519                      ; Выводм "COPYING FROM A: TO"
 12+  D519                      ; центр экрана это x = 60h
 13+  D519                      ; половина ширина строки w = 15*3/2 = 22
 14+  D519                      ; координата строки x = 60h-22 = 4Ah
 15+  D519                      CENTER_LINE 22, 5Eh
 15+  D519 21 5E 3F    >        ld  hl, ((60h - 22 * 3 / 2) << 8) + 5Eh
 15+  D51C 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 16+  D51F 22 FC 8F             ld      (bios_vars.cursorY), hl
 17+  D522 21 44 DD             ld      hl, aCopyFromTo
 18+  D525 CD 18 C8             call    bios_printString
 19+  D528 CD D4 D2             call    printSelDrive
 20+  D52B
 21+  D52B CD A3 D2             call    inputForCopyMove
 22+  D52E FE 1B                cp      1Bh
 23+  D530 CA 3D D0             jp z,   mainReload
 24+  D533
 25+  D533 CD 4A D5             call    copyFileInt
 26+  D536 C3 3D D0             jp      mainReload
 27+  D539
 76   D539                  INCLUDE "loadSelFileAt0.inc"
  1+  D539              ;----------------------------------------------------------------------------
  2+  D539              ; MXOS NC.COM
  3+  D539              ; Загрузить выбранный файл по адресу 0
  4+  D539              ;
  5+  D539              ; выход:
  6+  D539              ;   de = оригинальный адрес загруки
  7+  D539              ;
  8+  D539              ; 2013-12-18 Дизассемблировано vinxru
  9+  D539              ;----------------------------------------------------------------------------
 10+  D539
 11+  D539              loadSelFileAt0:
 12+  D539 CD A7 D8                 call  getSelectedFile
 13+  D53C
 14+  D53C                          ; Получаем адрес загрузки файла
 15+  D53C 0E 02                    ld    c, 2
 16+  D53E CD 54 C8                 call  bios_fileGetSetAddr
 17+  D541 D5                       push  de
 18+  D542
 19+  D542                          ; Загружаем файл в начало памяти
 20+  D542 11 00 00                 ld    de, 0
 21+  D545 CD 66 C8                 call  bios_fileLoad2
 22+  D548
 23+  D548 D1                       pop   de
 24+  D549 C9                       ret
 25+  D54A
 77   D54A                  INCLUDE "copyFileInt.inc"
  1+  D54A              ;----------------------------------------------------------------------------
  2+  D54A              ; MXOS NC.COM
  3+  D54A              ; Общая функция для копирования и переноса файла
  4+  D54A              ;
  5+  D54A              ; 2013-12-18 Дизассемблировано vinxru
  6+  D54A              ;----------------------------------------------------------------------------
  7+  D54A
  8+  D54A              copyFileInt:
  9+  D54A                          ; Загрузка выбранного файла в память
 10+  D54A CD 39 D5                 call  loadSelFileAt0
 11+  D54D D5                       push  de    ; Тут реальный адрес
 12+  D54E
 13+  D54E                          ; Подготавливаем имя
 14+  D54E EB                       ex    de, hl
 15+  D54F 21 19 DF                 ld    hl, nc_vars.input
 16+  D552 CD 5A C8                 call  bios_fileNamePrepare
 17+  D555 EB                       ex    de, hl
 18+  D556
 19+  D556              saveFileInt:
 20+  D556                          ; hl = адрес дескриптора файла
 21+  D556 E5                       push  hl
 22+  D557
 23+  D557                          ; Устанавливаем адрес сохраняемого файла
 24+  D557 11 12 00                 ld    de, FILE_DESCRIPTOR.loadAddress   ; смещение поля адреса относительно начала дескриптора
 25+  D55A 19                       add   hl, de
 26+  D55B 11 00 00                 ld    de, 0     ; записываем 0 в поле loadAddress дескриптора
 27+  D55E 73                       ld    (hl), e
 28+  D55F 23                       inc   hl
 29+  D560 72                       ld    (hl), d
 30+  D561
 31+  D561                          ; Сохраняем файл
 32+  D561 E1                       pop   hl
 33+  D562 CD 45 C8                 call  bios_fileCreate
 34+  D565
 35+  D565                          ; Изменяем адрес загрузки файла
 36+  D565 D1                       pop   de
 37+  D566 0E 01                    ld    c, 1
 38+  D568 CD 54 C8                 call  bios_fileGetSetAddr
 39+  D56B
 40+  D56B                          ; Выходим, если нет ошибки
 41+  D56B D0                       ret nc
 42+  D56C
 43+  D56C                          ; Рисуем окно
 44+  D56C CD 83 D2                 call  drawWindow2
 45+  D56F
 46+  D56F                          ; Вывод "CAN'T CREATE FILE"
 47+  D56F                          COLOR   COLOR_DIALOG_ERR
 47+  D56F             >        IF ENABLE_COLOR
 47+  D56F 3E 47       >            ld a, COLOR_DIALOG_ERR
 47+  D571 32 F8 FF    >            ld (IO_COLOR), a
 47+  D574             >        ENDIF
 48+  D574                          CENTER_LINE 18, 80h
 48+  D574 21 80 45    >        ld  hl, ((60h - 18 * 3 / 2) << 8) + 80h
 48+  D577 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 49+  D57A 21 59 DD                 ld    hl, aCantCreateFile
 50+  D57D CD 18 C8                 call  bios_printString
 51+  D580
 52+  D580                          ; Вывод имени
 53+  D580                          COLOR COLOR_DIALOG
 53+  D580             >        IF ENABLE_COLOR
 53+  D580 3E 07       >            ld a, COLOR_DIALOG
 53+  D582 32 F8 FF    >            ld (IO_COLOR), a
 53+  D585             >        ENDIF
 54+  D585 21 90 50                 ld    hl, 5090h
 55+  D588 22 FC 8F                 ld    (bios_vars.cursorY), hl
 56+  D58B 21 19 DF                 ld    hl, nc_vars.input
 57+  D58E CD 96 D2                 call  printStringInv
 58+  D591
 59+  D591              anyKey:           ; Ждем нажатия любой клавиши
 60+  D591 CD 1B C8                 call  bios_keyScan
 61+  D594 3C                       inc   a
 62+  D595 CA 91 D5                 jp z, anyKey
 63+  D598
 64+  D598                          ; Выход
 65+  D598 E1                       pop   hl
 66+  D599 C3 3D D0                 jp    mainReload
 67+  D59C
 78   D59C                  INCLUDE "printInvSelFile.inc"
  1+  D59C              ;----------------------------------------------------------------------------
  2+  D59C              ; MXOS NC.COM
  3+  D59C              ; Инверсный вывод имени выбранного файла
  4+  D59C              ;
  5+  D59C              ; 2013-12-18 Дизассемблировано vinxru
  6+  D59C              ;----------------------------------------------------------------------------
  7+  D59C
  8+  D59C              printInvSelFile:
  9+  D59C CD A7 D8                 call  getSelectedFile
 10+  D59F EB                       ex    de, hl
 11+  D5A0 21 6E 50     printInvFile:     ld    hl, 506Eh
 12+  D5A3 22 FC 8F                 ld    (bios_vars.cursorY), hl
 13+  D5A6 EB                       ex    de, hl
 14+  D5A7 11 19 DF                 ld    de, nc_vars.input
 15+  D5AA CD F0 DB                 call  compactName
 16+  D5AD 21 19 DF                 ld    hl, nc_vars.input
 17+  D5B0 C3 96 D2                 jp    printStringInv
 18+  D5B3
 79   D5B3                  INCLUDE "f8.inc"
  1+  D5B3              ;----------------------------------------------------------------------------
  2+  D5B3              ; MXOS NC.COM
  3+  D5B3              ; Клавиша F8 - удаление файла
  4+  D5B3              ;
  5+  D5B3              ; 2013-12-18 Дизассемблировано vinxru
  6+  D5B3              ;----------------------------------------------------------------------------
  7+  D5B3
  8+  D5B3              F8:         ; Рисуем окно
  9+  D5B3 CD 64 D2                 call    drawWindowIfSel
 10+  D5B6
 11+  D5B6                          ; Выводим "DELETE FROM A:"
 12+  D5B6                          CENTER_LINE 14, 5Eh
 12+  D5B6 21 5E 4B    >        ld  hl, ((60h - 14 * 3 / 2) << 8) + 5Eh
 12+  D5B9 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 13+  D5BC 21 33 DD                 ld          hl, aDeleteFrom
 14+  D5BF CD 18 C8                 call        bios_printString
 15+  D5C2 CD D4 D2                 call        printSelDrive
 16+  D5C5
 17+  D5C5 CD 9C D5                 call        printInvSelFile
 18+  D5C8
 19+  D5C8              loc_D54C:   ; Ждем нажатия Enter или ESC
 20+  D5C8 CD 1B C8                 call        bios_keyScan
 21+  D5CB FE 1B                    cp          1Bh
 22+  D5CD CA 3D D0                 jp z,       mainReload
 23+  D5D0 FE 0D                    cp          0Dh
 24+  D5D2 C2 C8 D5                 jp nz,      loc_D54C
 25+  D5D5
 26+  D5D5                          ; Если файл только для чтения
 27+  D5D5 CD A7 D8                 call        getSelectedFile
 28+  D5D8 11 0B 00                 ld          de, FILE_DESCRIPTOR.attrib
 29+  D5DB 19                       add         hl, de
 30+  D5DC 7E                       ld          a, (hl)
 31+  D5DD E6 01                    and         1
 32+  D5DF CA 1B D6                 jp z,       loc_D595
 33+  D5E2
 34+  D5E2 CD 83 D2                 call        drawWindow2
 35+  D5E5
 36+  D5E5                          ; Выводим текст "FILE IS READ-ONLY"
 37+  D5E5                          COLOR       COLOR_DIALOG_ERR
 37+  D5E5             >        IF ENABLE_COLOR
 37+  D5E5 3E 47       >            ld a, COLOR_DIALOG_ERR
 37+  D5E7 32 F8 FF    >            ld (IO_COLOR), a
 37+  D5EA             >        ENDIF
 38+  D5EA                          CENTER_LINE 18, 80h
 38+  D5EA 21 80 45    >        ld  hl, ((60h - 18 * 3 / 2) << 8) + 80h
 38+  D5ED 22 FC 8F    >        ld  (bios_vars.cursorY), hl
 39+  D5F0 21 F6 DC                 ld          hl, aFileIsReanOnly
 40+  D5F3 CD 18 C8                 call        bios_printString
 41+  D5F6
 42+  D5F6                          ; Выводим nc_vars.input
 43+  D5F6                          COLOR       COLOR_DIALOG
 43+  D5F6             >        IF ENABLE_COLOR
 43+  D5F6 3E 07       >            ld a, COLOR_DIALOG
 43+  D5F8 32 F8 FF    >            ld (IO_COLOR), a
 43+  D5FB             >        ENDIF
 44+  D5FB 21 90 50                 ld          hl, 5090h
 45+  D5FE 22 FC 8F                 ld          (bios_vars.cursorY), hl
 46+  D601 21 19 DF                 ld          hl, nc_vars.input
 47+  D604 CD 96 D2                 call        printStringInv
 48+  D607
 49+  D607              loc_D581:   ; Цикл ожидания нажатия любой клавиши
 50+  D607 CD 1B C8                 call        bios_keyScan
 51+  D60A 3C                       inc         a
 52+  D60B C2 07 D6                 jp nz,      loc_D581
 53+  D60E
 54+  D60E              loc_D588:   ; Цикл ожидания нажатия Esc или Enter
 55+  D60E CD 1B C8                 call        bios_keyScan
 56+  D611 FE 1B                    cp          1Bh             ; Esc
 57+  D613 CA 3D D0                 jp z,       mainReload      ; Если Esc - выход
 58+  D616 FE 0D                    cp          0Dh             ; Enter
 59+  D618 C2 0E D6                 jp nz,      loc_D588        ; Если Enter - всё равно удалить
 60+  D61B
 61+  D61B              loc_D595:   ; Удаляем текущий файл
 62+  D61B CD A7 D8                 call        getSelectedFile
 63+  D61E CD 4B C8                 call        bios_fileDelete
 64+  D621
 65+  D621                          ; Уменьшаем счетчик файлов
 66+  D621 21 B0 DE                 ld          hl, panelA_filesCnt
 67+  D624 CD 16 DB                 call        readBytePanel
 68+  D627 3D                       dec         a
 69+  D628 CD 05 DB                 call        writeBytePanel
 70+  D62B
 71+  D62B C3 3D D0                 jp          mainReload
 72+  D62E
 80   D62E                  INCLUDE "f2.inc"
  1+  D62E              ;----------------------------------------------------------------------------
  2+  D62E              ; MXOS NC.COM
  3+  D62E              ; Клавиши F1, F2. Выбор накопителя для панели
  4+  D62E              ;
  5+  D62E              ; 2013-12-18 Дизассемблировано vinxru
  6+  D62E              ;----------------------------------------------------------------------------
  7+  D62E
  8+  D62E              F2:         ; Временно устанавливаем activePanel=1
  9+  D62E 3A AB DE                 ld    a, (activePanel)
 10+  D631 F5                       push  af
 11+  D632 3E 01                    ld    a, 1
 12+  D634 32 AB DE                 ld    (activePanel),a
 13+  D637
 14+  D637                          ; Диалог
 15+  D637 CD 8F D6                 call  chooseDrive
 16+  D63A
 17+  D63A                          ; Если выбрали устройство, то сохраняем его.
 18+  D63A FE FF                    cp    0FFh
 19+  D63C CA 49 D6                 jp z, loc_D5C3
 20+  D63F 32 AF DE                 ld    (panelB_drive),a
 21+  D642
 22+  D642                          ; А так же делаем панель видимой и перемещаем курсор в начало
 23+  D642 AF                       xor   a
 24+  D643 32 AD DE                 ld    (panelB_info),a
 25+  D646 32 B3 DE                 ld    (panelB_curFile),a
 26+  D649
 27+  D649              loc_D5C3:   ; Восстанавливаем activePanel
 28+  D649 F1                       pop   af
 29+  D64A 32 AB DE                 ld    (activePanel),a
 30+  D64D
 31+  D64D                          ; Перезагружаем и перерисовываем вторую панель
 32+  D64D CD BB D8                 call  loadAndPrintB
 33+  D650
 34+  D650                          ; Перезагружаем и перерисовываем первую панель, только если она отображается
 35+  D650 3A AC DE                 ld    a, (panelA_info)
 36+  D653 A7                       and   a
 37+  D654 CA 89 D6                 jp z, saveStateAndReload
 38+  D657 CD CA D8                 call  loadAndPrintA
 39+  D65A
 40+  D65A                          ; Сохраняем состояние и выходим
 41+  D65A C3 89 D6                 jp    saveStateAndReload
 42+  D65D
 43+  D65D              ; ---------------------------------------------------------------------------
 44+  D65D
 45+  D65D              F1:         ; Временно устанавливаем activePanel=02
 46+  D65D 3A AB DE                 ld    a, (activePanel)
 47+  D660 F5                       push  af
 48+  D661 3E 00                    ld    a, 0
 49+  D663 32 AB DE                 ld    (activePanel),a
 50+  D666
 51+  D666                          ; Диалог
 52+  D666 CD 8F D6                 call  chooseDrive
 53+  D669
 54+  D669                          ; Если выбрали устройство, то сохраняем его.
 55+  D669 FE FF                    cp    0FFh
 56+  D66B CA 78 D6                 jp z, loc_D5F2
 57+  D66E 32 AE DE                 ld    (panelA_drive),a
 58+  D671
 59+  D671                          ; А так же делаем панель видимой и перемещаем курсор в начало
 60+  D671 AF                       xor   a
 61+  D672 32 AC DE                 ld    (panelA_info),a
 62+  D675 32 B2 DE                 ld    (panelA_curFile),a
 63+  D678
 64+  D678              loc_D5F2:   ; Восстанавливаем activePanel
 65+  D678 F1                       pop   af
 66+  D679 32 AB DE                 ld    (activePanel),a
 67+  D67C
 68+  D67C                          ; Перезагружаем и перерисовываем первую панель
 69+  D67C CD CA D8                 call  loadAndPrintA
 70+  D67F
 71+  D67F                          ; Перезагружаем и перерисовываем вторую панель, только если она отображается
 72+  D67F 3A AD DE                 ld    a, (panelB_info)
 73+  D682 A7                       and   a
 74+  D683 CA 89 D6                 jp z, saveStateAndReload
 75+  D686 CD BB D8                 call  loadAndPrintB
 76+  D689
 77+  D689              saveStateAndReload:
 78+  D689                          ; Сохраняем состояние и выходим
 79+  D689 CD 08 D2                 call  saveState
 80+  D68C C3 53 D0                 jp    mainDriveChanged
 81+  D68F
 82+  D68F              ; ---------------------------------------------------------------------------
 83+  D68F
 84+  D68F              chooseDrive:
 85+  D68F                      COLOR   COLOR_DIALOG
 85+  D68F             >        IF ENABLE_COLOR
 85+  D68F 3E 07       >            ld a, COLOR_DIALOG
 85+  D691 32 F8 FF    >            ld (IO_COLOR), a
 85+  D694             >        ENDIF
 86+  D694
 87+  D694 21 86 DE                 ld    hl, g_chooseDrive
 88+  D697 CD 4B DB                 call  draw
 89+  D69A
 90+  D69A                          ; Выводим текст "CHOOSE DRIVE:"
 91+  D69A 21 63 1E                 ld    hl, 1E63h
 92+  D69D CD 38 DB                 call  setCursorPosPanel
 93+  D6A0 21 25 DD                 ld    hl, aChooseDrive
 94+  D6A3 CD 18 C8                 call  bios_printString
 95+  D6A6
 96+  D6A6                          ; Выводим текст "A   B   C   D"
 97+  D6A6 21 74 1C                 ld    hl, 1C74h
 98+  D6A9 CD 38 DB                 call  setCursorPosPanel
 99+  D6AC 21 09 DD                 ld    hl, aABCD
100+  D6AF CD 18 C8                 call  bios_printString
101+  D6B2
102+  D6B2                          ; Выводим текст "E   F   G   H"
103+  D6B2 21 7F 1C                 ld    hl, 1C7Fh
104+  D6B5 CD 38 DB                 call  setCursorPosPanel
105+  D6B8 21 17 DD                 ld    hl, aEFGH
106+  D6BB CD 18 C8                 call  bios_printString
107+  D6BE
108+  D6BE                          ; Меняем вид курсора
109+  D6BE 3A E9 8F                 ld    a, (bios_vars.cursorCfg)
110+  D6C1 F5                       push  af
111+  D6C2 AF                       xor   a
112+  D6C3 32 E9 8F                 ld    (bios_vars.cursorCfg), a
113+  D6C6
114+  D6C6                          ; Сохраняем текущее устройство
115+  D6C6 21 AE DE                 ld    hl, panelA_drive
116+  D6C9 CD 16 DB                 call  readBytePanel
117+  D6CC 32 C9 DE                 ld    (nc_vars.chooseDrive), a
118+  D6CF
119+  D6CF              loc_D644:   ; Рисуем курсор
120+  D6CF CD 27 D7                 call  chooseDrive_draw
121+  D6D2
122+  D6D2                          ; Ждем нажатия клавиши
123+  D6D2 CD 03 C8                 call  bios_getch
124+  D6D5
125+  D6D5                          ; Стираем курсор
126+  D6D5 F5                       push  af
127+  D6D6 CD 27 D7                 call  chooseDrive_draw
128+  D6D9 F1                       pop   af
129+  D6DA
130+  D6DA 0E 01                    ld    c, 1
131+  D6DC FE 18                    cp    18h
132+  D6DE CA 1B D7                 jp z, loc_D690
133+  D6E1 0E 07                    ld    c, 7
134+  D6E3 FE 08                    cp    8
135+  D6E5 CA 1B D7                 jp z, loc_D690
136+  D6E8 0E 04                    ld    c, 4
137+  D6EA FE 1A                    cp    1Ah
138+  D6EC CA 1B D7                 jp z, loc_D690
139+  D6EF FE 19                    cp    19h
140+  D6F1 CA 1B D7                 jp z, loc_D690
141+  D6F4 FE 0D                    cp    0Dh
142+  D6F6 CA 13 D7                 jp z, loc_D688
143+  D6F9 FE 1B                    cp    1Bh
144+  D6FB CA 0C D7                 jp z, loc_D681
145+  D6FE
146+  D6FE                          ; Выбор диска нажатием на a-h
147+  D6FE D6 41                    sub   41h
148+  D700 FE 08                    cp    8
149+  D702 D2 CF D6                 jp nc,      loc_D644
150+  D705 4F                       ld    c, a
151+  D706
152+  D706                          ; Восстанавливаем вид курсора
153+  D706 F1                       pop   af
154+  D707 32 E9 8F                 ld    (bios_vars.cursorCfg),a
155+  D70A 79                       ld    a, c
156+  D70B C9                       ret
157+  D70C
158+  D70C              ; ---------------------------------------------------------------------------
159+  D70C
160+  D70C              loc_D681:   ; Восстанавливаем вид курсора
161+  D70C F1                       pop   af
162+  D70D 32 E9 8F                 ld    (bios_vars.cursorCfg),a
163+  D710
164+  D710                          ; Ничего не выбрано
165+  D710 3E FF                    ld    a, 0FFh
166+  D712 C9                       ret
167+  D713
168+  D713              ; ---------------------------------------------------------------------------
169+  D713
170+  D713              loc_D688:   ; Восстанавливаем вид курсора
171+  D713 F1                       pop   af
172+  D714 32 E9 8F                 ld    (bios_vars.cursorCfg),a
173+  D717                          ; Выбрали
174+  D717 3A C9 DE                 ld    a, (nc_vars.chooseDrive)
175+  D71A C9                       ret
176+  D71B
177+  D71B              ; ---------------------------------------------------------------------------
178+  D71B
179+  D71B 3A C9 DE     loc_D690:   ld    a, (nc_vars.chooseDrive)
180+  D71E 81                       add   a, c
181+  D71F E6 07                    and   7
182+  D721 32 C9 DE                 ld    (nc_vars.chooseDrive),a
183+  D724 C3 CF D6                 jp    loc_D644
184+  D727
185+  D727              ; ---------------------------------------------------------------------------
186+  D727
187+  D727              chooseDrive_draw:
188+  D727                          ; Выбранное устройство
189+  D727 3A C9 DE                 ld    a, (nc_vars.chooseDrive)
190+  D72A
191+  D72A                          ; Координаты курсора
192+  D72A 21 6C 97                 ld    hl, 976Ch
193+  D72D
194+  D72D                          ; Вторая строка
195+  D72D FE 04                    cp    4
196+  D72F DA 3A D7                 jp c, chooseDrive_draw2
197+  D732 D6 04                    sub  4
198+  D734 4F                       ld   c, a
199+  D735 7D                       ld   a, l
200+  D736 C6 0B                    add  a,0Bh
201+  D738 6F                       ld   l, a
202+  D739 79                       ld   a, c
203+  D73A              chooseDrive_draw2:
204+  D73A                          ; Рисуем
205+  D73A 4F                       ld    c, a
206+  D73B 87                       add   a, a
207+  D73C 81                       add   a, c
208+  D73D 84                       add   a, h
209+  D73E 67                       ld    h, a
210+  D73F CD 8A DB                 call  activePanelPos
211+  D742 06 01                    ld    b, 1        ; ширина 8 пикселей
212+  D744 C3 95 D8                 jp    inverseRect ; hl - адрес
213+  D747
214+  D747
 81   D747                  INCLUDE "tab.inc"
  1+  D747              ;----------------------------------------------------------------------------
  2+  D747              ; MXOS NC.COM
  3+  D747              ; Клавиша TAB - Смена активной панели
  4+  D747              ;
  5+  D747              ; 2013-12-18 Дизассемблировано vinxru
  6+  D747              ;----------------------------------------------------------------------------
  7+  D747
  8+  D747              Tab:        ; Получаем видимость панели
  9+  D747 21 AC DE                 ld    hl, panelA_info
 10+  D74A 3A AB DE                 ld    a, (activePanel)
 11+  D74D A7                       and   a
 12+  D74E C2 52 D7                 jp nz,  loc_D6C7
 13+  D751 23                       inc   hl
 14+  D752 4F           loc_D6C7:   ld    c, a
 15+  D753 7E                       ld  a, (hl)
 16+  D754
 17+  D754                          ; Панель не видима, выходим
 18+  D754 A7                       and   a
 19+  D755 C2 53 D0                 jp nz,  mainDriveChanged
 20+  D758
 21+  D758                          ; Меняем активную панель на противоположную
 22+  D758 79                       ld    a, c
 23+  D759 EE 01                    xor   1
 24+  D75B 32 AB DE                 ld    (activePanel),a
 25+  D75E
 26+  D75E                          ; Перезагружаем список файлов
 27+  D75E 21 AE DE                 ld    hl, panelA_drive
 28+  D761 CD 16 DB                 call  readBytePanel
 29+  D764 CD FA D8                 call  loadFiles   ; На входе нужен a=накопитель
 30+  D767
 31+  D767 C3 89 D6                 jp    saveStateAndReload
 32+  D76A
 82   D76A                  INCLUDE "f3.inc"
  1+  D76A              ;----------------------------------------------------------------------------
  2+  D76A              ; MXOS NC.COM
  3+  D76A              ; Клавиша F3 - отобразить информацию о накопителе
  4+  D76A              ;
  5+  D76A              ; 2013-12-18 Дизассемблировано vinxru
  6+  D76A              ;----------------------------------------------------------------------------
  7+  D76A
  8+  D76A              F3:         ; Временный выбор противоположной панели
  9+  D76A 3A AB DE                 ld    a, (activePanel)
 10+  D76D F5                       push  af
 11+  D76E EE 01                    xor   1
 12+  D770 32 AB DE                 ld    (activePanel),a
 13+  D773
 14+  D773                          ; Меняем видимость панели
 15+  D773 21 AC DE                 ld    hl, panelA_info
 16+  D776 CD 16 DB                 call  readBytePanel
 17+  D779 EE 01                    xor   1
 18+  D77B CD 05 DB                 call  writeBytePanel
 19+  D77E
 20+  D77E                          ; Восстанавлаием активную панель
 21+  D77E F1                       pop   af
 22+  D77F 32 AB DE                 ld    (activePanel),a
 23+  D782 A7                       and   a
 24+  D783 CA 8C D7                 jp z, loc_D701
 25+  D786
 26+  D786                          ; Перерисовываем панель
 27+  D786 CD CA D8                 call  loadAndPrintA
 28+  D789
 29+  D789 C3 89 D6                 jp    saveStateAndReload
 30+  D78C
 31+  D78C              ; ---------------------------------------------------------------------------
 32+  D78C
 33+  D78C CD BB D8     loc_D701:   call  loadAndPrintB
 34+  D78F C3 89 D6                 jp    saveStateAndReload
 35+  D792
 83   D792                  INCLUDE "upDownLeftRight.inc"
  1+  D792              ;----------------------------------------------------------------------------
  2+  D792              ; MXOS NC.COM
  3+  D792              ; Клавиши перемещения курсора
  4+  D792              ;
  5+  D792              ; 2013-12-18 Дизассемблировано vinxru
  6+  D792              ;----------------------------------------------------------------------------
  7+  D792
  8+  D792              Down:       ; Если curFile+1 < filesCnt, то curFile = curFile+1
  9+  D792 21 B0 DE                 ld    hl, panelA_filesCnt
 10+  D795 CD 16 DB                 call  readBytePanel
 11+  D798 4F                       ld    c, a
 12+  D799 21 B2 DE                 ld    hl, panelA_curFile
 13+  D79C CD 16 DB                 call  readBytePanel
 14+  D79F 3C                       inc   a
 15+  D7A0 B9                       cp    c
 16+  D7A1 CA 53 D0                 jp z, mainDriveChanged
 17+  D7A4 CD 05 DB                 call  writeBytePanel
 18+  D7A7 C3 53 D0                 jp    mainDriveChanged
 19+  D7AA
 20+  D7AA              ; ---------------------------------------------------------------------------
 21+  D7AA
 22+  D7AA              Up:         ; Если curFile > 0, то curFile = curFile-1
 23+  D7AA 21 B2 DE                 ld    hl, panelA_curFile
 24+  D7AD CD 16 DB                 call  readBytePanel
 25+  D7B0 3D                       dec   a
 26+  D7B1 FA 53 D0                 jp M, mainDriveChanged
 27+  D7B4 CD 05 DB                 call  writeBytePanel
 28+  D7B7 C3 53 D0                 jp    mainDriveChanged
 29+  D7BA
 30+  D7BA              ; ---------------------------------------------------------------------------
 31+  D7BA
 32+  D7BA              Left:       ; Если curFile > 18, то curFile = curFile-18, иначе curFile = 0
 33+  D7BA 21 B2 DE                 ld    hl, panelA_curFile
 34+  D7BD CD 16 DB                 call  readBytePanel
 35+  D7C0 D6 12                    sub   18
 36+  D7C2 F2 C6 D7                 jp p, Left_1
 37+  D7C5 AF                       xor   a
 38+  D7C6 CD 05 DB     Left_1:           call  writeBytePanel
 39+  D7C9 C3 53 D0                 jp    mainDriveChanged
 40+  D7CC
 41+  D7CC              ; ---------------------------------------------------------------------------
 42+  D7CC
 43+  D7CC 21 B0 DE     Right:            ld    hl, panelA_filesCnt
 44+  D7CF CD 16 DB                 call  readBytePanel
 45+  D7D2 4F                       ld    c, a
 46+  D7D3 0D                       dec   c
 47+  D7D4 CA 53 D0                 jp z, mainDriveChanged
 48+  D7D7 21 B2 DE                 ld    hl, panelA_curFile
 49+  D7DA CD 16 DB                 call  readBytePanel
 50+  D7DD C6 12                    add   a,18
 51+  D7DF B9                       cp    c
 52+  D7E0 DA E4 D7                 jp c, Right_1
 53+  D7E3 79                       ld    a, c
 54+  D7E4 CD 05 DB     Right_1:    call  writeBytePanel
 55+  D7E7 C3 53 D0                 jp    mainDriveChanged
 56+  D7EA
 84   D7EA                  INCLUDE "clearCmdLine.inc"    ; Продолжается в printSpaces
  1+  D7EA              ;----------------------------------------------------------------------------
  2+  D7EA              ; MXOS NC.COM
  3+  D7EA              ; Очистка ком строки
  4+  D7EA              ;
  5+  D7EA              ; 2013-12-18 Дизассемблировано vinxru
  6+  D7EA              ;----------------------------------------------------------------------------
  7+  D7EA
  8+  D7EA              clearCmdLine:
  9+  D7EA 21 F3 07                 ld    hl, 7F3h
 10+  D7ED 22 FC 8F                 ld    (bios_vars.cursorY), hl
 11+  D7F0
 12+  D7F0 26 0A                    ld    h, 10
 13+  D7F2 22 C5 DE                 ld    (nc_vars.cmdLinePos), hl
 14+  D7F5
 15+  D7F5                          COLOR   COLOR_CMDLINE
 15+  D7F5             >        IF ENABLE_COLOR
 15+  D7F5 3E 70       >            ld a, COLOR_CMDLINE
 15+  D7F7 32 F8 FF    >            ld (IO_COLOR), a
 15+  D7FA             >        ENDIF
 16+  D7FA
 17+  D7FA 0E 5C                    ld    c, 92 ; '\'
 18+  D7FC CD 09 C8                 call  bios_printChar
 19+  D7FF
 20+  D7FF 21 D0 DE                 ld    hl, nc_vars.cmdLine
 21+  D802 22 C7 DE                 ld    (nc_vars.cmdLineEnd), hl
 22+  D805
 23+  D805 06 3C                    ld    b, 60
 24+  D807
 25+  D807                          ; Продолжение на printSpaces
 26+  D807
 85   D807                  INCLUDE "printSpaces.inc"
  1+  D807              ;----------------------------------------------------------------------------
  2+  D807              ; MXOS NC.COM
  3+  D807              ; Вывод пробелов
  4+  D807              ;
  5+  D807              ; b - кол-во пробелов
  6+  D807              ;
  7+  D807              ; 2013-12-18 Дизассемблировано vinxru
  8+  D807              ;----------------------------------------------------------------------------
  9+  D807
 10+  D807              printSpaces:
 11+  D807 0E 20                    ld    c, ' '
 12+  D809              printSpaces_1:
 13+  D809 CD 09 C8                 call  bios_printChar
 14+  D80C 05                       dec   b
 15+  D80D C2 09 D8                 jp nz,  printSpaces_1
 16+  D810 C9                       ret
 17+  D811
 86   D811                  INCLUDE "drawCursor.inc"
  1+  D811              ;----------------------------------------------------------------------------
  2+  D811              ; MXOS NC.COM
  3+  D811              ; Рисование курсора
  4+  D811              ;
  5+  D811              ; 2013-12-18 Дизассемблировано vinxru
  6+  D811              ;----------------------------------------------------------------------------
  7+  D811
  8+  D811              drawCursor: ; Цвет устаналвиается перед выводом
  9+  D811
 10+  D811                          ; Если файлов нет, выходим
 11+  D811 21 B0 DE                 ld    hl, panelA_filesCnt
 12+  D814 CD 16 DB                 call  readBytePanel
 13+  D817 A7                       and   a
 14+  D818                  IF ENABLE_COLOR
 15+  D818 C8                       ret Z
 16+  D819                  ELSE
 17+  D819 ~                        jp z, drawCursor_0
 18+  D819                  ENDIF
 19+  D819                          ; Номер выбранного файла
 20+  D819 21 B2 DE                 ld    hl, panelA_curFile
 21+  D81C CD 16 DB                 call  readBytePanel
 22+  D81F
 23+  D81F                          ; Рассчиытваем координату X (h = a < 18 ? 0x91 : 0x9D)
 24+  D81F 26 91                    ld    h, 91h
 25+  D821 FE 12                    cp    18
 26+  D823 DA 2A D8                 jp c, drawCursor_1
 27+  D826 D6 12                    sub   18
 28+  D828 26 9D                    ld    h, 9Dh
 29+  D82A
 30+  D82A              drawCursor_1:     ; Рассчиытваем координату Y (l = a * 10 + 18h)
 31+  D82A 87                       add   a, a
 32+  D82B 4F                       ld    c, a
 33+  D82C 87                       add   a, a
 34+  D82D 87                       add   a, a
 35+  D82E 81                       add   a, c
 36+  D82F C6 18                    add   a,24
 37+  D831 6F                       ld    l, a
 38+  D832
 39+  D832                          ; Ширина
 40+  D832 06 0A                    ld    b, 10
 41+  D834
 42+  D834                          ; Если правая панель, сдвигаем курсор на пол экрана
 43+  D834 3A AB DE     drawCursor_2:     ld    a, (activePanel)
 44+  D837 A7                       and   a
 45+  D838 CA 3D D8                 jp z, drawCursor_3
 46+  D83B 3E 18                    ld    a, 18h
 47+  D83D 84           drawCursor_3:     add   a, h
 48+  D83E 67                       ld    h, a
 49+  D83F
 50+  D83F                          ; Рисуем курсор (hl - адрес, b - ширина, высота 9)
 51+  D83F CD 95 D8                 call  inverseRect
 52+  D842 C9                       ret
 53+  D843
 54+  D843              ; ---------------------------------------------------------------------------
 55+  D843
 56+  D843                  IF ENABLE_COLOR==0
 57+  D843 ~            drawCursor_0:     ld    hl, 92D6h
 58+  D843 ~                        ld    b, 2
 59+  D843 ~                        jp    drawCursor_2
 60+  D843                  ENDIF
 61+  D843
 87   D843                  INCLUDE "printInfoLine.inc"
  1+  D843              ;----------------------------------------------------------------------------
  2+  D843              ; MXOS NC.COM
  3+  D843              ; Вывод инфомарции о файле внизу окна
  4+  D843              ;
  5+  D843              ; 2013-12-18 Дизассемблировано vinxru
  6+  D843              ;----------------------------------------------------------------------------
  7+  D843
  8+  D843              printInfoLine:
  9+  D843                      ; Если файлов нет, выходим
 10+  D843 21 B0 DE             ld      hl, panelA_filesCnt
 11+  D846 CD 16 DB             call    readBytePanel
 12+  D849 A7                   and     a
 13+  D84A C8                   ret z
 14+  D84B
 15+  D84B                      COLOR   COLOR_INFOLINE
 15+  D84B             >        IF ENABLE_COLOR
 15+  D84B 3E B1       >            ld a, COLOR_INFOLINE
 15+  D84D 32 F8 FF    >            ld (IO_COLOR), a
 15+  D850             >        ENDIF
 16+  D850
 17+  D850 21 DE 0F             ld      hl, (P_FILE_NAME_X << 8) + P_FILE_NAME_Y
 18+  D853 CD 38 DB             call    setCursorPosPanel
 19+  D856
 20+  D856                      ; ld      c, '\'
 21+  D856                      ; call    bios_printChar
 22+  D856
 23+  D856                      ; Устанавливаем hl на дескриптор файла
 24+  D856 CD A7 D8             call    getSelectedFile
 25+  D859 E5                   push    hl
 26+  D85A
 27+  D85A                      ; Печатаем имя файла в компактном виде
 28+  D85A 11 39 DF             ld      de, nc_vars.tempFileDescr  ; буфер
 29+  D85D CD F0 DB             call    compactName
 30+  D860 21 39 DF             ld      hl, nc_vars.tempFileDescr
 31+  D863 06 0E                ld      b, DIR_NAME_LENGTH + 6  ; макс длина строки (name.ext + ' ' + терминатор)
 32+  D865 0E 14                ld      c, 20                   ; терминатор - пробел или меньше
 33+  D867 CD 22 DB             call    printString2
 34+  D86A
 35+  D86A                      ; После имени файла, если оно короткие, надо напечатать
 36+  D86A                      ; пробелы, чтобы стереть предыдущий текст. После работы
 37+  D86A                      ; printString2 у нас в b как раз количество символов,
 38+  D86A                      ; оставшихся до DIR_NAME_LENGTH + 6
 39+  D86A CD 07 D8     		call    printSpaces	; b - кол-во пробелов
 40+  D86D
 41+  D86D                      ; Смещаем курсор
 42+  D86D 21 DE 39             ld      hl, (P_FILE_DATA_X << 8) + P_FILE_DATA_Y
 43+  D870 CD 38 DB             call    setCursorPosPanel
 44+  D873
 45+  D873                      ; Устанавливаем hl на поле адреса загрузки
 46+  D873 E1                   pop     hl
 47+  D874 E5                   push    hl
 48+  D875 01 13 00             ld      bc, FILE_DESCRIPTOR.loadAddress + 1 ; bc = смещение
 49+  D878 09                   add     hl, bc
 50+  D879
 51+  D879                      ; Читаем старший и младший байты адреса загрузки
 52+  D879                      ; и тут же печатаем их в HEX форме
 53+  D879 7E                   ld      a, (hl)
 54+  D87A CD 15 C8             call    bios_printHexByte
 55+  D87D 2B                   dec     hl
 56+  D87E 7E                   ld      a, (hl)
 57+  D87F CD 15 C8             call    bios_printHexByte
 58+  D882
 59+  D882                      ; Смещаем курсор
 60+  D882 0E 18        		LD 	    c, 18h  ; код символа "вправо"
 61+  D884 CD 09 C8     		call	bios_printChar
 62+  D887
 63+  D887                      ; Устанавливаем hl на поле размера файла
 64+  D887 E1                   pop     hl
 65+  D888 01 1C 00             ld      bc, FILE_DESCRIPTOR.size ; bc = смещение
 66+  D88B 09                   add     hl, bc
 67+  D88C
 68+  D88C                      ; Читаем размер файла в de и печатаем в десятичной форме
 69+  D88C 5E                   ld      e, (hl)
 70+  D88D 23                   inc     hl
 71+  D88E 56                   ld      d, (hl)
 72+  D88F 13                   inc     de          ; в дескрипторе файла хранится размер-1
 73+  D890 06 20                ld      b, 20h
 74+  D892 C3 6C C8             jp      bios_printDecWord
 75+  D895
 88   D895                  INCLUDE "inverseRect.inc"
  1+  D895              ;----------------------------------------------------------------------------
  2+  D895              ; MXOS NC.COM
  3+  D895              ; Инвертирвоание прямоугольной области на экране
  4+  D895              ;
  5+  D895              ; hl - адрес, b   - ширина в байтах, высота всегда 9 пикселей
  6+  D895              ;
  7+  D895              ; 2013-12-18 Дизассемблировано vinxru
  8+  D895              ;----------------------------------------------------------------------------
  9+  D895
 10+  D895              inverseRect:
 11+  D895 0E 09                    ld      c, 9
 12+  D897 E5                       push    hl
 13+  D898 7E           loc_D7F3:   ld      a, (hl)
 14+  D899 2F                       cpl
 15+  D89A 77                       ld      (hl), a
 16+  D89B 23                       inc     hl
 17+  D89C 0D                       dec     c
 18+  D89D C2 98 D8                 jp nz,  loc_D7F3
 19+  D8A0 E1                       pop     hl
 20+  D8A1 24                       inc     h
 21+  D8A2 05                       dec     b
 22+  D8A3 C2 95 D8                 jp nz,  inverseRect
 23+  D8A6 C9                       ret
 24+  D8A7
 89   D8A7                  INCLUDE "getSelectedFile.inc"
  1+  D8A7              ;----------------------------------------------------------------------------
  2+  D8A7              ; MXOS NC.COM
  3+  D8A7              ; Получить имя выбранного файла
  4+  D8A7              ;
  5+  D8A7              ; выход:
  6+  D8A7              ;   hl - адрес дескриптора файла
  7+  D8A7              ;
  8+  D8A7              ; 2013-12-18 Дизассемблировано vinxru
  9+  D8A7              ;----------------------------------------------------------------------------
 10+  D8A7
 11+  D8A7              getSelectedFile:
 12+  D8A7 D5                   push    de
 13+  D8A8
 14+  D8A8                      ; Получить номер текущего файла
 15+  D8A8 21 B2 DE             ld      hl, panelA_curFile
 16+  D8AB CD 16 DB             call    readBytePanel
 17+  D8AE
 18+  D8AE                      ; Получить имя (адрес) текущего файла
 19+  D8AE                      ; вычисляется hl = FILE_LIST_BUFFER + DIR_DESCR_SIZE * curFile[activePanel];
 20+  D8AE 21 E0 7F             ld      hl, FILE_LIST_BUFFER - DIR_DESCR_SIZE
 21+  D8B1 11 20 00             ld      de, DIR_DESCR_SIZE
 22+  D8B4              loc_D80F:
 23+  D8B4 19                   add     hl, de
 24+  D8B5 3D                   dec     a
 25+  D8B6 F2 B4 D8             jp p,   loc_D80F
 26+  D8B9
 27+  D8B9 D1                   pop     de
 28+  D8BA C9                   ret
 29+  D8BB
 90   D8BB                  INCLUDE "loadAndPrint.inc"
  1+  D8BB              ;----------------------------------------------------------------------------
  2+  D8BB              ; MXOS NC.COM
  3+  D8BB              ; Загрузить файлы и нарисовать
  4+  D8BB              ;
  5+  D8BB              ; 2013-12-18 Дизассемблировано vinxru
  6+  D8BB              ;----------------------------------------------------------------------------
  7+  D8BB
  8+  D8BB              loadAndPrintB:    ; Времено меняем активную панель на правую
  9+  D8BB 3A AB DE                 ld      a, (activePanel)
 10+  D8BE F5                       push    af
 11+  D8BF 3E 01                    ld      a, 1
 12+  D8C1 32 AB DE                 ld      (activePanel),a
 13+  D8C4
 14+  D8C4                          ; Переходим к общему коду
 15+  D8C4 3A AD DE                 ld      a, (panelB_info)
 16+  D8C7 C3 D6 D8                 jp      loadAndPrint
 17+  D8CA
 18+  D8CA              ; ---------------------------------------------------------------------------
 19+  D8CA
 20+  D8CA              loadAndPrintA:    ; Времено меняем активную панель на левую
 21+  D8CA 3A AB DE                 ld      a, (activePanel)
 22+  D8CD F5                       push    af
 23+  D8CE 3E 00                    ld      a, 0
 24+  D8D0 32 AB DE                 ld      (activePanel),a
 25+  D8D3
 26+  D8D3                          ; Панель видима?
 27+  D8D3 3A AC DE                 ld      a, (panelA_info)
 28+  D8D6              loadAndPrint:
 29+  D8D6 A7                       and     a
 30+  D8D7 C2 E9 D8                 jp nz,  loadAndPrint_2
 31+  D8DA
 32+  D8DA                          ; Загружаем список файлов
 33+  D8DA 21 AE DE                 ld      hl, panelA_drive
 34+  D8DD CD 16 DB                 call    readBytePanel
 35+  D8E0 CD FA D8                 call    loadFiles   ; На входе a должен содержать номер накопителя
 36+  D8E3
 37+  D8E3                          ; Выводим список файлов
 38+  D8E3 CD 64 DA                 call    printFilePanel
 39+  D8E6
 40+  D8E6 C3 EC D8                 jp      loadAndPrint_3
 41+  D8E9
 42+  D8E9              ; ---------------------------------------------------------------------------
 43+  D8E9
 44+  D8E9              loadAndPrint_2:   ; Рисуем панель информации
 45+  D8E9 CD 07 D9                 call    printInfoPanel
 46+  D8EC
 47+  D8EC              loadAndPrint_3:   ; Восстанавливаем активную панель
 48+  D8EC F1                       pop     af
 49+  D8ED 32 AB DE                 ld      (activePanel),a
 50+  D8F0
 51+  D8F0                          ; Загружаем список файлов
 52+  D8F0 21 AE DE                 ld      hl, panelA_drive
 53+  D8F3 CD 16 DB                 call    readBytePanel
 54+  D8F6 CD FA D8                 call    loadFiles   ; На входе a должен содержать номер накопителя
 55+  D8F9 C9                       ret
 56+  D8FA
 91   D8FA                  INCLUDE "loadFiles.inc"
  1+  D8FA              ;----------------------------------------------------------------------------
  2+  D8FA              ; MXOS NC.COM
  3+  D8FA              ; Загрузить список файлов с накопителя
  4+  D8FA              ;
  5+  D8FA              ; вход:
  6+  D8FA              ;   a = номер накопителя
  7+  D8FA              ;
  8+  D8FA              ; 2013-12-18 Дизассемблировано vinxru
  9+  D8FA              ;----------------------------------------------------------------------------
 10+  D8FA
 11+  D8FA 1E 01        loadFiles:  ld    e, 1
 12+  D8FC CD 42 C8                 call  bios_fileGetSetDrive
 13+  D8FF 21 00 80                 ld    hl, FILE_LIST_BUFFER
 14+  D902 06 24                    ld    b, FILE_LIST_SIZE
 15+  D904 C3 3F C8                 jp    bios_fileList
 16+  D907
 92   D907                  INCLUDE "printInfoPanel.inc"
  1+  D907              ;----------------------------------------------------------------------------
  2+  D907              ; MXOS NC.COM
  3+  D907              ; Рисование информационной панели
  4+  D907              ;
  5+  D907              ; 2013-12-18 Дизассемблировано vinxru
  6+  D907              ;----------------------------------------------------------------------------
  7+  D907
  8+  D907              printInfoPanel:
  9+  D907                          COLOR   COLOR_BORDER
  9+  D907             >        IF ENABLE_COLOR
  9+  D907 3E F1       >            ld a, COLOR_BORDER
  9+  D909 32 F8 FF    >            ld (IO_COLOR), a
  9+  D90C             >        ENDIF
 10+  D90C
 11+  D90C                          ; Рисуем панель
 12+  D90C 21 74 DE                 ld      hl, g_infoPanel
 13+  D90F CD 4B DB                 call    draw
 14+  D912
 15+  D912                          COLOR   COLOR_INFOHEADER
 15+  D912             >        IF ENABLE_COLOR
 15+  D912 3E A1       >            ld a, COLOR_INFOHEADER
 15+  D914 32 F8 FF    >            ld (IO_COLOR), a
 15+  D917             >        ENDIF
 16+  D917
 17+  D917                          ; Печать "COMMANDER VERSION XXX"
 18+  D917 21 10 11                 ld      hl, 1110h
 19+  D91A CD 38 DB                 call    setCursorPosPanel
 20+  D91D 21 D2 DC                 ld      hl, aCommanderVer
 21+  D920 CD 18 C8                 call    bios_printString
 22+  D923
 23+  D923                          ; Печать "(C) OMSK 1992"
 24+  D923 21 1A 1D                 ld      hl, 1D1Ah
 25+  D926                          ;ld      hl, 0E1Ah
 26+  D926 CD 38 DB                 call    setCursorPosPanel
 27+  D929 21 E8 DC                 ld      hl, aCopyright
 28+  D92C CD 18 C8                 call    bios_printString
 29+  D92F
 30+  D92F                          ; Положение курсора
 31+  D92F 21 30 0B                 ld      hl, 0B30h
 32+  D932 CD 38 DB                 call    setCursorPosPanel
 33+  D935
 34+  D935                          ; Общий объем ОЗУ
 35+  D935 11 E0 FF                 ld      de, 65504   ; Специалист-MX/MX2
 36+  D938
 37+  D938                          ; Печать "XXXX BYTES MEMORY"
 38+  D938                          COLOR   COLOR_INFONUMBER
 38+  D938             >        IF ENABLE_COLOR
 38+  D938 3E E1       >            ld a, COLOR_INFONUMBER
 38+  D93A 32 F8 FF    >            ld (IO_COLOR), a
 38+  D93D             >        ENDIF
 39+  D93D 06 20                    ld      b, 20h
 40+  D93F CD 6C C8                 call    bios_printDecWord
 41+  D942                          COLOR   COLOR_INFOTEXT
 41+  D942             >        IF ENABLE_COLOR
 41+  D942 3E F1       >            ld a, COLOR_INFOTEXT
 41+  D944 32 F8 FF    >            ld (IO_COLOR), a
 41+  D947             >        ENDIF
 42+  D947 21 9C DD                 ld      hl, aKBytesMemory
 43+  D94A CD 18 C8                 call    bios_printString
 44+  D94D
 45+  D94D                          ; Положение курсора
 46+  D94D 21 3C 0B                 ld      hl, 0B3Ch
 47+  D950 CD 38 DB                 call    setCursorPosPanel
 48+  D953
 49+  D953                          ; Свободный объем ОЗУ
 50+  D953 CD 30 C8                 call    bios_getMemTop
 51+  D956 23                       inc     hl  ; сободно на 1 байт больше, чем memTop
 52+  D957 EB                       ex      hl, de
 53+  D958
 54+  D958                          ; Печать "XXXX BYTES FREE"
 55+  D958                          COLOR   COLOR_INFONUMBER
 55+  D958             >        IF ENABLE_COLOR
 55+  D958 3E E1       >            ld a, COLOR_INFONUMBER
 55+  D95A 32 F8 FF    >            ld (IO_COLOR), a
 55+  D95D             >        ENDIF
 56+  D95D 06 20                    ld      b, 20h
 57+  D95F CD 6C C8                 call    bios_printDecWord
 58+  D962                          COLOR   COLOR_INFOTEXT
 58+  D962             >        IF ENABLE_COLOR
 58+  D962 3E F1       >            ld a, COLOR_INFOTEXT
 58+  D964 32 F8 FF    >            ld (IO_COLOR), a
 58+  D967             >        ENDIF
 59+  D967 21 AA DD                 ld      hl, aKBytesFree
 60+  D96A CD 18 C8                 call    bios_printString
 61+  D96D
 62+  D96D                          ; Положение курсора
 63+  D96D 21 48 05                 ld      hl, 0548h
 64+  D970 CD 38 DB                 call    setCursorPosPanel
 65+  D973
 66+  D973                          ; Общий объем ДОЗУ в кб
 67+  D973 3A F8 8F                 ld      a, (bios_vars.ramPageCount)
 68+  D976 67                       ld      h, a
 69+  D977 2E 00                    ld      l, 0        ; hl = a * 256 - число кластеров
 70+  D979 CD E8 DB                 call    div_hl_2
 71+  D97C CD E8 DB                 call    div_hl_2    ; hl = a * 64 - объем в кб
 72+  D97F EB                       ex     hl, de
 73+  D980
 74+  D980                          ; Печать "XXXX KB EXTENDED MEMORY"
 75+  D980                          COLOR   COLOR_INFONUMBER
 75+  D980             >        IF ENABLE_COLOR
 75+  D980 3E E1       >            ld a, COLOR_INFONUMBER
 75+  D982 32 F8 FF    >            ld (IO_COLOR), a
 75+  D985             >        ENDIF
 76+  D985 06 20                    ld      b, 20h
 77+  D987 CD 6C C8                 call    bios_printDecWord
 78+  D98A                          COLOR   COLOR_INFOTEXT
 78+  D98A             >        IF ENABLE_COLOR
 78+  D98A 3E F1       >            ld a, COLOR_INFOTEXT
 78+  D98C 32 F8 FF    >            ld (IO_COLOR), a
 78+  D98F             >        ENDIF
 79+  D98F 21 88 DD                 ld      hl, aKBytesExtMemory
 80+  D992 CD 18 C8                 call    bios_printString
 81+  D995
 82+  D995                          ; Положение курсора
 83+  D995 21 5C 05                 ld      hl, 055Ch
 84+  D998 CD 38 DB                 call    setCursorPosPanel
 85+  D99B
 86+  D99B                          ; Получить размер диска
 87+  D99B 06 03                    ld      b, 3
 88+  D99D CD 63 C8                 call    bios_diskDriver ; de = кол-во кластеров
 89+  D9A0
 90+  D9A0                          ; Надо вычесть размер fat и каталога
 91+  D9A0                          ;ld      hl, FAT_CLUSTERS + DIR_CLUSTERS
 92+  D9A0 EB                       ex      hl, de
 93+  D9A1                          ;call    sub_hl_de   ; hl = объем диска в кластерах
 94+  D9A1
 95+  D9A1                          ; Считаем обем в килобайтах
 96+  D9A1                          ; hl = hl * 256 / 1024 = hl / 4
 97+  D9A1 CD E8 DB                 call    div_hl_2
 98+  D9A4 CD E8 DB                 call    div_hl_2
 99+  D9A7 EB                       ex      hl, de
100+  D9A8 D5                       push    de  ; в стеке - объем диска в кб
101+  D9A9
102+  D9A9                          ; Печать "XXXX KBYTES TOTAL ON DRIVE A:"
103+  D9A9                          COLOR   COLOR_INFONUMBER
103+  D9A9             >        IF ENABLE_COLOR
103+  D9A9 3E E1       >            ld a, COLOR_INFONUMBER
103+  D9AB 32 F8 FF    >            ld (IO_COLOR), a
103+  D9AE             >        ENDIF
104+  D9AE 06 20                    ld      b, 20h
105+  D9B0 CD 6C C8                 call    bios_printDecWord
106+  D9B3                          COLOR   COLOR_INFOTEXT
106+  D9B3             >        IF ENABLE_COLOR
106+  D9B3 3E F1       >            ld a, COLOR_INFOTEXT
106+  D9B5 32 F8 FF    >            ld (IO_COLOR), a
106+  D9B8             >        ENDIF
107+  D9B8 21 B6 DD                 ld      hl, aKBytesTotalOnDrv
108+  D9BB CD 18 C8                 call    bios_printString
109+  D9BE                          COLOR   COLOR_INFONUMBER
109+  D9BE             >        IF ENABLE_COLOR
109+  D9BE 3E E1       >            ld a, COLOR_INFONUMBER
109+  D9C0 32 F8 FF    >            ld (IO_COLOR), a
109+  D9C3             >        ENDIF
110+  D9C3 CD F5 DA                 call    printCurDrive
111+  D9C6                          COLOR   COLOR_INFOTEXT
111+  D9C6             >        IF ENABLE_COLOR
111+  D9C6 3E F1       >            ld a, COLOR_INFOTEXT
111+  D9C8 32 F8 FF    >            ld (IO_COLOR), a
111+  D9CB             >        ENDIF
112+  D9CB
113+  D9CB                          ; Положение курсора
114+  D9CB 21 68 05                 ld      hl, 0568h
115+  D9CE CD 38 DB                 call    setCursorPosPanel
116+  D9D1
117+  D9D1                          ; Подсчет свободного места на диске
118+  D9D1                          ; Считаем не занятые кластеры, начиная с FAT_CLUSTERS + DIR_CLUSTERS
119+  D9D1 11 28 00                 ld      de, (FAT_CLUSTERS + DIR_CLUSTERS) * FAT_ITEM_SIZE
120+  D9D4 21 00 6C                 ld      hl, FAT_BUFFER  ; hl = адрес таблицы fat в памяти
121+  D9D7 19                       add     hl, de          ; hl = адрес первой незарезервированной ячейки в таблице fat
122+  D9D8 11 00 00                 ld      de, 0           ; счетчик свободных кластеров
123+  D9DB 01 00 08                 ld      bc, FAT_SIZE / FAT_ITEM_SIZE ; общее кол-во ячеек fat
124+  D9DE
125+  D9DE              getFreeSpaceLoop:
126+  D9DE
127+  D9DE                          ; Читаем номер кластера из fat
128+  D9DE 7E                       ld      a, (hl)
129+  D9DF 23                       inc     hl
130+  D9E0 B6                       or      (hl)    ; ZF = 0, если кластер пустой (0)
131+  D9E1 23                       inc     hl      ; эта инструкция не меняет состояние флагов процессора
132+  D9E2
133+  D9E2                          ; Если кластер пустой, увеличиваем счетчик свободных кластеров
134+  D9E2 C2 E6 D9                 jp nz,  getFreeSpaceLoopNext
135+  D9E5 13                       inc     de
136+  D9E6
137+  D9E6              getFreeSpaceLoopNext:
138+  D9E6 0B                       dec     bc  ; счетчик просмотренных кластеров
139+  D9E7 78                       ld      a, b
140+  D9E8 B1                       or      c
141+  D9E9 C2 DE D9                 jp nz,  getFreeSpaceLoop
142+  D9EC
143+  D9EC                          ; de = количество свободных кластеров.
144+  D9EC                          ; Считаем обем в килобайтах
145+  D9EC                          ; hl = hl * 256 / 1024 = hl / 4
146+  D9EC EB                       ex      hl, de
147+  D9ED CD E8 DB                 call    div_hl_2
148+  D9F0 CD E8 DB                 call    div_hl_2
149+  D9F3 EB                       ex      hl, de
150+  D9F4 D5                       push    de  ; в стеке - объем диска в кб
151+  D9F5
152+  D9F5                          ; Печать "XXXX KBYTES FREE ON DRIVE A:"
153+  D9F5                          COLOR   COLOR_INFONUMBER
153+  D9F5             >        IF ENABLE_COLOR
153+  D9F5 3E E1       >            ld a, COLOR_INFONUMBER
153+  D9F7 32 F8 FF    >            ld (IO_COLOR), a
153+  D9FA             >        ENDIF
154+  D9FA 06 20                    ld      b, 20h
155+  D9FC CD 6C C8                 call    bios_printDecWord
156+  D9FF                          COLOR   COLOR_INFOTEXT
156+  D9FF             >        IF ENABLE_COLOR
156+  D9FF 3E F1       >            ld a, COLOR_INFOTEXT
156+  DA01 32 F8 FF    >            ld (IO_COLOR), a
156+  DA04             >        ENDIF
157+  DA04 21 CA DD                 ld      hl, aKBytesFreeOnDrv
158+  DA07 CD 18 C8                 call    bios_printString
159+  DA0A                          COLOR   COLOR_INFONUMBER
159+  DA0A             >        IF ENABLE_COLOR
159+  DA0A 3E E1       >            ld a, COLOR_INFONUMBER
159+  DA0C 32 F8 FF    >            ld (IO_COLOR), a
159+  DA0F             >        ENDIF
160+  DA0F CD F5 DA                 call    printCurDrive
161+  DA12
162+  DA12                          ; Положение курсора
163+  DA12 21 74 05                 ld      hl, 0574h
164+  DA15 CD 38 DB                 call    setCursorPosPanel
165+  DA18
166+  DA18                          ; de = кол-во файлов
167+  DA18 21 B0 DE                 ld      hl, panelA_filesCnt
168+  DA1B 3A AB DE                 ld      a, (activePanel)
169+  DA1E A7                       and     a
170+  DA1F C2 23 DA                 jp nz,  loc_D8E0
171+  DA22 23                       inc     hl
172+  DA23 5E           loc_D8E0:   ld      e, (hl)
173+  DA24 16 00                    ld      d, 0
174+  DA26
175+  DA26                          ; Печать "XX FILES USE"
176+  DA26                          COLOR   COLOR_INFONUMBER
176+  DA26             >        IF ENABLE_COLOR
176+  DA26 3E E1       >            ld a, COLOR_INFONUMBER
176+  DA28 32 F8 FF    >            ld (IO_COLOR), a
176+  DA2B             >        ENDIF
177+  DA2B 06 20                    ld      b, 20h
178+  DA2D CD 6C C8                 call    bios_printDecWord
179+  DA30                          COLOR   COLOR_INFOTEXT
179+  DA30             >        IF ENABLE_COLOR
179+  DA30 3E F1       >            ld a, COLOR_INFOTEXT
179+  DA32 32 F8 FF    >            ld (IO_COLOR), a
179+  DA35             >        ENDIF
180+  DA35 21 DE DD                 ld      hl, aFilesUse
181+  DA38 CD 18 C8                 call    bios_printString
182+  DA3B
183+  DA3B D1                       pop     de  ; из стека - объем свободного места в кб
184+  DA3C E1                       pop     hl  ; из стека - объем диска в кб
185+  DA3D CD E1 DB                 call    sub_hl_de
186+  DA40 EB                       ex      hl, de
187+  DA41
188+  DA41                          ; Печать "XXXX BYTES IN"
189+  DA41                          COLOR   COLOR_INFONUMBER
189+  DA41             >        IF ENABLE_COLOR
189+  DA41 3E E1       >            ld a, COLOR_INFONUMBER
189+  DA43 32 F8 FF    >            ld (IO_COLOR), a
189+  DA46             >        ENDIF
190+  DA46 06 00                    ld      b, 0    ; не дополнять пробелами
191+  DA48 CD 6C C8                 call    bios_printDecWord
192+  DA4B                          COLOR   COLOR_INFOTEXT
192+  DA4B             >        IF ENABLE_COLOR
192+  DA4B 3E F1       >            ld a, COLOR_INFOTEXT
192+  DA4D 32 F8 FF    >            ld (IO_COLOR), a
192+  DA50             >        ENDIF
193+  DA50 21 EA DD                 ld      hl, aKBytesIn
194+  DA53 CD 18 C8                 call    bios_printString
195+  DA56
196+  DA56                          ; Положение курсора
197+  DA56 21 80 2C                 ld      hl, 2C80h
198+  DA59 CD 38 DB                 call    setCursorPosPanel
199+  DA5C
200+  DA5C                          ; Печать "A:"
201+  DA5C                          ; Здесь будет печататься путь к текущей папке...
202+  DA5C                          COLOR   COLOR_INFONUMBER
202+  DA5C             >        IF ENABLE_COLOR
202+  DA5C 3E E1       >            ld a, COLOR_INFONUMBER
202+  DA5E 32 F8 FF    >            ld (IO_COLOR), a
202+  DA61             >        ENDIF
203+  DA61 C3 F5 DA                 jp      printCurDrive
204+  DA64
 93   DA64                  INCLUDE "printFilePanel.inc"
  1+  DA64              ;----------------------------------------------------------------------------
  2+  DA64              ; MXOS NC.COM
  3+  DA64              ; Вывод списка файлов на панель
  4+  DA64              ;
  5+  DA64              ; 2013-12-18 Дизассемблировано vinxru
  6+  DA64              ;----------------------------------------------------------------------------
  7+  DA64
  8+  DA64              printFilePanel:
  9+  DA64                      COLOR   COLOR_BORDER
  9+  DA64             >        IF ENABLE_COLOR
  9+  DA64 3E F1       >            ld a, COLOR_BORDER
  9+  DA66 32 F8 FF    >            ld (IO_COLOR), a
  9+  DA69             >        ENDIF
 10+  DA69
 11+  DA69 21 63 DE             ld      hl, g_filePanel
 12+  DA6C CD 4B DB             call    draw
 13+  DA6F
 14+  DA6F                      COLOR   COLOR_PANELNAME
 14+  DA6F             >        IF ENABLE_COLOR
 14+  DA6F 3E A1       >            ld a, COLOR_PANELNAME
 14+  DA71 32 F8 FF    >            ld (IO_COLOR), a
 14+  DA74             >        ENDIF
 15+  DA74
 16+  DA74                      ; Вывод NAME
 17+  DA74 21 10 11             ld      hl, (P_NAME_X << 8) + P_NAME_Y
 18+  DA77 CD 38 DB             call    setCursorPosPanel
 19+  DA7A 21 7E DC             ld      hl, aNameName
 20+  DA7D CD 18 C8             call    bios_printString
 21+  DA80
 22+  DA80                      COLOR   COLOR_INFOLINE
 22+  DA80             >        IF ENABLE_COLOR
 22+  DA80 3E B1       >            ld a, COLOR_INFOLINE
 22+  DA82 32 F8 FF    >            ld (IO_COLOR), a
 22+  DA85             >        ENDIF
 23+  DA85
 24+  DA85                      ; Вывод буквы диска
 25+  DA85 21 AE DE             ld      hl, panelA_drive
 26+  DA88 CD 16 DB             call    readBytePanel
 27+  DA8B 21 DE 09             ld      hl, (P_DRIVE_LETTER_X << 8) + P_DRIVE_LETTER_Y
 28+  DA8E CD 38 DB             call    setCursorPosPanel
 29+  DA91 CD FA DA             call    printDrive
 30+  DA94
 31+  DA94                      COLOR   COLOR_FILE
 31+  DA94             >        IF ENABLE_COLOR
 31+  DA94 3E B1       >            ld a, COLOR_FILE
 31+  DA96 32 F8 FF    >            ld (IO_COLOR), a
 31+  DA99             >        ENDIF
 32+  DA99
 33+  DA99                      ; Вывод всех файлов
 34+  DA99 21 00 80             ld      hl, FILE_LIST_BUFFER
 35+  DA9C 11 20 06             ld      de, (P_FILE_LIST_X1 << 8) + P_FILE_LIST_Y
 36+  DA9F 0E 00                ld      c,  0
 37+  DAA1
 38+  DAA1              printFilesLoop:
 39+  DAA1                      ; Установка положения курсора
 40+  DAA1 EB                   ex      de, hl
 41+  DAA2 CD 38 DB             call    setCursorPosPanel
 42+  DAA5 EB                   ex      de, hl
 43+  DAA6
 44+  DAA6                      ; Файл существует (первый символ имени - не FF)?
 45+  DAA6 7E                   ld      a, (hl)
 46+  DAA7 3C                   inc     a
 47+  DAA8 CA E1 DA             jp z,   printFilesLoopExit
 48+  DAAB
 49+  DAAB C5                   push    bc
 50+  DAAC D5                   push    de
 51+  DAAD
 52+  DAAD                      ; Печать имени файла
 53+  DAAD E5                   push    hl
 54+  DAAE 06 08                ld      b, DIR_NAME_LENGTH  ; длина имени
 55+  DAB0 CD 22 DB             call    printString2
 56+  DAB3 E1                   pop     hl
 57+  DAB4
 58+  DAB4                      ; Курсор на столбец, где выводятся расширения
 59+  DAB4 7A                   ld      a, d
 60+  DAB5 C6 1B                add     a, (DIR_NAME_LENGTH + 1) * 3
 61+  DAB7 57                   ld      d, a
 62+  DAB8 EB                   ex      de, hl
 63+  DAB9 CD 38 DB             call    setCursorPosPanel
 64+  DABC EB                   ex      de, hl
 65+  DABD
 66+  DABD                      ; Печать расширения имени файла
 67+  DABD E5                   push    hl
 68+  DABE 01 08 00             ld      bc, DIR_NAME_LENGTH  ; длина имени
 69+  DAC1 09                   add     hl, bc    ; перемещаем hl на начло расширения
 70+  DAC2 06 03                ld      b, 3      ; длина расширения
 71+  DAC4 CD 22 DB             call    printString2
 72+  DAC7 E1                   pop     hl
 73+  DAC8
 74+  DAC8 D1                   pop     de
 75+  DAC9
 76+  DAC9                      ; Следующий файл
 77+  DAC9 01 20 00             ld      bc, DIR_DESCR_SIZE
 78+  DACC 09                   add     hl, bc
 79+  DACD
 80+  DACD C1                   pop     bc
 81+  DACE
 82+  DACE                      ; Счетчик
 83+  DACE 0C                   inc     c
 84+  DACF
 85+  DACF                      ; Курсор на следующую строку
 86+  DACF 7B                   ld      a, e
 87+  DAD0 C6 0A                add     a, 10
 88+  DAD2 5F                   ld      e, a
 89+  DAD3
 90+  DAD3                      ; Курсор на следующий столбец
 91+  DAD3 FE D4                cp      P_FILE_LIST_Y_MAX
 92+  DAD5 DA A1 DA             jp c,   printFilesLoop
 93+  DAD8 7A                   ld      a, d
 94+  DAD9 11 20 36             ld      de, (P_FILE_LIST_X2 << 8) + P_FILE_LIST_Y
 95+  DADC FE 14                cp      20
 96+  DADE DA A1 DA             jp c,   printFilesLoop
 97+  DAE1
 98+  DAE1              printFilesLoopExit:
 99+  DAE1                      ; Сохранение кол-ва файлов
100+  DAE1 21 B0 DE             ld      hl, panelA_filesCnt
101+  DAE4 79                   ld      a, c
102+  DAE5 CD 05 DB             call    writeBytePanel
103+  DAE8
104+  DAE8                      ; Если курсор больше максимума
105+  DAE8 21 B2 DE             ld      hl, panelA_curFile
106+  DAEB CD 16 DB             call    readBytePanel
107+  DAEE B9                   cp      c
108+  DAEF D8                   ret c
109+  DAF0
110+  DAF0                      ; То изменить на максимум
111+  DAF0 3D                   dec     a
112+  DAF1 F8                   ret m
113+  DAF2 C3 05 DB             jp      writeBytePanel
114+  DAF5
 94   DAF5                  INCLUDE "printCurDrive.inc"
  1+  DAF5              ;----------------------------------------------------------------------------
  2+  DAF5              ; MXOS NC.COM
  3+  DAF5              ; Вывод текущего накопителя
  4+  DAF5              ;
  5+  DAF5              ; 2013-12-18 Дизассемблировано vinxru
  6+  DAF5              ;----------------------------------------------------------------------------
  7+  DAF5
  8+  DAF5              printCurDrive:    ; Узнаем активное устройство
  9+  DAF5 1E 02                    ld    e, 2
 10+  DAF7 CD 42 C8                 call  bios_fileGetSetDrive
 11+  DAFA
 12+  DAFA              printDrive: ; Выводим его букву на экран
 13+  DAFA C6 41                    add   a, 'A'
 14+  DAFC 4F                       ld    c, a
 15+  DAFD CD 09 C8                 call  bios_printChar
 16+  DB00
 17+  DB00                          ; Выводим ':'
 18+  DB00 0E 3A                    ld    c, ':'
 19+  DB02 C3 09 C8                 jp    bios_printChar
 20+  DB05
 95   DB05                  INCLUDE "rwBytePanel.inc"
  1+  DB05              ;----------------------------------------------------------------------------
  2+  DB05              ; MXOS NC.COM
  3+  DB05              ; Реализация индексной адресации
  4+  DB05              ;
  5+  DB05              ; 2013-12-18 Дизассемблировано vinxru
  6+  DB05              ;----------------------------------------------------------------------------
  7+  DB05
  8+  DB05              ; [hl + activePanel] = a
  9+  DB05
 10+  DB05 C5           writeBytePanel:   push  bc
 11+  DB06 E5                       push  hl
 12+  DB07 F5                       push  af
 13+  DB08 4F                       ld    c, a
 14+  DB09 3A AB DE                 ld    a, (activePanel)
 15+  DB0C A7                       and   a
 16+  DB0D CA 11 DB                 jp z, loc_D97E
 17+  DB10 23                       inc   hl
 18+  DB11 71           loc_D97E:   ld  (hl), c
 19+  DB12 F1                       pop   af
 20+  DB13 E1                       pop   hl
 21+  DB14 C1                       pop   bc
 22+  DB15 C9                       ret
 23+  DB16
 24+  DB16              ; a = [hl + activePanel]
 25+  DB16
 26+  DB16 E5           readBytePanel:    push  hl
 27+  DB17 3A AB DE                 ld    a, (activePanel)
 28+  DB1A A7                       and   a
 29+  DB1B CA 1F DB                 jp z, loc_D98C
 30+  DB1E 23                       inc   hl
 31+  DB1F 7E           loc_D98C:   ld  a, (hl)
 32+  DB20 E1                       pop   hl
 33+  DB21 C9                       ret
 34+  DB22
 96   DB22                  INCLUDE "printFileName.inc"
  1+  DB22              ;----------------------------------------------------------------------------
  2+  DB22              ; MXOS NC.COM
  3+  DB22              ; Вывод имени файла в обычном виде с точкой
  4+  DB22              ;
  5+  DB22              ; вход:
  6+  DB22              ;   hl - адрес дескриптора файла
  7+  DB22              ;
  8+  DB22              ; выход:
  9+  DB22              ;   hl - указывает на следующее за расширением поле в дескрипторе файла
 10+  DB22              ;
 11+  DB22              ; 2022-01-31 SpaceEngineer
 12+  DB22              ;----------------------------------------------------------------------------
 13+  DB22
 14+  DB22              ;printFileName:
 15+  DB22              ;        push  bc
 16+  DB22              ;        ld    c, ' '               ; прерываем печать имени по пробелу
 17+  DB22              ;        ld    b, DIR_NAME_LENGTH   ; длина имени
 18+  DB22              ;        call  printString2
 19+  DB22              ;        ld    c, '.'
 20+  DB22              ;        call  bios_printChar       ; печатаем точку
 21+  DB22              ;        ld    b, 3                 ; длина расширения
 22+  DB22              ;        call  printString2
 23+  DB22              ;        pop   bc
 24+  DB22              ;        ret
 25+  DB22              ;
 26+  DB22
 97   DB22                  INCLUDE "printString2.inc"
  1+  DB22              ;----------------------------------------------------------------------------
  2+  DB22              ; MXOS NC.COM
  3+  DB22              ; Вывод строки по адресу hl длиной b или до терминатора.
  4+  DB22              ; Выводит только реальные символы, чтобы не портить экран при
  5+  DB22              ; неотформатированном или повреждённом диске.
  6+  DB22              ;
  7+  DB22              ; вход:
  8+  DB22              ;   hl - адрес строки
  9+  DB22              ;   b  - макс. длина печати
 10+  DB22              ;   c  - терминатор
 11+  DB22              ;
 12+  DB22              ; 2022-01-31 SpaceEngineer
 13+  DB22              ;----------------------------------------------------------------------------
 14+  DB22
 15+  DB22              printString2:
 16+  DB22 F5               push    af
 17+  DB23 D5               push    de
 18+  DB24
 19+  DB24              printString2loop:
 20+  DB24 7E               ld      a, (hl)
 21+  DB25 B9               cp      c
 22+  DB26 DA 35 DB         jp c,   printString2exit
 23+  DB29
 24+  DB29 C5               push    bc
 25+  DB2A E5               push    hl
 26+  DB2B
 27+  DB2B CD 69 C8         call    bios_printCharReal
 28+  DB2E
 29+  DB2E E1               pop     hl
 30+  DB2F C1               pop     bc
 31+  DB30
 32+  DB30 23               inc     hl
 33+  DB31 05               dec     b
 34+  DB32 C2 24 DB         jp nz,  printString2loop
 35+  DB35
 36+  DB35              printString2exit:
 37+  DB35 D1               pop     de
 38+  DB36 F1               pop     af
 39+  DB37 C9               ret
 40+  DB38
 98   DB38                  INCLUDE "setCursorPosPanel.inc"
  1+  DB38              ;----------------------------------------------------------------------------
  2+  DB38              ; MXOS NC.COM
  3+  DB38              ; Установка положения курсора с учетом активной панели
  4+  DB38              ; вход:
  5+  DB38              ;   hl - координаты курсора на панели
  6+  DB38              ;
  7+  DB38              ; 2013-12-18 Дизассемблировано vinxru
  8+  DB38              ;----------------------------------------------------------------------------
  9+  DB38
 10+  DB38              setCursorPosPanel:
 11+  DB38                          ; Сохраняем регистры
 12+  DB38 E5                       push  hl
 13+  DB39 F5                       push  af
 14+  DB3A
 15+  DB3A 3A AB DE                 ld    a, (activePanel)
 16+  DB3D A7                       and   a
 17+  DB3E CA 43 DB                 jp z, loc_D9BA
 18+  DB41 3E 60                    ld    a, 96       ; Половина экрана
 19+  DB43 84           loc_D9BA:   add   a, h
 20+  DB44 67                       ld    h, a
 21+  DB45 22 FC 8F                 ld    (bios_vars.cursorY), hl
 22+  DB48
 23+  DB48                          ; Восстанавливаем регистры
 24+  DB48 F1                       pop   af
 25+  DB49 E1                       pop   hl
 26+  DB4A C9                       ret
 27+  DB4B
 99   DB4B                  INCLUDE "draw.inc"
  1+  DB4B              ;----------------------------------------------------------------------------
  2+  DB4B              ; MXOS NC.COM
  3+  DB4B              ; Рисование окошек
  4+  DB4B              ;
  5+  DB4B              ; 2013-12-18 Дизассемблировано vinxru
  6+  DB4B              ;----------------------------------------------------------------------------
  7+  DB4B
  8+  DB4B              draw:       ; Читаем 5 байт из hl в a, hl, c, b.
  9+  DB4B                          ; При этом de = hl+5
 10+  DB4B 7E                       ld  a, (hl)
 11+  DB4C 23                       inc   hl
 12+  DB4D 5E                       ld  e, (hl)
 13+  DB4E 23                       inc   hl
 14+  DB4F 56                       ld  d, (hl)
 15+  DB50 23                       inc   hl
 16+  DB51 4E                       ld  c, (hl)
 17+  DB52 23                       inc   hl
 18+  DB53 46                       ld  b, (hl)
 19+  DB54 23                       inc   hl
 20+  DB55 EB                       ex    de, hl
 21+  DB56
 22+  DB56                          ; Если a=0 (первый байт), то выйти
 23+  DB56 A7                       and   a
 24+  DB57 C8                       ret Z
 25+  DB58
 26+  DB58                          ; Если не установлен 7-ой бит и активная панель правая, то X += 192
 27+  DB58 FA 5E DB                 jp M, draw_0
 28+  DB5B CD 8A DB                 call  activePanelPos
 29+  DB5E              draw_0:
 30+  DB5E
 31+  DB5E                          ; Если a&0xF==3, то заполнить c байт памяти байтом b
 32+  DB5E E6 0F                    and   0Fh
 33+  DB60 FE 03                    cp    3
 34+  DB62 CA 71 DB                 jp z, draw3
 35+  DB65
 36+  DB65                          ; Если a&0xF==1, то нарисовать веритикальную линию
 37+  DB65                          ; b-первый байт, c-средняя длина, *de++ - последний байт
 38+  DB65 FE 01                    cp    1
 39+  DB67 CA 78 DB                 jp z, draw1
 40+  DB6A
 41+  DB6A                          ; Нарисовать окно
 42+  DB6A CD 98 DB                 call  draw_window
 43+  DB6D
 44+  DB6D              draw_next:  ; hl=de и следующий цикл
 45+  DB6D EB                       ex    de, hl
 46+  DB6E C3 4B DB                 jp    draw
 47+  DB71
 48+  DB71              ; ---------------------------------------------------------------------------
 49+  DB71              ; Заполнить c байт памяти байтом b
 50+  DB71
 51+  DB71 78           draw3:            ld    a, b
 52+  DB72 CD DA DB                 call  memset_hl_a_c
 53+  DB75 C3 6D DB                 jp    draw_next
 54+  DB78
 55+  DB78              ; ---------------------------------------------------------------------------
 56+  DB78              ; Линия hl-адрес, b-первый байт, c-средняя длина, *de++ - последний байт
 57+  DB78
 58+  DB78              draw1:            ; *hl++ |= b
 59+  DB78 78                       ld    a, b
 60+  DB79 B6                       or    (hl)
 61+  DB7A 77                       ld  (hl), a
 62+  DB7B 24                       inc   h
 63+  DB7C
 64+  DB7C              loc_D9F3:
 65+  DB7C 36 FF                ld  (hl), 0FFh
 66+  DB7E 24                       inc   h
 67+  DB7F 0D                       dec   c
 68+  DB80 C2 7C DB                 jp nz,      loc_D9F3
 69+  DB83
 70+  DB83                          ; hl |= *de++
 71+  DB83 1A                       ld    a, (de)
 72+  DB84 13                       inc   de
 73+  DB85 B6                       or    (hl)
 74+  DB86 77                       ld  (hl), a
 75+  DB87
 76+  DB87 C3 6D DB                 jp    draw_next
 77+  DB8A
 78+  DB8A              ; ---------------------------------------------------------------------------
 79+  DB8A              ; Если активная правая панель, сдвинуть адрес на пол экрана
 80+  DB8A
 81+  DB8A              activePanelPos:
 82+  DB8A F5                   push      af
 83+  DB8B 3A AB DE                 ld    a, (activePanel)
 84+  DB8E A7                       and   a
 85+  DB8F CA 94 DB                 jp z, loc_DA0B
 86+  DB92 3E 18                    ld    a, 24
 87+  DB94 84           loc_DA0B:   add   a, h
 88+  DB95 67                       ld    h, a
 89+  DB96 F1                       pop   af
 90+  DB97 C9                       ret
 91+  DB98
 92+  DB98              ; ---------------------------------------------------------------------------
 93+  DB98              ; Рисуем окно (b=ширина-2, с=высота-6)
 94+  DB98
 95+  DB98              draw_window:      ; Если h - 90h + b >= 0x2F, то есть X + b + 2 > ширина экрана, то выйти
 96+  DB98 7C                       ld    a, h
 97+  DB99 D6 90                    sub   90h
 98+  DB9B 80                       add   a, b
 99+  DB9C FE 2F                    cp    2Fh
100+  DB9E D0                       ret nc
101+  DB9F
102+  DB9F                          ; Сохранить регистры
103+  DB9F E5                       push  hl
104+  DBA0 C5                       push  bc
105+  DBA1 D5                       push  de
106+  DBA2
107+  DBA2                          ; Линия
108+  DBA2 11 4E DE                 ld    de, v_window
109+  DBA5 CD BC DB                 call  line313
110+  DBA8
111+  DBA8                          ; Повтор b раз
112+  DBA8 D5           draw_window_2:    push  de
113+  DBA9 CD BC DB                 call  line313
114+  DBAC 05                       dec   b
115+  DBAD CA B4 DB                 jp z, draw_window_3
116+  DBB0 D1                       pop   de
117+  DBB1 C3 A8 DB                 jp    draw_window_2
118+  DBB4
119+  DBB4              ; ---------------------------------------------------------------------------
120+  DBB4
121+  DBB4              draw_window_3:
122+  DBB4 F1                   pop af
123+  DBB5
124+  DBB5                          ; Линия
125+  DBB5 CD BC DB                 call  line313
126+  DBB8
127+  DBB8                          ; Восстановить регистры и выйти
128+  DBB8 D1                       pop   de
129+  DBB9 C1                       pop   bc
130+  DBBA E1                       pop   hl
131+  DBBB C9                       ret
132+  DBBC
133+  DBBC              ; ---------------------------------------------------------------------------
134+  DBBC              ; Вертикальная линия. Задается три верхних байта, заполнитель и три нижних
135+  DBBC
136+  DBBC              line313:    ; Сохраняем регистры
137+  DBBC C5                       push  bc
138+  DBBD E5                       push  hl
139+  DBBE
140+  DBBE                          ; Копируем 3 байта (сверху-вниз)
141+  DBBE CD CD DB                 call  memcpy_hl_de_3
142+  DBC1
143+  DBC1                          ; 4 ый байт повторяем С-раз (сверху-вниз)
144+  DBC1 1A                       ld    a, (de)
145+  DBC2 CD DA DB                 call  memset_hl_a_c
146+  DBC5 13                       inc   de
147+  DBC6
148+  DBC6                          ; Копируем 3 байта (сверху-вниз)
149+  DBC6 CD CD DB                 call  memcpy_hl_de_3
150+  DBC9
151+  DBC9                          ; Восстаналиваем регистры
152+  DBC9 E1                       pop   hl
153+  DBCA C1                       pop   bc
154+  DBCB
155+  DBCB                          ; Вправо
156+  DBCB 24                       inc   h
157+  DBCC C9                       ret
158+  DBCD
100   DBCD                  INCLUDE "tools.inc"
  1+  DBCD              ;----------------------------------------------------------------------------
  2+  DBCD              ; MXOS NC.COM
  3+  DBCD              ; Копирвоание 3-х байт из адреса de в адрес hl
  4+  DBCD              ;
  5+  DBCD              ; 2013-12-18 Дизассемблировано vinxru
  6+  DBCD              ;----------------------------------------------------------------------------
  7+  DBCD
  8+  DBCD              memcpy_hl_de_3:
  9+  DBCD 1A                   ld    a, (de)
 10+  DBCE 77                   ld    (hl), a
 11+  DBCF 23                   inc   hl
 12+  DBD0 13                   inc   de
 13+  DBD1
 14+  DBD1 1A                   ld    a, (de)
 15+  DBD2 77                   ld    (hl), a
 16+  DBD3 23                   inc   hl
 17+  DBD4 13                   inc   de
 18+  DBD5
 19+  DBD5 1A                   ld    a, (de)
 20+  DBD6 77                   ld    (hl), a
 21+  DBD7 23                   inc   hl
 22+  DBD8 13                   inc   de
 23+  DBD9
 24+  DBD9 C9                   ret
 25+  DBDA
 26+  DBDA              ;----------------------------------------------------------------------------
 27+  DBDA              ; MXOS NC.COM
 28+  DBDA              ; Заполнение памяти по адресу hl байтом a длинной c
 29+  DBDA              ;
 30+  DBDA              ; 2013-12-18 Дизассемблировано vinxru
 31+  DBDA              ;----------------------------------------------------------------------------
 32+  DBDA
 33+  DBDA              memset_hl_a_c:
 34+  DBDA 77                   ld      (hl), a
 35+  DBDB 23                   inc     hl
 36+  DBDC 0D                   dec     c
 37+  DBDD C2 DA DB             jp nz,  memset_hl_a_c
 38+  DBE0 C9                   ret
 39+  DBE1
 40+  DBE1              ;----------------------------------------------------------------------------
 41+  DBE1              ; MXOS NC.COM
 42+  DBE1              ; hl = hl - de
 43+  DBE1              ;
 44+  DBE1              ; SpaceEngineer
 45+  DBE1              ;----------------------------------------------------------------------------
 46+  DBE1
 47+  DBE1              sub_hl_de:
 48+  DBE1 7D                   ld    a, l
 49+  DBE2 93                   sub   e
 50+  DBE3 6F                   ld    l, a
 51+  DBE4 7C                   ld    a, h
 52+  DBE5 9A                   sbc   d
 53+  DBE6 67                   ld    h, a
 54+  DBE7 C9                   ret
 55+  DBE8
 56+  DBE8              ;----------------------------------------------------------------------------
 57+  DBE8              ; MXOS NC.COM
 58+  DBE8              ; hl = hl / 2
 59+  DBE8              ;
 60+  DBE8              ; SpaceEngineer
 61+  DBE8              ;----------------------------------------------------------------------------
 62+  DBE8
 63+  DBE8              div_hl_2:
 64+  DBE8 7C                   ld  a, h
 65+  DBE9 B7                   or  a    ; сброс флага c
 66+  DBEA 1F                   rra
 67+  DBEB 67                   ld  h, a
 68+  DBEC 7D                   ld  a, l
 69+  DBED 1F                   rra
 70+  DBEE 6F                   ld  l, a
 71+  DBEF C9                   ret
 72+  DBF0
101   DBF0                  INCLUDE "compactName.inc"
  1+  DBF0              ;----------------------------------------------------------------------------
  2+  DBF0              ; MXOS NC.COM
  3+  DBF0              ; Убрать из имени пробелы
  4+  DBF0              ;
  5+  DBF0              ; вход:
  6+  DBF0              ;   hl - откуда
  7+  DBF0              ;   de - куда
  8+  DBF0              ;
  9+  DBF0              ; сохраняемые регистры:
 10+  DBF0              ;   hl, bc
 11+  DBF0              ;
 12+  DBF0              ; 2013-12-18 Дизассемблировано vinxru
 13+  DBF0              ;----------------------------------------------------------------------------
 14+  DBF0
 15+  DBF0              compactName:
 16+  DBF0                          ; Сохраняем регистры
 17+  DBF0 E5                       push    hl
 18+  DBF1 C5                       push    bc
 19+  DBF2
 20+  DBF2                          ; Копируем до пробела, но не более DIR_NAME_LENGTH букв
 21+  DBF2 01 08 00                 ld      bc, DIR_NAME_LENGTH
 22+  DBF5 7E           compactName_1:      ld  a, (hl)
 23+  DBF6 FE 20                    cp      ' '
 24+  DBF8 CA 02 DC                 jp z,   compactName_2
 25+  DBFB 12                       ld      (de),a
 26+  DBFC 23                       inc     hl
 27+  DBFD 13                       inc     de
 28+  DBFE 0D                       dec     c
 29+  DBFF C2 F5 DB                 jp nz,  compactName_1
 30+  DC02
 31+  DC02              compactName_2:
 32+  DC02                          ; Пропущенные символы исходной строки
 33+  DC02 09                       add     hl, bc
 34+  DC03
 35+  DC03                          ; Точка
 36+  DC03 3E 2E                    ld      a, '.'
 37+  DC05 12                       ld      (de),a
 38+  DC06 13                       inc     de
 39+  DC07
 40+  DC07                          ; Копируем до пробела, но не более 3 букв
 41+  DC07 0E 03                    ld      c, 3
 42+  DC09              compactName_3:
 43+  DC09 7E                       ld      a, (hl)
 44+  DC0A FE 20                    cp      ' '
 45+  DC0C CA 16 DC                 jp z,   compactName_4
 46+  DC0F 12                       ld      (de),a
 47+  DC10 23                       inc     hl
 48+  DC11 13                       inc     de
 49+  DC12 0D                       dec     c
 50+  DC13 C2 09 DC                 jp nz,  compactName_3
 51+  DC16
 52+  DC16              compactName_4:
 53+  DC16 EB                       ex      de, hl
 54+  DC17 F5                       push    af
 55+  DC18
 56+  DC18                          ; Если последний символ '.', то удаляем его
 57+  DC18 2B                       dec     hl
 58+  DC19 7E                       ld      a, (hl)
 59+  DC1A FE 2E                    cp      '.'
 60+  DC1C CA 20 DC                 jp z,   compactName_5
 61+  DC1F 23                       inc     hl
 62+  DC20
 63+  DC20              compactName_5:
 64+  DC20                          ; Добавляем пробел и конец строки
 65+  DC20 36 20                    ld      (hl), ' '
 66+  DC22 23                       inc     hl
 67+  DC23 36 0D                    ld      (hl), 0Dh
 68+  DC25 23                       inc     hl
 69+  DC26 36 00                    ld      (hl), 0
 70+  DC28
 71+  DC28                          ; Результат в de
 72+  DC28 EB                       ex    de, hl
 73+  DC29
 74+  DC29                          ; Восстаналиваем регистры и выходим
 75+  DC29 F1                       pop   af
 76+  DC2A C1                       pop   bc
 77+  DC2B E1                       pop   hl
 78+  DC2C C9                       ret
 79+  DC2D
102   DC2D                  INCLUDE "input.inc"
  1+  DC2D              ;----------------------------------------------------------------------------
  2+  DC2D              ; MXOS NC.COM
  3+  DC2D              ; Ввод строки
  4+  DC2D              ;
  5+  DC2D              ; 2013-12-18 Дизассемблировано vinxru
  6+  DC2D              ;----------------------------------------------------------------------------
  7+  DC2D
  8+  DC2D              input:      ; Вывод строки
  9+  DC2D E5                       push    hl
 10+  DC2E 21 19 DF                 ld      hl, nc_vars.input
 11+  DC31 CD 96 D2                 call    printStringInv
 12+  DC34 E1                       pop     hl
 13+  DC35
 14+  DC35                          ; Включаем инверсию
 15+  DC35 3E 01                    ld      a, 1
 16+  DC37 32 FA 8F                 ld      (bios_vars.inverse),a
 17+  DC3A
 18+  DC3A              input_loop: ; Ввод символа
 19+  DC3A CD 03 C8                 call  bios_getch
 20+  DC3D
 21+  DC3D                          ; Enter или ESC
 22+  DC3D FE 0D                    cp      0Dh
 23+  DC3F CA 72 DC                 jp z,   input_exit
 24+  DC42 FE 1B                    cp      1Bh
 25+  DC44 CA 72 DC                 jp z,   input_exit
 26+  DC47
 27+  DC47                          ; Если служебная клавиша или пробел, то пропускаем
 28+  DC47 FE 21                    cp      21h
 29+  DC49 DA 3A DC                 jp c,   input_loop
 30+  DC4C
 31+  DC4C                          ; Сохраняем для вывода
 32+  DC4C 4F                       ld      c, a
 33+  DC4D
 34+  DC4D                          ; Помещаем символ в буфер
 35+  DC4D 12                       ld      (de),a
 36+  DC4E
 37+  DC4E                          ; Удаление
 38+  DC4E FE 7F                    cp      7Fh
 39+  DC50 CA 60 DC                 jp z,   input_bkspc
 40+  DC53
 41+  DC53                          ; Если переполнение
 42+  DC53 3E 30                    ld      a, (nc_vars.input + P_INPUT_WIDTH) & 0FFh  ; a = младший байт адреса пследнего байта буфера
 43+  DC55 BB                       cp      e
 44+  DC56 CA 3A DC                 jp z,   input_loop
 45+  DC59
 46+  DC59                          ; Вывод символа на экран
 47+  DC59 CD 09 C8                 call    bios_printChar
 48+  DC5C
 49+  DC5C                          ; Увеличение длины строки
 50+  DC5C 13                       inc     de
 51+  DC5D
 52+  DC5D C3 3A DC                 jp      input_loop
 53+  DC60
 54+  DC60              ; ---------------------------------------------------------------------------
 55+  DC60
 56+  DC60              input_bkspc:
 57+  DC60                          ; Если это начало строки, выходим
 58+  DC60 3E 19                    ld      a, nc_vars.input & 0FFh
 59+  DC62 BB                       cp      e
 60+  DC63 CA 3A DC                 jp z,   input_loop
 61+  DC66
 62+  DC66                          ; Уменьшаем длину строки
 63+  DC66 1D                       dec     e
 64+  DC67
 65+  DC67                          ; Стираем символ с экрана
 66+  DC67 E5                       push    hl
 67+  DC68 21 40 DD                 ld      hl, asc_DC17
 68+  DC6B CD 18 C8                 call    bios_printString
 69+  DC6E E1                       pop     hl
 70+  DC6F
 71+  DC6F C3 3A DC                 jp      input_loop
 72+  DC72
 73+  DC72              ; ---------------------------------------------------------------------------
 74+  DC72
 75+  DC72              input_exit:
 76+  DC72                          ; Сохраняем ESC или Enter для выхода
 77+  DC72 4F                       ld      c, a
 78+  DC73
 79+  DC73                          ; Записываем в конец строки 0Dh, 0
 80+  DC73 EB                       ex      de, hl
 81+  DC74 36 0D                    ld      (hl), 0Dh
 82+  DC76 23                       inc     hl
 83+  DC77 AF                       xor     a
 84+  DC78 77                       ld      (hl), a
 85+  DC79
 86+  DC79                          ; Восстанавливаем инверсию
 87+  DC79 32 FA 8F                 ld      (bios_vars.inverse),a
 88+  DC7C
 89+  DC7C                          ; Выход
 90+  DC7C 79                       ld      a, c
 91+  DC7D C9                       ret
 92+  DC7E
103   DC7E
104   DC7E              ;---------------------------------------------------------------------------
105   DC7E              ; Константы и переменные
106   DC7E              ;---------------------------------------------------------------------------
107   DC7E
108   DC7E 4E 41 4D 45  aNameName:          DB "NAME",18h,18h,18h,18h,18h,18h,18h,18h,18h,18h,18h,18h,"NAME",0
108   DC82 18 18 18 18
108   DC86 18 18 18 18
108   DC8A 18 18 18 18
108   DC8E 4E 41 4D 45
108   DC92 00
109   DC93                  IF SHOW_F9
110   DC93 ~            aF1LeftF2RighF3:    DB "F1 L F2 R F3 INF F4 EDIT F5 COPY F6 RMOV F7 LOAD F8 DEL F9 SAVE",0
111   DC93                  ELSE
112   DC93 46 31 20 4C  aF1LeftF2RighF3:    DB "F1 LEFT F2 RIGH F3 INFO F4 EDIT F5 COPY F6 RMOV F7 LOAD F8 DEL",0
112   DC97 45 46 54 20
112   DC9B 46 32 20 52
112   DC9F 49 47 48 20
112   DCA3 46 33 20 49
112   DCA7 4E 46 4F 20
112   DCAB 46 34 20 45
112   DCAF 44 49 54 20
112   DCB3 46 35 20 43
112   DCB7 4F 50 59 20
112   DCBB 46 36 20 52
112   DCBF 4D 4F 56 20
112   DCC3 46 37 20 4C
112   DCC7 4F 41 44 20
112   DCCB 46 38 20 44
112   DCCF 45 4C 00
113   DCD2                  ENDIF
114   DCD2 43 4F 4D 4D  aCommanderVer:      DB "COMMANDER VERSION 1.7",0
114   DCD6 41 4E 44 45
114   DCDA 52 20 56 45
114   DCDE 52 53 49 4F
114   DCE2 4E 20 31 2E
114   DCE6 37 00
115   DCE8 28 43 29 20  aCopyright:         DB "(C) OMSK 1992",0
115   DCEC 4F 4D 53 4B
115   DCF0 20 31 39 39
115   DCF4 32 00
116   DCF6 46 49 4C 45  aFileIsReanOnly:    DB "FILE IS READ ONLY!",0
116   DCFA 20 49 53 20
116   DCFE 52 45 41 44
116   DD02 20 4F 4E 4C
116   DD06 59 21 00
117   DD09 41 20 20 20  aABCD:              DB "A   B   C   D",0
117   DD0D 42 20 20 20
117   DD11 43 20 20 20
117   DD15 44 00
118   DD17 45 20 20 20  aEFGH:              DB "E   F   G   H",0
118   DD1B 46 20 20 20
118   DD1F 47 20 20 20
118   DD23 48 00
119   DD25 43 48 4F 4F  aChooseDrive:       DB "CHOOSE DRIVE:",0
119   DD29 53 45 20 44
119   DD2D 52 49 56 45
119   DD31 3A 00
120   DD33 44 45 4C 45  aDeleteFrom:        DB "DELETE FROM ",0
120   DD37 54 45 20 46
120   DD3B 52 4F 4D 20
120   DD3F 00
121   DD40 08 20 08 00  asc_DC17:           DB 8, ' ',8, 0
122   DD44 43 4F 50 59  aCopyFromTo:        DB "COPY FROM    TO",8,8,8,8,8, 0
122   DD48 20 46 52 4F
122   DD4C 4D 20 20 20
122   DD50 20 54 4F 08
122   DD54 08 08 08 08
122   DD58 00
123   DD59 43 41 4E 27  aCantCreateFile:    DB "CAN",39,"T CREATE FILE!",0
123   DD5D 54 20 43 52
123   DD61 45 41 54 45
123   DD65 20 46 49 4C
123   DD69 45 21 00
124   DD6C 52 45 4E 41  aRemoveFromTo:      DB "RENAME/MOVE FROM    TO",8,8,8,8,8, 0
124   DD70 4D 45 2F 4D
124   DD74 4F 56 45 20
124   DD78 46 52 4F 4D
124   DD7C 20 20 20 20
124   DD80 54 4F 08 08
124   DD84 08 08 08 00
125   DD88 18 4B 42 20  aKBytesExtMemory:   DB 18h,"KB EXTENDED MEMORY",0   ; здесь и далее 18h вместо пробела, чтобы не портить цвет предыдущего символа
125   DD8C 45 58 54 45
125   DD90 4E 44 45 44
125   DD94 20 4D 45 4D
125   DD98 4F 52 59 00
126   DD9C 18 42 59 54  aKBytesMemory:      DB 18h,"BYTES MEMORY",0
126   DDA0 45 53 20 4D
126   DDA4 45 4D 4F 52
126   DDA8 59 00
127   DDAA 18 42 59 54  aKBytesFree:        DB 18h,"BYTES FREE",0
127   DDAE 45 53 20 46
127   DDB2 52 45 45 00
128   DDB6 18 4B 42 20  aKBytesTotalOnDrv:  DB 18h,"KB TOTAL ON DRIVE ",0
128   DDBA 54 4F 54 41
128   DDBE 4C 20 4F 4E
128   DDC2 20 44 52 49
128   DDC6 56 45 20 00
129   DDCA 18 4B 42 20  aKBytesFreeOnDrv:   DB 18h,"KB FREE  ON DRIVE ",0
129   DDCE 46 52 45 45
129   DDD2 20 20 4F 4E
129   DDD6 20 44 52 49
129   DDDA 56 45 20 00
130   DDDE 18 46 49 4C  aFilesUse:          DB 18h,"FILES USE ",0
130   DDE2 45 53 20 55
130   DDE6 53 45 20 00
131   DDEA 18 4B 42 20  aKBytesIn:          DB 18h,"KB IN ",0
131   DDEE 49 4E 20 00
132   DDF2 53 41 56 45  aSaveFromToTape:    DB "SAVE FROM    TO TAPE",8,8,8,8,8,8,8,8,8,8, 0
132   DDF6 20 46 52 4F
132   DDFA 4D 20 20 20
132   DDFE 20 54 4F 20
132   DE02 54 41 50 45
132   DE06 08 08 08 08
132   DE0A 08 08 08 08
132   DE0E 08 08 00
133   DE11 53 41 56 49  aSavingToTape:      DB "SAVING TO TAPE",0
133   DE15 4E 47 20 54
133   DE19 4F 20 54 41
133   DE1D 50 45 00
134   DE20 4C 4F 41 44  aLoadingFromTapeTo: DB "LOADING FROM TAPE TO ",0
134   DE24 49 4E 47 20
134   DE28 46 52 4F 4D
134   DE2C 20 54 41 50
134   DE30 45 20 54 4F
134   DE34 20 00
135   DE36 45 52 52 4F  aErrorLoadingTa:    DB "ERROR LOADING FROM TAPE",0
135   DE3A 52 20 4C 4F
135   DE3E 41 44 49 4E
135   DE42 47 20 46 52
135   DE46 4F 4D 20 54
135   DE4A 41 50 45 00
136   DE4E
137   DE4E              ; Описания окон
138   DE4E
139   DE4E 7F           v_window:   DB 01111111b            ; Верхний левый угол
140   DE4F 40                       DB 01000000b
141   DE50 5F                       DB 01011111b
142   DE51 50                       DB 01010000b            ; Левый край
143   DE52 5F                       DB 01011111b            ; Нижний левый угол
144   DE53 40                       DB 01000000b
145   DE54 7F                       DB 01111111b
146   DE55
147   DE55 FF                       DB 11111111b            ; Верх окна
148   DE56 00                       DB 00000000b
149   DE57 FF                       DB 11111111b
150   DE58
151   DE58 00                       DB 00000000b            ; Содержимое окна
152   DE59
153   DE59 FF                       DB 11111111b            ; Низ окна
154   DE5A 00                       DB 00000000b
155   DE5B FF                       DB 11111111b
156   DE5C
157   DE5C FE                       DB 11111110b            ; Правый верхний угол
158   DE5D 02                       DB 00000010b
159   DE5E FA                       DB 11111010b
160   DE5F 0A                       DB 00001010b            ; Правая граница
161   DE60 FA                       DB 11111010b            ; Правый нижний угол
162   DE61 02                       DB 00000010b
163   DE62 FE                       DB 11111110b
164   DE63
165   DE63                          MACRO G_WINDOW A,X,Y,W,H
166   DE63 ~                            DB A|2, Y, 90h+(X>>3), H-6, (W>>3)-2
167   DE63                          ENDM
168   DE63
169   DE63                          MACRO G_LINE A,X,Y,W
170   DE63 ~                            DB A|1, Y, 90h+(X>>3), (((X&7)+W+7)>>3)-2, 0FFh>>(X&7), (0FF00h>>((W+X)&7)) & 0FFh
171   DE63                          ENDM
172   DE63
173   DE63                          MACRO G_VLINE A,X,Y,H
174   DE63 ~                            DB A|3, Y, 90h+(X>>3), H, 80h>>(X&7)
175   DE63                          ENDM
176   DE63
177   DE63              g_filePanel:
178   DE63                          G_WINDOW 0, 0, 0, 192, 230        ; 2, 0, 90h, 0E0h, 16h
178   DE63 02 00 90 E0 >                DB 0|2, 0, 90h+(0>>3), 230-6, (192>>3)-2
178   DE67 16          >
179   DE68                          G_LINE   0, 4, 208, 184           ; 1, 0D0h, 90h, 16h, 0Fh, 0F0h
179   DE68 01 D0 90 16 >                DB 0|1, 208, 90h+(4>>3), (((4&7)+184+7)>>3)-2, 0FFh>>(4&7), (0FF00h>>((184+4)&7)) & 0FFh
179   DE6C 0F F0       >
180   DE6E                          G_VLINE  0, 96, 3, 205            ; 3, ?, 9Ch, 0CDh, 80h
180   DE6E 03 03 9C CD >                DB 0|3, 3, 90h+(96>>3), 205, 80h>>(96&7)
180   DE72 80          >
181   DE73 00                       DB 0
182   DE74
183   DE74              g_infoPanel:
184   DE74                          G_WINDOW 0, 0, 0, 192, 230        ; 2, 0, 90h, 0E0h, 16h
184   DE74 02 00 90 E0 >                DB 0|2, 0, 90h+(0>>3), 230-6, (192>>3)-2
184   DE78 16          >
185   DE79                          G_LINE   0, 4, 31, 184            ; 1, 1Fh, 90h, 16h, 0Fh, 0F0h
185   DE79 01 1F 90 16 >                DB 0|1, 31, 90h+(4>>3), (((4&7)+184+7)>>3)-2, 0FFh>>(4&7), (0FF00h>>((184+4)&7)) & 0FFh
185   DE7D 0F F0       >
186   DE7F                          G_LINE   0, 4, 136, 184           ; 1, 70h, 90h, 16h, 0Fh, 0F0h
186   DE7F 01 88 90 16 >                DB 0|1, 136, 90h+(4>>3), (((4&7)+184+7)>>3)-2, 0FFh>>(4&7), (0FF00h>>((184+4)&7)) & 0FFh
186   DE83 0F F0       >
187   DE85 00                       DB 0
188   DE86
189   DE86              g_chooseDrive:
190   DE86                          G_WINDOW 0, 40, 85, 112, 50       ; 2, 55h, 95h, 02Ch, 0Ch
190   DE86 02 55 95 2C >                DB 0|2, 85, 90h+(40>>3), 50-6, (112>>3)-2
190   DE8A 0C          >
191   DE8B                          G_LINE   0, 44, 103, 104          ; 1, 67h, 95h, 0Ch, 0Fh, 0F0h
191   DE8B 01 67 95 0C >                DB 0|1, 103, 90h+(44>>3), (((44&7)+104+7)>>3)-2, 0FFh>>(44&7), (0FF00h>>((104+44)&7)) & 0FFh
191   DE8F 0F F0       >
192   DE91 00                       DB 0
193   DE92
194   DE92              g_window1:
195   DE92                          G_WINDOW 80h, 112, 80, 160, 37    ; 82h, 50h, 9Eh, 1Fh, 12h
195   DE92 82 50 9E 1F >                DB 80h|2, 80, 90h+(112>>3), 37-6, (160>>3)-2
195   DE96 12          >
196   DE97                          G_LINE   80h, 116, 98, 152        ; 81h, 62h, 9Eh, 12h, 0Fh, 0F0h
196   DE97 81 62 9E 12 >                DB 80h|1, 98, 90h+(116>>3), (((116&7)+152+7)>>3)-2, 0FFh>>(116&7), (0FF00h>>((152+116)&7)) & 0FFh
196   DE9B 0F F0       >
197   DE9D 00                       DB 0
198   DE9E
199   DE9E              g_window2:
200   DE9E                          G_WINDOW 80h, 104, 114, 176, 37   ; 82h, 72h, 9Dh, 1Fh, 14h
200   DE9E 82 72 9D 1F >                DB 80h|2, 114, 90h+(104>>3), 37-6, (176>>3)-2
200   DEA2 14          >
201   DEA3                          G_LINE   80h, 108, 132, 168       ; 81h, 84h, 9Dh, 14h, 0Fh, 0F0h
201   DEA3 81 84 9D 14 >                DB 80h|1, 132, 90h+(108>>3), (((108&7)+168+7)>>3)-2, 0FFh>>(108&7), (0FF00h>>((168+108)&7)) & 0FFh
201   DEA7 0F F0       >
202   DEA9 00                       DB 0
203   DEAA
204   DEAA              ; Коодинаты элементов панелей
205   DEAA
206   DEAA              P_NAME_X          = 17  ; Заголовок панели "NAME"
207   DEAA              P_NAME_Y          = 16
208   DEAA
209   DEAA                  IF FAT16
210   DEAA              P_FILE_LIST_X1    = 6   ; Файловая таблица (2 колонки)
211   DEAA              P_FILE_LIST_X2    = 54
212   DEAA              P_FILE_LIST_Y     = 32
213   DEAA                  ELSE
214   DEAA ~            P_FILE_LIST_X1    = 10  ; Файловая таблица (2 колонки)
215   DEAA ~            P_FILE_LIST_X2    = 57
216   DEAA ~            P_FILE_LIST_Y     = 32
217   DEAA                  ENDIF
218   DEAA
219   DEAA              P_FILE_LIST_H     = 18  ; Высота файловой таблицы в строках
220   DEAA              P_FILE_LIST_Y_MAX = P_FILE_LIST_H * 10 + P_FILE_LIST_Y
221   DEAA
222   DEAA              P_DRIVE_LETTER_X  = 9   ; Буква имени диска внизу панели
223   DEAA              P_DRIVE_LETTER_Y  = 222
224   DEAA              P_FILE_NAME_X     = 15  ; Имя файла внизу панели
225   DEAA              P_FILE_NAME_Y     = 222
226   DEAA              P_FILE_DATA_X     = 57  ; Данные о файле (адрес загрузки, размер)
227   DEAA              P_FILE_DATA_Y     = 222
228   DEAA
229   DEAA              P_INPUT_WIDTH     = 23  ; Длина поля ввода имени файла в символах
230   DEAA
231   DEAA              ;-----------------------------------------------------------------------
232   DEAA              ; Переменные
233   DEAA              ;-----------------------------------------------------------------------
234   DEAA
235   DEAA 5A           initState:        DB 5Ah
236   DEAB 00           activePanel:      DB 0
237   DEAC 00           panelA_info:      DB 0
238   DEAD 01           panelB_info:      DB 1
239   DEAE 00           panelA_drive:     DB 0
240   DEAF 00           panelB_drive:     DB 0
241   DEB0 00           panelA_filesCnt:  DB 0
242   DEB1 00           panelB_filesCnt:  DB 0
243   DEB2 00           panelA_curFile:   DB 0
244   DEB3 00           panelB_curFile:   DB 0
245   DEB4 41 3A 4E 43  aNcExt:           DB "A:NC.EXT",0
245   DEB8 2E 45 58 54
245   DEBC 00
246   DEBD 41 3A 45 2E  aEditor:          DB "A:E.COM",0Dh      ; терминатором тут должно быть 0Dh
246   DEC1 43 4F 4D 0D
247   DEC5
248   DEC5                  STRUCT NC_VARIABLES
249   DEC5 ~            cmdLinePos      DW    0
250   DEC5 ~            cmdLineEnd      DW    0
251   DEC5 ~            chooseDrive     DB    0
252   DEC5 ~            tapeSaveCRC     DW    0         ; контрольная сумма файла с ленты
253   DEC5 ~            savedSP         DW    0
254   DEC5 ~            tapeLoadAddr    DW    0         ; адрес загрузки файла с ленты
255   DEC5 ~            cmdLine         BLOCK 59, 0FFh  ; командная строка
256   DEC5 ~            cmdLineCtrl     DB    0FFh      ; контроль переполнения командной строки
257   DEC5 ~                            BLOCK 13, 0FFh
258   DEC5 ~            input           BLOCK 21, 0FFh
259   DEC5 ~                            BLOCK 11
260   DEC5 ~            tempFileDescr   FILE_DESCRIPTOR
261   DEC5                  ENDS
262   DEC5
263   DEC5              ; Установка только значения метки vars (машинный код не генерируется, переменные могут содержать мусор)
264   DEC5              nc_vars         NC_VARIABLES = $
265   DEC5
266   DEC5              ; Максимальный допустимый размер NC.COM - до адреса 0E1FFh
267   DEC5
268   DEC5                  END
