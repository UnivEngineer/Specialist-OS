  1   0000              ;+---------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; TAPE.COM - драйвер работы с магнитофоном, вынесенный из DOS.SYS
  4   0000              ;
  5   0000              ; 2022-02-02 SpaceEngineer
  6   0000              ;----------------------------------------------------------------------------
  7   0000
  8   0000                  INCLUDE "../include/mxos.inc"
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-CFFF - [4096 B] DOS.SYS (в конце чуть чуть свободного места под доработки)
  9+  0000              ;   D000-E1FF - [4607 B] NC.COM (в конце место под список файлов и чуть чуть свободного места под доработки)
 10+  0000              ;   E200-E5FF - [1024 B] (свободно 1024 байт)
 11+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 12+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 13+  0000              ;   F100-F8FF - [2048 B] FORMAT.COM, FPAGE.COM, MON2.COM и прочие утилиты
 14+  0000              ;   F900-F9FF - [ 256 B] (Свободно 256 байт)
 15+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 16+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер
 17+  0000              ;   FF00-FF81 - [ 129 B] Командная строка. Заполняется функцией bios_fileExec
 18+  0000              ;   FF82-FFBF - [ 130 B] Стек
 19+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвера обмена с RAM диском
 20+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 21+  0000              ;-----------------------------------------------------------------------
 22+  0000
 23+  0000
 24+  0000              ;-----------------------------------------------------------------------
 25+  0000              ; Конфигурация сборки
 26+  0000              ;-----------------------------------------------------------------------
 27+  0000
 28+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 29+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 30+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 31+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 32+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 33+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 34+  0000              FONT_ADDR            =  0E900h  ; Адрес шрфита
 35+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 36+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 37+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 38+  0000              FAT16                =  1       ; Включить поддержку FAT16
 39+  0000
 40+  0000                  IF  LOAD_FONT
 41+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 42+  0000                  ELSE
 43+  0000 ~            FONT_ADDR_DIV_8 = -1
 44+  0000                  ENDIF
 45+  0000
 46+  0000              ;-----------------------------------------------------------------------
 47+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 48+  0000              ; Доступ к переменным и программ польователя:
 49+  0000              ; ld a, bios_vars.lastKey
 50+  0000              ;-----------------------------------------------------------------------
 51+  0000
 52+  0000                  STRUCT BIOS_VARIABLES
 53+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 54+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 55+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 56+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 57+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 58+  0000 ~            cursorCfg     DB      11h ; 0A9h      ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 59+  0000 ~            koi8          DB      -1              ; 8FEAh - 0FFh = включен KOI-8, 0 = включен KOI-7
 60+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 61+  0000 ~            keyLocks      DB      3Ah             ; 8FECh -
 62+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 63+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 64+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 65+  0000 ~            beepFreq      DB      5Fh             ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 66+  0000 ~            beepDuration  DB      20h             ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 67+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 68+  0000 ~            cursorDelay   DB      020h            ; 8FF4h -
 69+  0000 ~            byte_8FF5     DB      0E0h            ; 8FF5h -
 70+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 71+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 72+  0000 ~            flashPage     DB      0               ; 8FF9h - Текущий номер страницы флеш-диска
 73+  0000 ~            inverse       DW      0               ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 74+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 75+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 76+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 77+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 78+  0000                  ENDS
 79+  0000
 80+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
 81+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
 82+  0000
 83+  0000              ;-----------------------------------------------------------------------
 84+  0000              ; Стандартные точки входа ОС
 85+  0000              ; Отмеченные * применять не рекомендуется
 86+  0000              ;-----------------------------------------------------------------------
 87+  0000
 88+  0000              bios_init            = 0C000h ; Теплая перезагрузка
 89+  0000
 90+  0000              ; Устаревшие точки, лечше не применять
 91+  0000              bios_keyScanOld      = 0C003h ; * Получить код нажатой клавиши, = bios_keyScan
 92+  0000              bios_drawCursorOld   = 0C006h ; * Нарисовать/стереть курсор
 93+  0000              bios_clearScreenOld  = 0C010h ; * Оистка экрана
 94+  0000              bios_printCharOld    = 0C037h ; * Вывод символа на экран
 95+  0000              bios_beep_Old        = 0C170h ; * Звуковой сигнал
 96+  0000              bios_delay_l         = 0C18Fh ; * Задержка l циклов
 97+  0000              bios_delay_b         = 0C190h ; * Задержка b циклов
 98+  0000              bios_getchOld        = 0C337h ; * Ожидание ввода с клавиатуры
 99+  0000              bios_tapeReadOld     = 0C377h ; * Чтение байта с магнитофона
100+  0000              bios_tapeWriteOld    = 0C3D0h ; * Запись байта на магнитофон
101+  0000              bios_cmp_hl_de       = 0C427h ; * Сравнить hl и de
102+  0000              bios_memcpy_bc_hl    = 0C42Dh ; * Скопировать блок памяти
103+  0000              bios_printStringOld  = 0C438h ; * Вывод строки на экран
104+  0000
105+  0000              bios_reboot          = 0C800h ; Запустить NC.COM
106+  0000              bios_getch           = 0C803h ; Ожидание ввода с клавиатуры
107+  0000              bios_tapeRead        = 0C806h ; Чтение байта с магнитофона
108+  0000              bios_printChar       = 0C809h ; Вывод символа на экран
109+  0000              bios_tapeWrite       = 0C80Ch ; Запись байта на магнитофон
110+  0000              bios_input           = 0C80Fh ; Ввод строки с клавиатуры
111+  0000              bios_keyCheck        = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
112+  0000              bios_printHexByte    = 0C815h ; Вывод HEX числа на экран (байт)
113+  0000              bios_printString     = 0C818h ; Вывод строки на экран
114+  0000              bios_keyScan         = 0C81Bh ; Получить код нажатой клавиши
115+  0000              bios_getCursorPos    = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
116+  0000              bios_setCursorPos    = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
117+  0000              bios_tapeLoad        = 0C824h ; Загрузить программу с магнитофона
118+  0000              bios_tapeSave        = 0C827h ; Сохранить программу на магнитофон
119+  0000              bios_calcCS          = 0C82Ah ; Расчет контрольной суммы
120+  0000              bios_printHexWord    = 0C82Dh ; Вывод HEX числа на экран (слово)
121+  0000              bios_getMemTop       = 0C830h ; Получить объем доступной памяти
122+  0000              bios_setMemTop       = 0C833h ; Установить объем доступной памяти
123+  0000              bios_printer         = 0C836h ; Напечатать байт на принтере
124+  0000                  IF RAMFOS_COMPATIBILITY
125+  0000              bios_strToHex        = 0C839h ; Преобразвоние строки в HEX формате в число
126+  0000                  ELSE
127+  0000 ~            bios_rebootAlt       = 0C839h ; Запустить NC.COM
128+  0000                  ENDIF
129+  0000              bios_rebootAlt2      = 0C83Ch ; Запустить NC.COM
130+  0000              bios_fileList        = 0C83Fh ; Получить список файлов
131+  0000              bios_fileGetSetDrive = 0C842h ; Получить/установить активное устройство
132+  0000              bios_fileCreate      = 0C845h ; Создать файл
133+  0000              bios_fileLoad        = 0C848h ; Загрузить файл по адресу из заголовка этого файла
134+  0000              bios_fileDelete      = 0C84Bh ; Удалить файл
135+  0000              bios_fileRename      = 0C84Eh ; Переименовать файл
136+  0000              bios_fileLoadInfo    = 0C851h ; Загрузить информацию о файле
137+  0000              bios_fileGetSetAddr  = 0C854h ; Получить/установить адрес загрузки файла
138+  0000              bios_fileGetSetAttr  = 0C857h ; Получить/установить атрибуты файла
139+  0000              bios_fileNamePrepare = 0C85Ah ; Преобразовать имя файла во внутренний формат
140+  0000              bios_fileExec        = 0C85Dh ; Запустить файл
141+  0000              bios_installDriver   = 0C860h ; Установить драйвер накопителя
142+  0000              bios_diskDriver      = 0C863h ; Драйвер выбранного диска
143+  0000              bios_fileLoad2       = 0C866h ; Загрузить файл по адресу de
144+  0000              bios_printCharReal   = 0C869h ; Вывод символа на экран (только реальные символы)
145+  0000              bios_printDecWord    = 0C86Ch ; Вывод числа экран в десятичной форме
146+  0000              bios_setRAMDDriver   = 0C86Fh ; Установить драйвр рам-диска
147+  0000
148+  0000              ;-----------------------------------------------------------------------
149+  0000              ; Точки входа драйвера доступа к ДОЗУ
150+  0000              ;-----------------------------------------------------------------------
151+  0000
152+  0000              bios_RAMDRead  = 0FFC0h ; чтение из ДОЗУ
153+  0000              bios_RAMDWrite = 0FFD0h ; запись в  ДОЗУ
154+  0000
155+  0000              ;-----------------------------------------------------------------------
156+  0000              ; Адрес таблицы переходов драйвера магнитофона
157+  0000              ;-----------------------------------------------------------------------
158+  0000
159+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
160+  0000
161+  0000              ;-----------------------------------------------------------------------
162+  0000              ; Порты устройств ПК "Специалист-MX2"
163+  0000              ;-----------------------------------------------------------------------
164+  0000
165+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
166+  0000              IO_KEYB_B       =  0FFE1h
167+  0000              IO_KEYB_C       =  0FFE2h
168+  0000              IO_KEYB_MODE    =  0FFE3h
169+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
170+  0000              IO_PROG_B       =  0FFE5h
171+  0000              IO_PROG_C       =  0FFE6h
172+  0000              IO_PROG_MODE    =  0FFE7h
173+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
174+  0000              IO_FDD_TRACK    =  0FFE9h
175+  0000              IO_FDD_SECTOR   =  0FFEAh
176+  0000              IO_FDD_DATA     =  0FFEBh
177+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
178+  0000              IO_TIMER_CH1    =  0FFEDh
179+  0000              IO_TIMER_CH2    =  0FFEEh
180+  0000              IO_TIMER_MODE   =  0FFEFh
181+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
182+  0000              IO_FDD_MOTOR    =  0FFF1h
183+  0000              IO_FDD_SIDE     =  0FFF2h
184+  0000              IO_FDD_DRIVE    =  0FFF3h
185+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
186+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
187+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
188+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
189+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
190+  0000
191+  0000              ;-----------------------------------------------------------------------
192+  0000              ; Структура файловой системы
193+  0000              ;-----------------------------------------------------------------------
194+  0000
195+  0000              ; Структура каталога
196+  0000
197+  0000                  IF FAT16
198+  0000
199+  0000              DIR_DESCR_SIZE  = 32    ; Размер дескриптора файла в каталоге (байт)
200+  0000              DIR_NAME_LENGTH = 8     ; Длина имени файла  (байт)
201+  0000              FAT_ITEM_SIZE   = 2     ; Размер записи в таблице FAT (байт)
202+  0000
203+  0000              ;-----------------------------------------------------------------------
204+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
205+  0000              ;-----------------------------------------------------------------------
206+  0000
207+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
208+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
209+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
210+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
211+  0000 ~            checkSum        BLOCK   1  ; ntRes          ; смещение 0Ch, 1 байт  - контрольная сумма (!!! временный костыль, в FAT32 это ntRes - используются в Windows NT !!!)
212+  0000 ~            ctrTimeTenth    BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
213+  0000 ~            ctrTime         BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
214+  0000 ~            ctrDate         BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
215+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
216+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
217+  0000 ~            wrtTime         BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
218+  0000 ~            wrtDate         BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
219+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
220+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
221+  0000                  ENDS
222+  0000
223+  0000              ;-----------------------------------------------------------------------
224+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
225+  0000              ;-----------------------------------------------------------------------
226+  0000
227+  0000                  ELSE
228+  0000 ~
229+  0000 ~            DIR_DESCR_SIZE  = 16    ; Размер дескриптора файла в каталоге
230+  0000 ~            DIR_NAME_LENGTH = 6     ; Длина имени файла (байт)
231+  0000 ~            FAT_ITEM_SIZE   = 1     ; Размер записи в таблице FAT (байт)
232+  0000 ~
233+  0000 ~            ;-----------------------------------------------------------------------
234+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
235+  0000 ~            ;-----------------------------------------------------------------------
236+  0000 ~
237+  0000 ~                STRUCT FILE_DESCRIPTOR  ; 16 байт
238+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 6 байт  - имя файла
239+  0000 ~            ext             BLOCK   3                   ; смещение 06h, 3 байта - расширение имени файла
240+  0000 ~            attrib          BLOCK   1                   ; смещение 09h, 1 байт  - атрибуты файла: 00h - обычный файл, 01h - системный файл
241+  0000 ~            loadAddress     BLOCK   2                   ; смещение 0Ah, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый
242+  0000 ~            size            BLOCK   2                   ; смещение 0Ch, 2 байта - размер файла в байтах - 1
243+  0000 ~            checkSum        BLOCK   1                   ; смещение 0Eh, 1 байт  - контрольная сумма
244+  0000 ~            firstCluster    BLOCK   1                   ; смещение 0Fh, 1 байт  - номер первого кластера в FAT
245+  0000 ~                ENDS
246+  0000 ~
247+  0000 ~            ;-----------------------------------------------------------------------
248+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
249+  0000 ~            ;-----------------------------------------------------------------------
250+  0000 ~
251+  0000                  ENDIF
252+  0000
253+  0000              ;-----------------------------------------------------------------------
254+  0000              ; Буферы в памяти
255+  0000              ;-----------------------------------------------------------------------
256+  0000
257+  0000              CLUSTER_SIZE     = 00100h                   ; размер кластера 256 байт
258+  0000              CLUSTERS_IN_BANK = 10000h / CLUSTER_SIZE    ; сколько кластеров в 64 кб банке
259+  0000
260+  0000                  IF FAT16
261+  0000
262+  0000              FAT_CLUSTERS  = 16      ; сколько кластеров занимает таблица fat
263+  0000              DIR_CLUSTERS  = 4       ; сколько кластеров занимает корневой каталог
264+  0000              FAT_BUFFER    = 8000h - (FAT_CLUSTERS + DIR_CLUSTERS) * CLUSTER_SIZE; адрес буфера таблицы fat в памяти
265+  0000
266+  0000                  ELSE
267+  0000 ~
268+  0000 ~            FAT_CLUSTERS  = 1       ; сколько кластеров занимает таблица fat
269+  0000 ~            DIR_CLUSTERS  = 3       ; сколько кластеров занимает корневой каталог
270+  0000 ~            FAT_BUFFER    = 0FB00h  ; адрес буфера таблицы fat в памяти
271+  0000 ~
272+  0000                  ENDIF
273+  0000
274+  0000              FAT_SIZE      = FAT_CLUSTERS * CLUSTER_SIZE  ; размер таблицы fat в байтах
275+  0000              DIR_SIZE      = DIR_CLUSTERS * CLUSTER_SIZE  ; размер корневого каталога в байтах
276+  0000
277+  0000              DIR_BUFFER    = FAT_BUFFER + FAT_SIZE         ; адрес буфера корневого каталога в памяти
278+  0000
279+  0000              DIR_MAX_FILES = DIR_CLUSTERS * 256 / DIR_DESCR_SIZE    ; Максимум файлов в каталоге
280+  0000
281+  0000              BAT_BUFFER    = 0FC00h  ; буфер для загрузки BAT файла
282+  0000              CMD_LINE      = 0FF00h  ; 192 байта, но в конце стек
283+  0000              STACK_ADDR    = 0FFC0h  ; стек
284+  0000
285+  0000              ;-----------------------------------------------------------------------
286+  0000              ; Всякие полезности
287+  0000              ;-----------------------------------------------------------------------
288+  0000
289+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
290+  0000                  MACRO ORG_PAD adr
291+  0000 ~                     IF $ > adr
292+  0000 ~                       ; вывод сообщения об ошибке
293+  0000 ~                       ASSERT 0
294+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
295+  0000 ~                     ELSE
296+  0000 ~                       ; заполнение памяти
297+  0000 ~                       BLOCK adr-$, 0FFh
298+  0000 ~                     ENDIF
299+  0000 ~                     ORG adr
300+  0000                  ENDM
301+  0000
302+  0000                  MACRO ORG_PAD0 adr
303+  0000 ~                     IF $ > adr
304+  0000 ~                       ; вывод сообщения об ошибке
305+  0000 ~                       ASSERT 0
306+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
307+  0000 ~                     ELSE
308+  0000 ~                       ; заполнение памяти
309+  0000 ~                       BLOCK adr-$, 0
310+  0000 ~                     ENDIF
311+  0000 ~                     ORG adr
312+  0000                  ENDM
313+  0000
314+  0000              ; Макросы для проверки текущего адреса
315+  0000                  MACRO ASSERT_EQUAL adr
316+  0000 ~                     IF $ != adr
317+  0000 ~                       ASSERT 0
318+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
319+  0000 ~                     ENDIF
320+  0000                  ENDM
321+  0000
322+  0000                  MACRO ASSERT_DONT_FIT adr
323+  0000 ~                     IF $ > adr
324+  0000 ~                       ASSERT 0
325+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
326+  0000 ~                     ENDIF
327+  0000                  ENDM
328+  0000
329+  0000              ;-----------------------------------------------------------------------
330+  0000              ; Конец
331+  0000              ;-----------------------------------------------------------------------
332+  0000
  9   0000
 10   0000                  ORG     0E600h
 11   E600
 12   E600              	INCLUDE "tapeInit.inc"
  1+  E600              ;+---------------------------------------------------------------------------
  2+  E600              ; MXOS
  3+  E600              ; TAPE.SYS - Инициализация
  4+  E600              ;
  5+  E600              ; 2022-02-02 SpaceEngineer
  6+  E600              ;----------------------------------------------------------------------------
  7+  E600
  8+  E600              tapeInit:
  9+  E600                      ; Копируем таблицу переходов в DOS.SYS и выходим
 10+  E600 21 0C E6             ld      hl, jumpsStart
 11+  E603 11 1E E6             ld      de, jumpsEnd
 12+  E606 01 77 C3             ld      bc, TAPE_DRIVER_JUMPS
 13+  E609 C3 2D C4             jp      bios_memcpy_bc_hl
 14+  E60C
 15+  E60C
 16+  E60C                      ; Таблца переходов
 17+  E60C              jumpsStart:
 18+  E60C C3 24 E6             jp      tapeRead
 19+  E60F C3 7F E6             jp      tapeWrite
 20+  E612 C3 11 E7             jp      tapeLoad
 21+  E615 C3 D8 E6             jp      tapeSave
 22+  E618 C3 A4 E6             jp      tapeLoadInt
 23+  E61B C3 D2 E6             jp      tapeReadError
 24+  E61E              jumpsEnd:
 25+  E61E
 13   E61E              	INCLUDE "tapeWriteDelay.inc"
  1+  E61E              ;+---------------------------------------------------------------------------
  2+  E61E              ; MXOS
  3+  E61E              ; Задержка при записи на ленту
  4+  E61E              ;
  5+  E61E              ; 2013-12-12 Дизассемблировано vinxru
  6+  E61E              ;----------------------------------------------------------------------------
  7+  E61E
  8+  E61E 3A FE 8F     writeDelay: ld    a, (bios_vars.writeDelay)
  9+  E621 C3 79 E6                 jp    delay_a
 10+  E624
 14   E624              	INCLUDE "tapeRead.inc"
  1+  E624              ;+---------------------------------------------------------------------------
  2+  E624              ; MXOS
  3+  E624              ; Чтение байта с ленты
  4+  E624              ;
  5+  E624              ; На входе
  6+  E624              ;  a=255 пропуск пилот-тона до байта до E6h, загрузка первого байта после
  7+  E624              ;  a=8   загрузка байта (8 бит)
  8+  E624              ;
  9+  E624              ; На выходе
 10+  E624              ;  c - байт
 11+  E624              ;  de, hl - сохраняются
 12+  E624              ;
 13+  E624              ; 2013-12-12 Дизассемблировано vinxru
 14+  E624              ;----------------------------------------------------------------------------
 15+  E624
 16+  E624              tapeRead:   ; Сохраняем регистры
 17+  E624 C5                       push  bc
 18+  E625 D5                       push  de
 19+  E626
 20+  E626                          ; Тут будет принятый байт
 21+  E626 0E 00                    ld    c, 0
 22+  E628
 23+  E628                          ; d=8 если загрузка (счетчик бит) или 0FFh если ожидание
 24+  E628 57                       ld    d, a
 25+  E629
 26+  E629              tapeRead_0: ; Получаем состояние
 27+  E629 3A E1 FF                 ld    a, (IO_KEYB_B)
 28+  E62C E6 01                    and   1
 29+  E62E 5F                       ld    e, a
 30+  E62F
 31+  E62F                          ; Сдвигаем c
 32+  E62F 79                       ld    a, c
 33+  E630 E6 7F                    and   7Fh
 34+  E632 07                       rlca
 35+  E633 4F                       ld    c, a
 36+  E634
 37+  E634              tapeRead_1: ; Получаем состояние
 38+  E634 3A E1 FF                 ld    a, (IO_KEYB_B)
 39+  E637
 40+  E637                          ; Если нажата клавиша, выходим
 41+  E637 FE 80                    cp    80h
 42+  E639 DA D2 E6                 jp c, tapeReadError
 43+  E63C
 44+  E63C                          ; Ждем изменения сигнала
 45+  E63C E6 01                    and   1
 46+  E63E BB                       cp    e
 47+  E63F CA 34 E6                 jp z, tapeRead_1
 48+  E642
 49+  E642                          ; Сохраняем бит
 50+  E642 B1                       or    c
 51+  E643 4F                       ld    c, a
 52+  E644
 53+  E644                          ; Задержка
 54+  E644 CD 76 E6                 call  readDelay
 55+  E647
 56+  E647 3A E1 FF                 ld    a, (IO_KEYB_B)
 57+  E64A E6 01                    and   1
 58+  E64C 5F                       ld    e, a
 59+  E64D
 60+  E64D                          ; Если происходит загрузка данных, переходим на tapeRead_4
 61+  E64D 7A                       ld    a, d
 62+  E64E B7                       or    a
 63+  E64F F2 6B E6                 jp p, tapeRead_4
 64+  E652
 65+  E652                          ; Если происходит ожидание
 66+  E652                          ; Если не найден 0E6h, переходим tapeRead_2
 67+  E652 79                       ld    a, c
 68+  E653 FE E6                    cp    0E6h
 69+  E655 C2 5F E6                 jp nz,  tapeRead_2
 70+  E658
 71+  E658                          ; Начинаем загрузку без инверсии
 72+  E658 AF                       xor   a
 73+  E659 32 F3 8F                 ld    (bios_vars.tapeInverse),a
 74+  E65C C3 69 E6                 jp    tapeRead_3
 75+  E65F
 76+  E65F              tapeRead_2: ; Если не найден 19h, переходим на tapeRead_0
 77+  E65F FE 19                    cp    19h
 78+  E661 C2 29 E6                 jp nz,  tapeRead_0
 79+  E664
 80+  E664                          ; Начинаем загрузку с инверсией
 81+  E664 3E FF                    ld    a, 0FFh
 82+  E666 32 F3 8F                 ld    (bios_vars.tapeInverse),a
 83+  E669
 84+  E669                          ; Загружаем 8 бит
 85+  E669 16 09        tapeRead_3: ld    d, 9
 86+  E66B
 87+  E66B                          ; Повторяем 8 байт
 88+  E66B 15           tapeRead_4: dec   d
 89+  E66C C2 29 E6                 jp nz,  tapeRead_0
 90+  E66F
 91+  E66F                          ; Инверсия байта
 92+  E66F 3A F3 8F                 ld    a, (bios_vars.tapeInverse)
 93+  E672 A9                       xor   c
 94+  E673
 95+  E673                          ; Восстаналиваем регистры
 96+  E673 D1                       pop   de
 97+  E674 C1                       pop   bc
 98+  E675 C9                       ret
 99+  E676
 15   E676              	INCLUDE "tapeReadDelay.inc"
  1+  E676              ;+---------------------------------------------------------------------------
  2+  E676              ; MXOS
  3+  E676              ; Задержка при чтении с ленты
  4+  E676              ;
  5+  E676              ; 2013-12-12 Дизассемблировано vinxru
  6+  E676              ;----------------------------------------------------------------------------
  7+  E676
  8+  E676 3A FF 8F     readDelay:  ld    a, (bios_vars.readDelay)
  9+  E679 47           delay_a:    ld    b, a
 10+  E67A 05           delay_l_0:  dec   b
 11+  E67B C2 7A E6                 jp nz,  delay_l_0
 12+  E67E C9                       ret
 13+  E67F
 16   E67F              	INCLUDE "tapeWrite.inc"
  1+  E67F              ;+---------------------------------------------------------------------------
  2+  E67F              ; MXOS
  3+  E67F              ; Запись байта на ленту
  4+  E67F              ;
  5+  E67F              ; На входе
  6+  E67F              ;   a - байт
  7+  E67F              ;
  8+  E67F              ; На выходе
  9+  E67F              ;   все регистры сохраняются
 10+  E67F              ;
 11+  E67F              ; 2013-12-12 Дизассемблировано vinxru
 12+  E67F              ;----------------------------------------------------------------------------
 13+  E67F
 14+  E67F              tapeWrite:  ; Сохранение регистров
 15+  E67F C5                       push  bc
 16+  E680 D5                       push  de
 17+  E681 F5                       push  af
 18+  E682
 19+  E682 57                       ld    d, a
 20+  E683
 21+  E683                          ; Надо записть 8 бит
 22+  E683 0E 08                    ld    c, 8
 23+  E685
 24+  E685              tapeWrite_1:
 25+  E685                          ; Сдвинуть d
 26+  E685 7A                       ld    a, d
 27+  E686 07                       rlca
 28+  E687 57                       ld    d, a
 29+  E688
 30+  E688                          ; Вывести бит на ленту
 31+  E688 E6 01                    and   1
 32+  E68A F6 0E                    or    0Eh
 33+  E68C 32 E3 FF                 ld    (IO_KEYB_MODE),a
 34+  E68F 5F                       ld    e, a
 35+  E690
 36+  E690                          ; Задержка
 37+  E690 CD 1E E6                 call  writeDelay
 38+  E693
 39+  E693                          ; Вывести инверсный бит на магнитофон
 40+  E693 7B                       ld    a, e
 41+  E694 EE 01                    xor   1
 42+  E696 32 E3 FF                 ld    (IO_KEYB_MODE),a
 43+  E699
 44+  E699                          ; Задержка
 45+  E699 CD 1E E6                 call  writeDelay
 46+  E69C
 47+  E69C                          ; Повторить 8 раз
 48+  E69C 0D                       dec   c
 49+  E69D C2 85 E6                 jp nz,  tapeWrite_1
 50+  E6A0
 51+  E6A0                          ; Восстановление регистров и выход
 52+  E6A0 F1                       pop   af
 53+  E6A1 D1                       pop   de
 54+  E6A2 C1                       pop   bc
 55+  E6A3 C9                       ret
 56+  E6A4
 17   E6A4              	INCLUDE "tapeLoadInt.inc"
  1+  E6A4              ;+---------------------------------------------------------------------------
  2+  E6A4              ; MXOS
  3+  E6A4              ; Загрузка программы с ленты. КС не загружается.
  4+  E6A4              ;
  5+  E6A4              ; В случае ошибки управление передается по адресу в bios_vars.tapeError
  6+  E6A4              ;
  7+  E6A4              ; На выходе
  8+  E6A4              ;  bios_vars.tapeAddr - адрес загруженной программы
  9+  E6A4              ;
 10+  E6A4              ; 2013-12-12 Дизассемблировано vinxru
 11+  E6A4              ;----------------------------------------------------------------------------
 12+  E6A4
 13+  E6A4              tapeLoadInt:
 14+  E6A4                          ; Ждем пилот-тон и читаем слово - это адрес загрузки программы
 15+  E6A4 3E FF                    ld      a, 0FFh
 16+  E6A6 CD 24 E6                 call    tapeRead
 17+  E6A9 6F                       ld      l, a
 18+  E6AA 3E 08                    ld      a, 8
 19+  E6AC CD 24 E6                 call    tapeRead
 20+  E6AF 67                       ld      h, a
 21+  E6B0 22 E3 8F                 ld      (bios_vars.tapeAddr), hl
 22+  E6B3
 23+  E6B3                          ; Читаем следующее слово - это конец программы
 24+  E6B3 3E 08                    ld      a, 8
 25+  E6B5 CD 24 E6                 call    tapeRead
 26+  E6B8 5F                       ld      e, a
 27+  E6B9 3E 08                    ld      a, 8
 28+  E6BB CD 24 E6                 call    tapeRead
 29+  E6BE 57                       ld      d, a
 30+  E6BF
 31+  E6BF                          ; Читаем тело программы
 32+  E6BF 3E 08        loc_C414:   ld      a, 8
 33+  E6C1 CD 24 E6     loc_C416:   call    tapeRead
 34+  E6C4 77                       ld      (hl), a
 35+  E6C5 CD 27 C4                 call    bios_cmp_hl_de
 36+  E6C8 23                       inc     hl
 37+  E6C9 C2 BF E6                 jp nz,  loc_C414
 38+  E6CC
 39+  E6CC                          ; Выходим не запуская
 40+  E6CC C9                       ret
 41+  E6CD
 42+  E6CD              ; ---------------------------------------------------------------------------
 43+  E6CD              ; Не используется
 44+  E6CD
 45+  E6CD              tapeLoadAny:
 46+  E6CD 3E FF                    ld    a, 0FFh
 47+  E6CF C3 C1 E6                 jp    loc_C416
 48+  E6D2
 18   E6D2              	INCLUDE "tapeReadError.inc"
  1+  E6D2              ;+---------------------------------------------------------------------------
  2+  E6D2              ; MXOS
  3+  E6D2              ; Вызывается при ошибке чтения с ленты
  4+  E6D2              ;
  5+  E6D2              ; 2013-12-12 Дизассемблировано vinxru
  6+  E6D2              ;----------------------------------------------------------------------------
  7+  E6D2
  8+  E6D2 D1           tapeReadError:    pop   de
  9+  E6D3 C1                       pop   bc
 10+  E6D4 2A E1 8F                 ld    hl, (bios_vars.tapeError)
 11+  E6D7 E9                       jp    (hl)
 12+  E6D8
 19   E6D8              	INCLUDE "tapeSave.inc"
  1+  E6D8              ;+---------------------------------------------------------------------------
  2+  E6D8              ; MXOS
  3+  E6D8              ; Запись программы на ленту
  4+  E6D8              ;
  5+  E6D8              ; На входе
  6+  E6D8              ;  hl - начальный адрес
  7+  E6D8              ;  de - конечный адрес
  8+  E6D8              ;
  9+  E6D8              ; На выходе
 10+  E6D8              ;  bc - контрольная сумма
 11+  E6D8              ;  de, hl - сохраняются
 12+  E6D8              ;
 13+  E6D8              ; 2013-12-12 Дизассемблировано vinxru
 14+  E6D8              ;----------------------------------------------------------------------------
 15+  E6D8
 16+  E6D8              tapeSave:   ; Расчитываем CRC
 17+  E6D8 E5                       push    hl
 18+  E6D9 CD 2A C8                 call    bios_calcCS
 19+  E6DC E1                       pop     hl
 20+  E6DD
 21+  E6DD E5                       push    hl
 22+  E6DE C5                       push    bc
 23+  E6DF
 24+  E6DF                          ; Пилот-тон (256 нулей)
 25+  E6DF 06 00                    ld      b, 0
 26+  E6E1 AF           loc_C9A4:   xor     a
 27+  E6E2 CD 7F E6                 call    tapeWrite
 28+  E6E5 05                       dec     b
 29+  E6E6 C2 E1 E6                 jp nz,  loc_C9A4
 30+  E6E9
 31+  E6E9                          ; Стартовый байт 0E6h
 32+  E6E9 3E E6                    ld      a, 0E6h
 33+  E6EB CD 7F E6                 call    tapeWrite
 34+  E6EE
 35+  E6EE                          ; Запись адреса первого байта
 36+  E6EE CD 09 E7                 call    tapeWriteWord
 37+  E6F1 EB                       ex      de, hl
 38+  E6F2
 39+  E6F2                          ; Запись адреса последнего байта
 40+  E6F2 CD 09 E7                 call    tapeWriteWord
 41+  E6F5 EB                       ex      de, hl
 42+  E6F6
 43+  E6F6              loc_C9B9:   ; Запись блока памяти от hl до de
 44+  E6F6 7E                       ld      a, (hl)
 45+  E6F7 CD 7F E6                 call    tapeWrite
 46+  E6FA CD 24 E7                 call    cmp_hl_de_2
 47+  E6FD 23                       inc     hl
 48+  E6FE C2 F6 E6                 jp nz,  loc_C9B9
 49+  E701
 50+  E701                          ; Запись CRC
 51+  E701 E1                       pop     hl
 52+  E702 CD 09 E7                 call    tapeWriteWord
 53+  E705
 54+  E705                          ; Возвращаем CRC в регистре bc
 55+  E705 44                       ld      b, h
 56+  E706 4D                       ld      c, l
 57+  E707
 58+  E707                          ; Восстанавливаем регистры и выходим
 59+  E707 E1                       pop     hl
 60+  E708 C9                       ret
 61+  E709
 20   E709              	INCLUDE "tapeWriteWord.inc"
  1+  E709              ;+---------------------------------------------------------------------------
  2+  E709              ; MXOS
  3+  E709              ; Запись слова на ленту
  4+  E709              ;
  5+  E709              ; На входе
  6+  E709              ;  hl - слово
  7+  E709              ;
  8+  E709              ; На выходе
  9+  E709              ;  bc, de, hl - сохраняются
 10+  E709              ;
 11+  E709              ; 2013-12-12 Дизассемблировано vinxru
 12+  E709              ;----------------------------------------------------------------------------
 13+  E709
 14+  E709              tapeWriteWord:
 15+  E709 7D                       ld    a, l
 16+  E70A CD 7F E6                 call  tapeWrite
 17+  E70D 7C                       ld    a, h
 18+  E70E C3 7F E6                 jp    tapeWrite
 19+  E711
 21   E711              	INCLUDE "tapeLoad.inc"
  1+  E711              ;+---------------------------------------------------------------------------
  2+  E711              ; MXOS
  3+  E711              ; Загрузка программы с ленты. КС загружается, но не проверяется.
  4+  E711              ;
  5+  E711              ; В случае ошибки управление передается по адресу в bios_vars.tapeError
  6+  E711              ;
  7+  E711              ; На выходе
  8+  E711              ;  bc - контольная сумма
  9+  E711              ;  hl, bios_vars.tapeAddr - адрес загруженной программы
 10+  E711              ;
 11+  E711              ; 2013-12-12 Дизассемблировано vinxru
 12+  E711              ;----------------------------------------------------------------------------
 13+  E711
 14+  E711              tapeLoad:   ; Загружаем файл с ленты без загрузки КС
 15+  E711 CD A4 E6                 call  tapeLoadInt
 16+  E714
 17+  E714                          ; Читаем КС
 18+  E714 3E 08                    ld    a, 8
 19+  E716 CD 24 E6                 call  tapeRead
 20+  E719 4F                       ld    c, a
 21+  E71A 3E 08                    ld    a, 8
 22+  E71C CD 24 E6                 call  tapeRead
 23+  E71F 47                       ld    b, a
 24+  E720
 25+  E720                          ; В hl возвращаем адрес запуска
 26+  E720 2A E3 8F                 ld    hl, (bios_vars.tapeAddr)
 27+  E723 C9                       ret
 28+  E724
 22   E724              	INCLUDE "cmp_hl_de_2.inc"
  1+  E724              ;+---------------------------------------------------------------------------
  2+  E724              ; MXOS
  3+  E724              ; Сравнить hl и de
  4+  E724              ;
  5+  E724              ; 2013-12-12 Дизассемблировано vinxru
  6+  E724              ;----------------------------------------------------------------------------
  7+  E724
  8+  E724              cmp_hl_de_2:
  9+  E724 7C                   ld    a, h
 10+  E725 BA                   cp    d
 11+  E726 D8                   ret   c
 12+  E727 C0                   ret   nz
 13+  E728 7D                   ld    a, l
 14+  E729 BB                   cp    e
 15+  E72A C9                   ret
 16+  E72B
 23   E72B
 24   E72B                  ; Проверка - TAPE.COM не должен вылезать за эти пределы
 25   E72B                  ASSERT_DONT_FIT 0E800h
 25   E72B             >         IF $ > 0E800h
 25   E72B ~           >           ASSERT 0
 25   E72B ~           >           DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
 25   E72B             >         ENDIF
 26   E72B
 27   E72B                  END
