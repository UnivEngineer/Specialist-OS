# file opened: D:\Projects\Retro-PC\Specialist\MySoft\MXOS-Z80\launch\LAUNCH.asm
  1   0000              ;+---------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; Запуск RKS файла
  4   0000              ;
  5   0000              ; 2021-01-27 Разработано SpaceEngineer
  6   0000              ;----------------------------------------------------------------------------
  7   0000
  8   0000                  INCLUDE "../include/mxos.inc"
# file opened: D:\Projects\Retro-PC\Specialist\MySoft\MXOS-Z80\launch\../include/mxos.inc
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Новая карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-D3FF - [5120 B] DOS.SYS
  9+  0000              ;   D400-DBFF - [2048 B] Свободно (2048 байт)
 10+  0000              ;   DC00-EDFF - [ 512 B] Драйвер магнитофона
 11+  0000              ;   DE00-DFFF - [ 512 B] Драйвер флеш-диска
 12+  0000              ;   E000-E7FF - [2048 B] Шрифт
 13+  0000              ;   E800-FAFF - [4864 B] Системные программы (NC.COM, E.COM, DL-RED.COM, FORMAT.COM, MON2.COM, ...)
 14+  0000              ;   FB00-FEFF - [1024 B] Дисковый кэш (fat + каталог)
 15+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 16+  0000              ;   FF82-FFBF - [  62 B] Стек
 17+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 18+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 19+  0000              ;
 20+  0000              ; Старая карта памяти:
 21+  0000              ;   8FDF-8FFF - [  32 B] Переменные
 22+  0000              ;   9000-BFFF - [12  KB] Экран
 23+  0000              ;   C000-CFFF - [4096 B] DOS.SYS
 24+  0000              ;   D000-E1FF - [4607 B] Системные программы (NC.COM, E.COM, DL-RED.COM)
 25+  0000              ;   E200-E5FF - [1024 B] Свободно (1024 байт)
 26+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 27+  0000              ;   E800-E8FF - [ 256 B] Свободно (256 байт)
 28+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 29+  0000              ;   F100-F8FF - [2048 B] Системные программы (FORMAT.COM, MON2.COM, ...)
 30+  0000              ;   F900-F9FF - [ 256 B] Свободно (256 байт)
 31+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 32+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер (fat + каталог)
 33+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 34+  0000              ;   FF82-FFBF - [  62 B] Стек
 35+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 36+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 37+  0000              ;-----------------------------------------------------------------------
 38+  0000
 39+  0000
 40+  0000              ;-----------------------------------------------------------------------
 41+  0000              ; Конфигурация сборки
 42+  0000              ;-----------------------------------------------------------------------
 43+  0000
 44+  0000              NEW_MEMORY_MAP       =  1       ; Новая карта памяти
 45+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 46+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 47+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 48+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 49+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 50+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 51+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 52+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 53+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 54+  0000
 55+  0000                  IF  NEW_MEMORY_MAP
 56+  0000              FONT_ADDR = 0E000h  ; Адрес шрфита
 57+  0000                  ELSE
 58+  0000 ~            FONT_ADDR = 0E900h  ; Адрес шрфита
 59+  0000                  ENDIF
 60+  0000
 61+  0000                  IF  LOAD_FONT
 62+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 63+  0000                  ELSE
 64+  0000 ~            FONT_ADDR_DIV_8 = -1
 65+  0000                  ENDIF
 66+  0000
 67+  0000              ;-----------------------------------------------------------------------
 68+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 69+  0000              ; Доступ к переменным из программ польователя:
 70+  0000              ; ld a, bios_vars.lastKey
 71+  0000              ;-----------------------------------------------------------------------
 72+  0000
 73+  0000                  STRUCT BIOS_VARIABLES
 74+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 75+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 76+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 77+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 78+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 79+  0000 ~            cursorCfg     DB       21h ; 0A9h     ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 80+  0000 ~            koi7          DB       0   ; 0FFh     ; 8FEAh - 0FFh = включен KOI-7, 0 = включен KOI-8
 81+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 82+  0000 ~            keyLocks      DB      0BAh ; 3Ah      ; 8FECh - Caps Lock или Рус/Lat (3A - прописные анг, BA - строчные анг, BB - прописные рус, 3B - строчные рус)
 83+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 84+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 85+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 86+  0000 ~            beepFreq      DB       5Fh            ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 87+  0000 ~            beepDuration  DB       20h            ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 88+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 89+  0000 ~            cursorDelay   DB       20h            ; 8FF4h - Задержка мигания курсора
 90+  0000 ~            antiBsDelay   DB      0E0h            ; 8FF5h - Задержка защиты от дребезга контактов клавиш
 91+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 92+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 93+  0000 ~            _reserv_4     DB       0              ; 8FF9h -
 94+  0000 ~            inverse       DW       0              ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 95+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 96+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 97+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 98+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 99+  0000                  ENDS
100+  0000
101+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
102+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
103+  0000
104+  0000              ;-----------------------------------------------------------------------
105+  0000              ; Стандартные точки входа ОС
106+  0000              ; Отмеченные [OLD] применять не рекомендуется
107+  0000              ; Отмеченные [MXOS2] - новые в MXOS 2
108+  0000              ;-----------------------------------------------------------------------
109+  0000
110+  0000              bios_init               = 0C000h ; Теплая перезагрузка
111+  0000
112+  0000              ; Устаревшие точки, лечше не применять
113+  0000              bios_keyScanOld         = 0C003h ; [OLD] Получить код нажатой клавиши, = bios_keyScan
114+  0000              bios_drawCursorOld      = 0C006h ; [OLD] Нарисовать/стереть курсор
115+  0000              bios_clearScreenOld     = 0C010h ; [OLD] Оистка экрана
116+  0000              bios_printCharOld       = 0C037h ; [OLD] Вывод символа на экран
117+  0000              bios_beep_Old           = 0C170h ; [OLD] Звуковой сигнал
118+  0000              bios_delay_l            = 0C18Fh ; [OLD] Задержка l циклов
119+  0000              bios_delay_b            = 0C190h ; [OLD] Задержка b циклов
120+  0000              bios_getchOld           = 0C337h ; [OLD] Ожидание ввода с клавиатуры
121+  0000              bios_tapeReadOld        = 0C377h ; [OLD] Чтение байта с магнитофона
122+  0000              bios_tapeWriteOld       = 0C3D0h ; [OLD] Запись байта на магнитофон
123+  0000              bios_cmp_hl_de          = 0C427h ; [OLD] Сравнить hl и de
124+  0000              bios_memcpy_bc_hl       = 0C42Dh ; [OLD] Скопировать блок памяти
125+  0000              bios_printStringOld     = 0C438h ; [OLD] Вывод строки на экран
126+  0000
127+  0000              ; Стандартные точки C800h
128+  0000              bios_reboot             = 0C800h ; Запустить NC.COM
129+  0000              bios_getch              = 0C803h ; Ожидание ввода с клавиатуры
130+  0000              bios_tapeRead           = 0C806h ; Чтение байта с магнитофона
131+  0000              bios_printChar          = 0C809h ; Вывод символа на экран
132+  0000              bios_tapeWrite          = 0C80Ch ; Запись байта на магнитофон
133+  0000              bios_input              = 0C80Fh ; Ввод строки с клавиатуры
134+  0000              bios_keyCheck           = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
135+  0000              bios_printHexByte       = 0C815h ; Вывод HEX числа на экран (байт)
136+  0000              bios_printString        = 0C818h ; Вывод строки на экран
137+  0000              bios_keyScan            = 0C81Bh ; Получить код нажатой клавиши
138+  0000              bios_getCursorPos       = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
139+  0000              bios_setCursorPos       = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
140+  0000              bios_tapeLoad           = 0C824h ; Загрузить программу с магнитофона
141+  0000              bios_tapeSave           = 0C827h ; Сохранить программу на магнитофон
142+  0000              bios_calcCS             = 0C82Ah ; Расчет контрольной суммы
143+  0000              bios_printHexWord       = 0C82Dh ; Вывод HEX числа на экран (слово)
144+  0000              bios_getMemTop          = 0C830h ; Получить объем доступной памяти
145+  0000              bios_setMemTop          = 0C833h ; Установить объем доступной памяти
146+  0000              bios_printer            = 0C836h ; Напечатать байт на принтере
147+  0000                  IF RAMFOS_COMPATIBILITY
148+  0000              bios_strToHex           = 0C839h ; [MXOS2] Преобразвоние строки в HEX формате в число
149+  0000                  ELSE
150+  0000 ~            bios_rebootAlt          = 0C839h ; Запустить NC.COM
151+  0000                  ENDIF
152+  0000              bios_rebootAlt2         = 0C83Ch ; Запустить NC.COM
153+  0000              bios_fileList           = 0C83Fh ; Получить список файлов
154+  0000              bios_fileGetSetDrive    = 0C842h ; Получить/установить активное устройство
155+  0000              bios_fileCreate         = 0C845h ; Создать файл
156+  0000              bios_fileLoad           = 0C848h ; Загрузить файл по адресу из заголовка этого файла
157+  0000              bios_fileDelete         = 0C84Bh ; Удалить файл
158+  0000              bios_fileRename         = 0C84Eh ; Переименовать файл
159+  0000              bios_fileLoadInfo       = 0C851h ; Загрузить информацию о файле
160+  0000              bios_fileGetSetAddr     = 0C854h ; Получить/установить адрес загрузки файла
161+  0000              bios_fileGetSetAttr     = 0C857h ; Получить/установить атрибуты файла
162+  0000              bios_fileNamePrepare    = 0C85Ah ; Преобразовать имя файла во внутренний формат
163+  0000              bios_fileExec           = 0C85Dh ; Запустить файл
164+  0000              bios_installDriver      = 0C860h ; Установить драйвер накопителя
165+  0000              bios_diskDriver         = 0C863h ; Драйвер выбранного диска
166+  0000              bios_fileLoad2          = 0C866h ; Загрузить файл по адресу de
167+  0000
168+  0000              ; Новые точки C800h MXOS2
169+  0000              bios_printCharReal      = 0C869h ; [MXOS2] Вывод символа на экран (только реальные символы)
170+  0000              bios_printDecWord       = 0C86Ch ; [MXOS2] Вывод числа экран в десятичной форме
171+  0000              bios_setRAMDDriver      = 0C86Fh ; [MXOS2] Установить драйвр рам-диска
172+  0000              bios_getDriveFreeSpace  = 0C872h ; [MXOS2] Получить оставшийся свободный объем диска
173+  0000              bios_upperCase          = 0C875h ; [MXOS2] Перевод кода символа КОИ-8 в верхний регистр
174+  0000              bios_strcmp             = 0C878h ; [MXOS2] Сравнение строк, чувствительное к регистру
175+  0000              bios_stricmp            = 0C87Bh ; [MXOS2] Сравнение строк, нечувствительное к регистру
176+  0000              bios_sub_hl_de          = 0C87Eh ; [MXOS2] Вычитание hl и de: hl = hl - de
177+  0000              bios_div_hl_2           = 0C881h ; [MXOS2] Деление hl на 2: hl = hl / 2
178+  0000              bios_mul_hl_de          = 0C884h ; [MXOS2] Умножение hl на de: hl = hl * de
179+  0000              bios_div_hl_de          = 0C887h ; [MXOS2] Деление hl на de: hl = hl / de, de = hl % de
180+  0000
181+  0000              ;-----------------------------------------------------------------------
182+  0000              ; Адрес таблицы переходов драйвера магнитофона
183+  0000              ;-----------------------------------------------------------------------
184+  0000
185+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
186+  0000
187+  0000              ;-----------------------------------------------------------------------
188+  0000              ; Непереключаемое ОЗУ ПК "Специалист-MX" (0FFC0h-0FFDF, 32 байта)
189+  0000              ;-----------------------------------------------------------------------
190+  0000
191+  0000              bios_RAMDRead   = 0FFC0h ; п/п чтения из ДОЗУ
192+  0000              bios_RAMDWrite  = 0FFD0h ; п/п записи в  ДОЗУ
193+  0000
194+  0000              ;-----------------------------------------------------------------------
195+  0000              ; Порты устройств ПК "Специалист-MX2" (0FFE0h-0FFFF, 32 байта)
196+  0000              ;-----------------------------------------------------------------------
197+  0000
198+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
199+  0000              IO_KEYB_B       =  0FFE1h
200+  0000              IO_KEYB_C       =  0FFE2h
201+  0000              IO_KEYB_MODE    =  0FFE3h
202+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
203+  0000              IO_PROG_B       =  0FFE5h
204+  0000              IO_PROG_C       =  0FFE6h
205+  0000              IO_PROG_MODE    =  0FFE7h
206+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
207+  0000              IO_FDD_TRACK    =  0FFE9h
208+  0000              IO_FDD_SECTOR   =  0FFEAh
209+  0000              IO_FDD_DATA     =  0FFEBh
210+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
211+  0000              IO_TIMER_CH1    =  0FFEDh
212+  0000              IO_TIMER_CH2    =  0FFEEh
213+  0000              IO_TIMER_MODE   =  0FFEFh
214+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
215+  0000              IO_FDD_MOTOR    =  0FFF1h
216+  0000              IO_FDD_SIDE     =  0FFF2h
217+  0000              IO_FDD_DRIVE    =  0FFF3h
218+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
219+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
220+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
221+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
222+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
223+  0000
224+  0000              ;-----------------------------------------------------------------------
225+  0000              ; Структура файловой системы
226+  0000              ;-----------------------------------------------------------------------
227+  0000
228+  0000              ; Структура каталога
229+  0000              FILE_DESCR_SIZE  = 32   ; размер дескриптора файла в каталоге (байт)
230+  0000              FILE_NAME_LENGTH = 8    ; длина имени файла  (байт)
231+  0000              FAT_ITEM_SIZE    = 2    ; размер записи в таблице FAT (байт)
232+  0000
233+  0000              SECTOR_SIZE  = 00100h   ; размер сектора 256 байт
234+  0000              CLUSTER_SIZE = 00100h   ; размер кластера 256 байт
235+  0000
236+  0000              ; Специальные коды кластеров FAT
237+  0000              FAT12_BAD = 00FF7h  ; плохой кластер
238+  0000              FAT16_BAD = 0FFF7h
239+  0000              FAT12_EOC = 00FFFh  ; последний кластер файла
240+  0000              FAT16_EOC = 0FFFFh
241+  0000              FAT12_RES = 00FFFh  ; зарезервированный кластер
242+  0000              FAT16_RES = 0FFFFh
243+  0000
244+  0000              ;-----------------------------------------------------------------------
245+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
246+  0000              ;-----------------------------------------------------------------------
247+  0000
248+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
249+  0000 ~            name            BLOCK   FILE_NAME_LENGTH    ; смещение 00h, 8 байт  - имя файла
250+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
251+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
252+  0000 ~            ntReserved      BLOCK   1                   ; смещение 0Ch, 1 байт  - используются в Windows NT
253+  0000 ~            createTimeTenth BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
254+  0000 ~            createTime      BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
255+  0000 ~            createDate      BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
256+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
257+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
258+  0000 ~            writeTime       BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
259+  0000 ~            writeDate       BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
260+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
261+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
262+  0000                  ENDS
263+  0000
264+  0000              ;-----------------------------------------------------------------------
265+  0000              ; Информация о файле (компактный вариант дескриптора)
266+  0000              ; Почти совместимо с дескриптором оригинального Коммандера
267+  0000              ;-----------------------------------------------------------------------
268+  0000
269+  0000              FILE_INFO_SIZE = 16     ; размер структуры (байт)
270+  0000
271+  0000                  STRUCT FILE_INFO    ; 16 байт
272+  0000 ~            name            BLOCK   FILE_NAME_LENGTH    ; смещение 00h, 8 байт  - имя файла
273+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
274+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
275+  0000 ~            loadAddress     BLOCK   2                   ; смещение 0Eh, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый
276+  0000 ~            size            BLOCK   2                   ; смещение 0Ch, 2 байта - размер файла в байтах
277+  0000                  ENDS
278+  0000
279+  0000              ;-----------------------------------------------------------------------
280+  0000              ; Информация о активном накопителе (диске)
281+  0000              ;-----------------------------------------------------------------------
282+  0000
283+  0000                  STRUCT DISK_INFO
284+  0000 ~            sectorSize          BLOCK   2   ; размер сектора, байт (256, 512, 1024)
285+  0000 ~            sectorsPerCluster   BLOCK   2   ; размер кластера, секторов (1, 2, 4, 8)
286+  0000 ~            resSectors          BLOCK   2   ; сколько секторов занимает зарезервированная область = первый сектор таблицы fat
287+  0000 ~            fatSectors          BLOCK   2   ; сколько секторов занимает таблица fat
288+  0000 ~            dirSectors          BLOCK   2   ; сколько секторов занимает корневой каталог
289+  0000 ~            totalSectors        BLOCK   2   ; сколько всего секторов на диске
290+  0000 ~            rootDirMaxFiles     BLOCK   2   ; максимум файлов в корневом каталоге
291+  0000 ~            descrPerSector      BLOCK   2   ; сколько дескрипторов файлов вмещается в один сектор
292+  0000 ~            fatNumCells         BLOCK   2   ; количество ячеек в таблице fat (= fatSectors * sectorSize / 2)
293+  0000 ~            dirStartSector      BLOCK   2   ; первый сектор корневого каталога
294+  0000 ~            dataStartSector     BLOCK   2   ; первый сектор области данных
295+  0000 ~            volumeLabel         BLOCK  12   ; метка тома и 0 в конце
296+  0000 ~            isValid             BLOCK   1   ; 0 = нет драйвера, 1 = диск не распознан, 2 = диск распознан, корректно отформатирован
297+  0000                  ENDS
298+  0000
299+  0000              DISK_NO_DRIVER = 0
300+  0000              DISK_INVALID   = 1
301+  0000              DISK_VALID     = 2
302+  0000
303+  0000              ;-----------------------------------------------------------------------
304+  0000              ; Буферы в памяти
305+  0000              ;-----------------------------------------------------------------------
306+  0000
307+  0000              ; Дисковый кэш
308+  0000              FAT_CACHE_ADDR = 0FB00h ; адрес кэша секторов fat в памяти
309+  0000              FAT_CACHE_SIZE = 1024   ; размер кэша в байтах
310+  0000              FAT_CACHE_CAPACITY = FAT_CACHE_SIZE / SECTOR_SIZE   ; сколько секторов вмещается в кэш
311+  0000
312+  0000              ; Буфер для загрузки BAT файла
313+  0000                  IF NEW_MEMORY_MAP
314+  0000              BAT_BUFFER = 0E800h
315+  0000                  ELSE
316+  0000 ~            BAT_BUFFER = 0FC00h
317+  0000                  ENDIF
318+  0000
319+  0000              ; Командная строка и стек
320+  0000              CMD_LINE   = 0FF00h  ; 192 байта, но в конце стек
321+  0000              STACK_ADDR = 0FFC0h  ; стек
322+  0000
323+  0000              ;-----------------------------------------------------------------------
324+  0000              ; Всякие полезности
325+  0000              ;-----------------------------------------------------------------------
326+  0000
327+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
328+  0000                  MACRO ORG_PAD adr
329+  0000 ~                     IF $ > adr
330+  0000 ~                       ; вывод сообщения об ошибке
331+  0000 ~                       ASSERT 0
332+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
333+  0000 ~                     ELSE
334+  0000 ~                       ; заполнение памяти
335+  0000 ~                       BLOCK adr-$, 0FFh
336+  0000 ~                     ENDIF
337+  0000 ~                     ORG adr
338+  0000                  ENDM
339+  0000
340+  0000                  MACRO ORG_PAD0 adr
341+  0000 ~                     IF $ > adr
342+  0000 ~                       ; вывод сообщения об ошибке
343+  0000 ~                       ASSERT 0
344+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
345+  0000 ~                     ELSE
346+  0000 ~                       ; заполнение памяти
347+  0000 ~                       BLOCK adr-$, 0
348+  0000 ~                     ENDIF
349+  0000 ~                     ORG adr
350+  0000                  ENDM
351+  0000
352+  0000              ; Макросы для проверки текущего адреса
353+  0000                  MACRO ASSERT_EQUAL adr
354+  0000 ~                     IF $ != adr
355+  0000 ~                       ASSERT 0
356+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
357+  0000 ~                     ENDIF
358+  0000                  ENDM
359+  0000
360+  0000                  MACRO ASSERT_DONT_FIT adr
361+  0000 ~                     IF $ > adr
362+  0000 ~                       ASSERT 0
363+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
364+  0000 ~                     ENDIF
365+  0000                  ENDM
366+  0000
367+  0000              ;-----------------------------------------------------------------------
368+  0000              ; Конец
369+  0000              ;-----------------------------------------------------------------------
370+  0000
# file closed: D:\Projects\Retro-PC\Specialist\MySoft\MXOS-Z80\launch\../include/mxos.inc
  9   0000
 10   0000              ; Адрес загрузки монитора
 11   0000              MON_ADDR        =  0C000h
 12   0000
 13   0000              ; Адрес временного буфера загрузки монитора
 14   0000              MON_ADDR_TEMP   =  0E000h
 15   0000
 16   0000                  ORG 0F800h
 17   F800
 18   F800                  ; В de передаётся адрес строки аргументов
 19   F800 1A               ld      a, (de)
 20   F801 FE 20            cp      20h
 21   F803 DA 84 F8         jp c,   noargsRet ; аргумент не задан, выходим
 22   F806
 23   F806 D5               push    de
 24   F807 21 8A F8         ld      hl, txtLoading
 25   F80A CD 18 C8         call    bios_printString
 26   F80D E1               pop     hl
 27   F80E E5               push    hl
 28   F80F CD 18 C8         call    bios_printString
 29   F812 E1               pop     hl
 30   F813
 31   F813                  ; Загрузка программы
 32   F813                  ; Подготовка имени файла и переключение накопителя
 33   F813 11 CD F8         ld      de, nameBuffer
 34   F816 CD 5A C8         call    bios_fileNamePrepare   ; hl = имя файла = строка аргументов
 35   F819 EB               ex      de, hl
 36   F81A
 37   F81A                  ; Загружаем файл
 38   F81A 21 CD F8         ld      hl, nameBuffer
 39   F81D CD 48 C8         call    bios_fileLoad
 40   F820 DA 7E F8         jp c,   fileNotFoundRet
 41   F823
 42   F823                  ; Получаем адрес загрузки (= адрес запуска) файла в de
 43   F823 11 12 00         ld      de, FILE_DESCRIPTOR.loadAddress
 44   F826 19               add     hl, de
 45   F827 5E               ld      e, (hl)
 46   F828 23               inc     hl
 47   F829 56               ld      d, (hl)
 48   F82A
 49   F82A                  ; Помещаем в стек для передачи Монитору
 50   F82A D5               push    de
 51   F82B
 52   F82B 21 8A F8         ld      hl, txtLoading
 53   F82E CD 18 C8         call    bios_printString
 54   F831 21 C2 F8         ld      hl, txtMonitorPath
 55   F834 CD 18 C8         call    bios_printString
 56   F837
 57   F837                  ; Загрузка Монитора
 58   F837                  ; Подготовка имени файла A:MON2.MON
 59   F837 21 C2 F8         ld      hl, txtMonitorPath
 60   F83A 11 CD F8         ld      de, nameBuffer
 61   F83D CD 5A C8         call    bios_fileNamePrepare
 62   F840
 63   F840                  ; Загружаем файл MON2.SYS во временный буфер - он затрет nc.com
 64   F840 21 CD F8         ld      hl, nameBuffer
 65   F843 11 00 E0         ld      de, MON_ADDR_TEMP   ; изменить адрес загрузки файла на de
 66   F846 CD 66 C8         call    bios_fileLoad2      ; нужна исправленная функция! BIOS 4.50 и старше
 67   F849 DA 7D F8         jp c,   popFileNotFoundRet
 68   F84C
 69   F84C                  ; Получаем размер файла Монитора в de
 70   F84C 11 1C 00         ld      de, FILE_DESCRIPTOR.size
 71   F84F 19               add     hl, de
 72   F850 5E               ld      e, (hl)
 73   F851 23               inc     hl
 74   F852 56               ld      d, (hl)
 75   F853
 76   F853                  ; hl = MON_ADDR_TEMP
 77   F853                  ; de = MON_ADDR_TEMP + размер монитора
 78   F853 21 00 E0         ld      hl, MON_ADDR_TEMP
 79   F856 EB               ex      de, hl
 80   F857 19               add     hl, de
 81   F858 EB               ex      de, hl
 82   F859
 83   F859                  ; Копируем Монитор на адрес C000h. При этом он затрёт BIOS, и дисковые
 84   F859                  ; функции ОС станут недоступны. Поэтому и нужен был временный буфер.
 85   F859 01 00 C0         ld      bc, MON_ADDR
 86   F85C CD 6C F8         call    memcpy
 87   F85F
 88   F85F                  ; Инициализируем STD контроллер цвета
 89   F85F 3E 82            ld      a, 82h              ; порты A, C - вывод, порт B - ввод
 90   F861 32 E3 FF         ld      (IO_KEYB_MODE), a
 91   F864 3E 00            ld      a, 0h               ; белый цвет
 92   F866 32 E2 FF         ld      (IO_KEYB_C), a
 93   F869
 94   F869                  ; Запуск Монитора. Монитор сам переходит в режим STD, инициализируется,
 95   F869                  ; и запускает программу по адресу из вершины стека.
 96   F869 C3 00 C0         jp      MON_ADDR
 97   F86C
 98   F86C                  ; Копироваение из hl в bc с увеличением адресов, пока hl не равно de
 99   F86C              memcpy:
100   F86C 7E               ld      a, (hl)
101   F86D 02               ld      (bc), a
102   F86E CD 77 F8         call    cmp_hl_de
103   F871 C8               ret z
104   F872 23               inc     hl
105   F873 03               inc     bc
106   F874 C3 6C F8         jp      memcpy
107   F877
108   F877              cmp_hl_de:
109   F877 7D               ld      a, l
110   F878 BB               cp      e
111   F879 C0               ret nz
112   F87A 7C               ld      a, h
113   F87B BA               cp      d
114   F87C C9               ret
115   F87D
116   F87D              popFileNotFoundRet:
117   F87D D1               pop     de ; восстанавливаем стек для правильного аварийного выхода
118   F87E              fileNotFoundRet:
119   F87E 21 94 F8         ld      hl, txtFileNotFound
120   F881 C3 18 C8         jp      bios_printString
121   F884
122   F884              noargsRet:
123   F884 21 A4 F8         ld      hl, txtNoArgs
124   F887 C3 18 C8         jp      bios_printString
125   F88A
126   F88A                  ; Esc + ) включает KOI-8 до конца выводимой строки
127   F88A              txtLoading:
128   F88A 0A 4C 4F 41      DB 0Ah,"LOADING ",0
128   F88E 44 49 4E 47
128   F892 20 00
129   F894
130   F894              txtFileNotFound:
131   F894 0A 46 49 4C      DB 0Ah,"FILE NOT FOUND",0
131   F898 45 20 4E 4F
131   F89C 54 20 46 4F
131   F8A0 55 4E 44 00
132   F8A4
133   F8A4              txtNoArgs:
134   F8A4 0A 55 53 41      DB 0Ah,"USAGE: LAUNCH.COM <FILE.RKS>",0
134   F8A8 47 45 3A 20
134   F8AC 4C 41 55 4E
134   F8B0 43 48 2E 43
134   F8B4 4F 4D 20 3C
134   F8B8 46 49 4C 45
134   F8BC 2E 52 4B 53
134   F8C0 3E 00
135   F8C2
136   F8C2              txtMonitorPath:
137   F8C2 41 3A 4D 4F      DB "A:MON2.MON",0
137   F8C6 4E 32 2E 4D
137   F8CA 4F 4E 00
138   F8CD
139   F8CD              nameBuffer:
140   F8CD 00 00 00...      BLOCK 10,0
141   F8D7
142   F8D7                  END
# file closed: D:\Projects\Retro-PC\Specialist\MySoft\MXOS-Z80\launch\LAUNCH.asm
