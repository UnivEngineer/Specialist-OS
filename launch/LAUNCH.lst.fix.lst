  1   0000              ;+---------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; Запуск RKS файла
  4   0000              ;
  5   0000              ; 2021-01-27 Разработано SpaceEngineer
  6   0000              ;----------------------------------------------------------------------------
  7   0000
  8   0000                  INCLUDE "../include/mxos.inc"
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-CFFF - [4096 B] DOS.SYS (в конце чуть чуть свободного места под доработки)
  9+  0000              ;   D000-E1FF - [4607 B] NC.COM (в конце место под список файлов и чуть чуть свободного места под доработки)
 10+  0000              ;   E200-E5FF - [1024 B] (свободно 1024 байт)
 11+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 12+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 13+  0000              ;   F100-F8FF - [2048 B] FORMAT.COM, FPAGE.COM, MON2.COM и прочие утилиты
 14+  0000              ;   F900-F9FF - [ 256 B] (Свободно 256 байт)
 15+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 16+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер
 17+  0000              ;   FF00-FF81 - [ 129 B] Командная строка. Заполняется функцией bios_fileExec
 18+  0000              ;   FF82-FFBF - [ 130 B] Стек
 19+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвера обмена с RAM диском
 20+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 21+  0000              ;-----------------------------------------------------------------------
 22+  0000
 23+  0000
 24+  0000              ;-----------------------------------------------------------------------
 25+  0000              ; Конфигурация сборки
 26+  0000              ;-----------------------------------------------------------------------
 27+  0000
 28+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 29+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 30+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 31+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 32+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 33+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 34+  0000              FONT_ADDR            =  0E900h  ; Адрес шрфита
 35+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 36+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 37+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 38+  0000              FAT16                =  1       ; Включить поддержку FAT16
 39+  0000
 40+  0000                  IF  LOAD_FONT
 41+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 42+  0000                  ELSE
 43+  0000 ~            FONT_ADDR_DIV_8 = -1
 44+  0000                  ENDIF
 45+  0000
 46+  0000              ;-----------------------------------------------------------------------
 47+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 48+  0000              ; Доступ к переменным и программ польователя:
 49+  0000              ; ld a, bios_vars.lastKey
 50+  0000              ;-----------------------------------------------------------------------
 51+  0000
 52+  0000                  STRUCT BIOS_VARIABLES
 53+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 54+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 55+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 56+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 57+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 58+  0000 ~            cursorCfg     DB      11h ; 0A9h      ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 59+  0000 ~            koi8          DB      -1              ; 8FEAh - 0FFh = включен KOI-8, 0 = включен KOI-7
 60+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 61+  0000 ~            keyLocks      DB      3Ah             ; 8FECh -
 62+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 63+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 64+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 65+  0000 ~            beepFreq      DB      5Fh             ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 66+  0000 ~            beepDuration  DB      20h             ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 67+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 68+  0000 ~            cursorDelay   DB      020h            ; 8FF4h -
 69+  0000 ~            byte_8FF5     DB      0E0h            ; 8FF5h -
 70+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 71+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 72+  0000 ~            flashPage     DB      0               ; 8FF9h - Текущий номер страницы флеш-диска
 73+  0000 ~            inverse       DW      0               ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 74+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 75+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 76+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 77+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 78+  0000                  ENDS
 79+  0000
 80+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
 81+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
 82+  0000
 83+  0000              ;-----------------------------------------------------------------------
 84+  0000              ; Стандартные точки входа ОС
 85+  0000              ; Отмеченные * применять не рекомендуется
 86+  0000              ;-----------------------------------------------------------------------
 87+  0000
 88+  0000              bios_init            = 0C000h ; Теплая перезагрузка
 89+  0000
 90+  0000              ; Устаревшие точки, лечше не применять
 91+  0000              bios_keyScanOld      = 0C003h ; * Получить код нажатой клавиши, = bios_keyScan
 92+  0000              bios_drawCursorOld   = 0C006h ; * Нарисовать/стереть курсор
 93+  0000              bios_clearScreenOld  = 0C010h ; * Оистка экрана
 94+  0000              bios_printCharOld    = 0C037h ; * Вывод символа на экран
 95+  0000              bios_beep_Old        = 0C170h ; * Звуковой сигнал
 96+  0000              bios_delay_l         = 0C18Fh ; * Задержка l циклов
 97+  0000              bios_delay_b         = 0C190h ; * Задержка b циклов
 98+  0000              bios_getchOld        = 0C337h ; * Ожидание ввода с клавиатуры
 99+  0000              bios_tapeReadOld     = 0C377h ; * Чтение байта с магнитофона
100+  0000              bios_tapeWriteOld    = 0C3D0h ; * Запись байта на магнитофон
101+  0000              bios_cmp_hl_de       = 0C427h ; * Сравнить hl и de
102+  0000              bios_memcpy_bc_hl    = 0C42Dh ; * Скопировать блок памяти
103+  0000              bios_printStringOld  = 0C438h ; * Вывод строки на экран
104+  0000
105+  0000              bios_reboot          = 0C800h ; Запустить NC.COM
106+  0000              bios_getch           = 0C803h ; Ожидание ввода с клавиатуры
107+  0000              bios_tapeRead        = 0C806h ; Чтение байта с магнитофона
108+  0000              bios_printChar       = 0C809h ; Вывод символа на экран
109+  0000              bios_tapeWrite       = 0C80Ch ; Запись байта на магнитофон
110+  0000              bios_input           = 0C80Fh ; Ввод строки с клавиатуры
111+  0000              bios_keyCheck        = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
112+  0000              bios_printHexByte    = 0C815h ; Вывод HEX числа на экран (байт)
113+  0000              bios_printString     = 0C818h ; Вывод строки на экран
114+  0000              bios_keyScan         = 0C81Bh ; Получить код нажатой клавиши
115+  0000              bios_getCursorPos    = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
116+  0000              bios_setCursorPos    = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
117+  0000              bios_tapeLoad        = 0C824h ; Загрузить программу с магнитофона
118+  0000              bios_tapeSave        = 0C827h ; Сохранить программу на магнитофон
119+  0000              bios_calcCS          = 0C82Ah ; Расчет контрольной суммы
120+  0000              bios_printHexWord    = 0C82Dh ; Вывод HEX числа на экран (слово)
121+  0000              bios_getMemTop       = 0C830h ; Получить объем доступной памяти
122+  0000              bios_setMemTop       = 0C833h ; Установить объем доступной памяти
123+  0000              bios_printer         = 0C836h ; Напечатать байт на принтере
124+  0000                  IF RAMFOS_COMPATIBILITY
125+  0000              bios_strToHex        = 0C839h ; Преобразвоние строки в HEX формате в число
126+  0000                  ELSE
127+  0000 ~            bios_rebootAlt       = 0C839h ; Запустить NC.COM
128+  0000                  ENDIF
129+  0000              bios_rebootAlt2      = 0C83Ch ; Запустить NC.COM
130+  0000              bios_fileList        = 0C83Fh ; Получить список файлов
131+  0000              bios_fileGetSetDrive = 0C842h ; Получить/установить активное устройство
132+  0000              bios_fileCreate      = 0C845h ; Создать файл
133+  0000              bios_fileLoad        = 0C848h ; Загрузить файл по адресу из заголовка этого файла
134+  0000              bios_fileDelete      = 0C84Bh ; Удалить файл
135+  0000              bios_fileRename      = 0C84Eh ; Переименовать файл
136+  0000              bios_fileLoadInfo    = 0C851h ; Загрузить информацию о файле
137+  0000              bios_fileGetSetAddr  = 0C854h ; Получить/установить адрес загрузки файла
138+  0000              bios_fileGetSetAttr  = 0C857h ; Получить/установить атрибуты файла
139+  0000              bios_fileNamePrepare = 0C85Ah ; Преобразовать имя файла во внутренний формат
140+  0000              bios_fileExec        = 0C85Dh ; Запустить файл
141+  0000              bios_installDriver   = 0C860h ; Установить драйвер накопителя
142+  0000              bios_diskDriver      = 0C863h ; Драйвер выбранного диска
143+  0000              bios_fileLoad2       = 0C866h ; Загрузить файл по адресу de
144+  0000              bios_printCharReal   = 0C869h ; Вывод символа на экран (только реальные символы)
145+  0000              bios_printDecWord    = 0C86Ch ; Вывод числа экран в десятичной форме
146+  0000              bios_setRAMDDriver   = 0C86Fh ; Установить драйвр рам-диска
147+  0000
148+  0000              ;-----------------------------------------------------------------------
149+  0000              ; Точки входа драйвера доступа к ДОЗУ
150+  0000              ;-----------------------------------------------------------------------
151+  0000
152+  0000              bios_RAMDRead  = 0FFC0h ; чтение из ДОЗУ
153+  0000              bios_RAMDWrite = 0FFD0h ; запись в  ДОЗУ
154+  0000
155+  0000              ;-----------------------------------------------------------------------
156+  0000              ; Адрес таблицы переходов драйвера магнитофона
157+  0000              ;-----------------------------------------------------------------------
158+  0000
159+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
160+  0000
161+  0000              ;-----------------------------------------------------------------------
162+  0000              ; Порты устройств ПК "Специалист-MX2"
163+  0000              ;-----------------------------------------------------------------------
164+  0000
165+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
166+  0000              IO_KEYB_B       =  0FFE1h
167+  0000              IO_KEYB_C       =  0FFE2h
168+  0000              IO_KEYB_MODE    =  0FFE3h
169+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
170+  0000              IO_PROG_B       =  0FFE5h
171+  0000              IO_PROG_C       =  0FFE6h
172+  0000              IO_PROG_MODE    =  0FFE7h
173+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
174+  0000              IO_FDD_TRACK    =  0FFE9h
175+  0000              IO_FDD_SECTOR   =  0FFEAh
176+  0000              IO_FDD_DATA     =  0FFEBh
177+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
178+  0000              IO_TIMER_CH1    =  0FFEDh
179+  0000              IO_TIMER_CH2    =  0FFEEh
180+  0000              IO_TIMER_MODE   =  0FFEFh
181+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
182+  0000              IO_FDD_MOTOR    =  0FFF1h
183+  0000              IO_FDD_SIDE     =  0FFF2h
184+  0000              IO_FDD_DRIVE    =  0FFF3h
185+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
186+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
187+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
188+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
189+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
190+  0000
191+  0000              ;-----------------------------------------------------------------------
192+  0000              ; Структура файловой системы
193+  0000              ;-----------------------------------------------------------------------
194+  0000
195+  0000              ; Структура каталога
196+  0000
197+  0000                  IF FAT16
198+  0000
199+  0000              DIR_DESCR_SIZE  = 32    ; Размер дескриптора файла в каталоге (байт)
200+  0000              DIR_NAME_LENGTH = 8     ; Длина имени файла  (байт)
201+  0000              FAT_ITEM_SIZE   = 2     ; Размер записи в таблице FAT (байт)
202+  0000
203+  0000              ;-----------------------------------------------------------------------
204+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
205+  0000              ;-----------------------------------------------------------------------
206+  0000
207+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
208+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
209+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
210+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
211+  0000 ~            checkSum        BLOCK   1  ; ntRes          ; смещение 0Ch, 1 байт  - контрольная сумма (!!! временный костыль, в FAT32 это ntRes - используются в Windows NT !!!)
212+  0000 ~            ctrTimeTenth    BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
213+  0000 ~            ctrTime         BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
214+  0000 ~            ctrDate         BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
215+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
216+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
217+  0000 ~            wrtTime         BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
218+  0000 ~            wrtDate         BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
219+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
220+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
221+  0000                  ENDS
222+  0000
223+  0000              ;-----------------------------------------------------------------------
224+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
225+  0000              ;-----------------------------------------------------------------------
226+  0000
227+  0000                  ELSE
228+  0000 ~
229+  0000 ~            DIR_DESCR_SIZE  = 16    ; Размер дескриптора файла в каталоге
230+  0000 ~            DIR_NAME_LENGTH = 6     ; Длина имени файла (байт)
231+  0000 ~            FAT_ITEM_SIZE   = 1     ; Размер записи в таблице FAT (байт)
232+  0000 ~
233+  0000 ~            ;-----------------------------------------------------------------------
234+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
235+  0000 ~            ;-----------------------------------------------------------------------
236+  0000 ~
237+  0000 ~                STRUCT FILE_DESCRIPTOR  ; 16 байт
238+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 6 байт  - имя файла
239+  0000 ~            ext             BLOCK   3                   ; смещение 06h, 3 байта - расширение имени файла
240+  0000 ~            attrib          BLOCK   1                   ; смещение 09h, 1 байт  - атрибуты файла: 00h - обычный файл, 01h - системный файл
241+  0000 ~            loadAddress     BLOCK   2                   ; смещение 0Ah, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый
242+  0000 ~            size            BLOCK   2                   ; смещение 0Ch, 2 байта - размер файла в байтах - 1
243+  0000 ~            checkSum        BLOCK   1                   ; смещение 0Eh, 1 байт  - контрольная сумма
244+  0000 ~            firstCluster    BLOCK   1                   ; смещение 0Fh, 1 байт  - номер первого кластера в FAT
245+  0000 ~                ENDS
246+  0000 ~
247+  0000 ~            ;-----------------------------------------------------------------------
248+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
249+  0000 ~            ;-----------------------------------------------------------------------
250+  0000 ~
251+  0000                  ENDIF
252+  0000
253+  0000              ;-----------------------------------------------------------------------
254+  0000              ; Буферы в памяти
255+  0000              ;-----------------------------------------------------------------------
256+  0000
257+  0000              CLUSTER_SIZE     = 00100h                   ; размер кластера 256 байт
258+  0000              CLUSTERS_IN_BANK = 10000h / CLUSTER_SIZE    ; сколько кластеров в 64 кб банке
259+  0000
260+  0000                  IF FAT16
261+  0000
262+  0000              FAT_CLUSTERS  = 16      ; сколько кластеров занимает таблица fat
263+  0000              DIR_CLUSTERS  = 4       ; сколько кластеров занимает корневой каталог
264+  0000              FAT_BUFFER    = 8000h - (FAT_CLUSTERS + DIR_CLUSTERS) * CLUSTER_SIZE; адрес буфера таблицы fat в памяти
265+  0000
266+  0000                  ELSE
267+  0000 ~
268+  0000 ~            FAT_CLUSTERS  = 1       ; сколько кластеров занимает таблица fat
269+  0000 ~            DIR_CLUSTERS  = 3       ; сколько кластеров занимает корневой каталог
270+  0000 ~            FAT_BUFFER    = 0FB00h  ; адрес буфера таблицы fat в памяти
271+  0000 ~
272+  0000                  ENDIF
273+  0000
274+  0000              FAT_SIZE      = FAT_CLUSTERS * CLUSTER_SIZE  ; размер таблицы fat в байтах
275+  0000              DIR_SIZE      = DIR_CLUSTERS * CLUSTER_SIZE  ; размер корневого каталога в байтах
276+  0000
277+  0000              DIR_BUFFER    = FAT_BUFFER + FAT_SIZE         ; адрес буфера корневого каталога в памяти
278+  0000
279+  0000              DIR_MAX_FILES = DIR_CLUSTERS * 256 / DIR_DESCR_SIZE    ; Максимум файлов в каталоге
280+  0000
281+  0000              BAT_BUFFER    = 0FC00h  ; буфер для загрузки BAT файла
282+  0000              CMD_LINE      = 0FF00h  ; 192 байта, но в конце стек
283+  0000              STACK_ADDR    = 0FFC0h  ; стек
284+  0000
285+  0000              ;-----------------------------------------------------------------------
286+  0000              ; Всякие полезности
287+  0000              ;-----------------------------------------------------------------------
288+  0000
289+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
290+  0000                  MACRO ORG_PAD adr
291+  0000 ~                     IF $ > adr
292+  0000 ~                       ; вывод сообщения об ошибке
293+  0000 ~                       ASSERT 0
294+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
295+  0000 ~                     ELSE
296+  0000 ~                       ; заполнение памяти
297+  0000 ~                       BLOCK adr-$, 0FFh
298+  0000 ~                     ENDIF
299+  0000 ~                     ORG adr
300+  0000                  ENDM
301+  0000
302+  0000                  MACRO ORG_PAD0 adr
303+  0000 ~                     IF $ > adr
304+  0000 ~                       ; вывод сообщения об ошибке
305+  0000 ~                       ASSERT 0
306+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
307+  0000 ~                     ELSE
308+  0000 ~                       ; заполнение памяти
309+  0000 ~                       BLOCK adr-$, 0
310+  0000 ~                     ENDIF
311+  0000 ~                     ORG adr
312+  0000                  ENDM
313+  0000
314+  0000              ; Макросы для проверки текущего адреса
315+  0000                  MACRO ASSERT_EQUAL adr
316+  0000 ~                     IF $ != adr
317+  0000 ~                       ASSERT 0
318+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
319+  0000 ~                     ENDIF
320+  0000                  ENDM
321+  0000
322+  0000                  MACRO ASSERT_DONT_FIT adr
323+  0000 ~                     IF $ > adr
324+  0000 ~                       ASSERT 0
325+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
326+  0000 ~                     ENDIF
327+  0000                  ENDM
328+  0000
329+  0000              ;-----------------------------------------------------------------------
330+  0000              ; Конец
331+  0000              ;-----------------------------------------------------------------------
332+  0000
  9   0000
 10   0000              ; Адрес загрузки монитора
 11   0000              MON_ADDR        =  0C000h
 12   0000
 13   0000              ; Адрес временного буфера загрузки монитора
 14   0000              MON_ADDR_TEMP   =  0D000h
 15   0000
 16   0000                  ORG 0F100h
 17   F100
 18   F100                  ; В de передаётся адрес строки аргументов
 19   F100 1A               ld      a, (de)
 20   F101 FE 20            cp      20h
 21   F103 DA 7A F1         jp c,   noargsRet ; аргумент не задан, выходим
 22   F106
 23   F106 D5               push    de
 24   F107 21 80 F1         ld      hl, txtLoading
 25   F10A CD 18 C8         call    bios_printString
 26   F10D E1               pop     hl
 27   F10E E5               push    hl
 28   F10F CD 18 C8         call    bios_printString
 29   F112 E1               pop     hl
 30   F113
 31   F113                  ; Загрузка программы
 32   F113                  ; Подготовка имени файла и переключение накопителя
 33   F113 11 C3 F1         ld      de, nameBuffer
 34   F116 CD 5A C8         call    bios_fileNamePrepare   ; hl = имя файла = строка аргументов
 35   F119 EB               ex      de, hl
 36   F11A
 37   F11A                  ; Загружаем файл
 38   F11A 21 C3 F1         ld      hl, nameBuffer
 39   F11D CD 48 C8         call    bios_fileLoad
 40   F120 DA 74 F1         jp c,   fileNotFoundRet
 41   F123
 42   F123                  ; Получаем адрес загрузки (= адрес запуска) файла в de
 43   F123 11 12 00         ld      de, FILE_DESCRIPTOR.loadAddress
 44   F126 19               add     hl, de
 45   F127 5E               ld      e, (hl)
 46   F128 23               inc     hl
 47   F129 56               ld      d, (hl)
 48   F12A
 49   F12A                  ; Помещаем в стек для передачи Монитору
 50   F12A D5               push    de
 51   F12B
 52   F12B 21 80 F1         ld      hl, txtLoading
 53   F12E CD 18 C8         call    bios_printString
 54   F131 21 B8 F1         ld      hl, txtMonitorPath
 55   F134 CD 18 C8         call    bios_printString
 56   F137
 57   F137                  ; Загрузка Монитора
 58   F137                  ; Подготовка имени файла a:MON2.SYS
 59   F137 21 B8 F1         ld      hl, txtMonitorPath
 60   F13A 11 C3 F1         ld      de, nameBuffer
 61   F13D CD 5A C8         call    bios_fileNamePrepare
 62   F140
 63   F140                  ; Загружаем файл MON2.SYS на 0D000h - он затрет nc.cOM
 64   F140 21 C3 F1         ld      hl, nameBuffer
 65   F143 11 00 D0         ld      de, MON_ADDR_TEMP ; изменить адрес загрузки файла на de
 66   F146 CD 66 C8         call    bios_fileLoad2  ; нужна исправленная функция! BIOS 4.50 и старше
 67   F149 DA 73 F1         jp c,   popFileNotFoundRet
 68   F14C
 69   F14C                  ; Получаем размер файла Монитора в de
 70   F14C 11 1C 00         ld      de, FILE_DESCRIPTOR.size
 71   F14F 19               add     hl, de
 72   F150 5E               ld      e, (hl)
 73   F151 23               inc     hl
 74   F152 56               ld      d, (hl)
 75   F153
 76   F153                  ; hl = MON_ADDR_TEMP
 77   F153                  ; de = MON_ADDR_TEMP + размер монитора
 78   F153 21 00 D0         ld      hl, MON_ADDR_TEMP
 79   F156 EB               ex      de, hl
 80   F157 19               add     hl, de
 81   F158 EB               ex      de, hl
 82   F159
 83   F159                  ; Копируем Монитор на адрес C000h. При этом он затрёт BIOS, и дисковые
 84   F159                  ; функции ОС станут недоступны. Поэтому и нужен был временный буфер.
 85   F159 01 00 C0         ld      bc, MON_ADDR
 86   F15C CD 62 F1         call    memcpy
 87   F15F
 88   F15F                  ; Запуск Монитора. Монитор сам переходит в режим STD, инициализируется,
 89   F15F                  ; и запускает программу по адресу из вершины стека.
 90   F15F C3 00 C0         jp      MON_ADDR
 91   F162
 92   F162              memcpy: ; Копироваение из hl в bc с увеличением адресов, пока hl не равно de
 93   F162 7E               ld      a, (hl)
 94   F163 02               ld      (bc), a
 95   F164 CD 6D F1         call    cmp_hl_de
 96   F167 C8               ret z
 97   F168 23               inc     hl
 98   F169 03               inc     bc
 99   F16A C3 62 F1         jp      memcpy
100   F16D
101   F16D              cmp_hl_de:
102   F16D 7D               ld      a, l
103   F16E BB               cp      e
104   F16F C0               ret nz
105   F170 7C               ld      a, h
106   F171 BA               cp      d
107   F172 C9               ret
108   F173
109   F173              popFileNotFoundRet:
110   F173 D1               pop     de ; восстанавливаем стек для правильного аварийного выхода
111   F174              fileNotFoundRet:
112   F174 21 8A F1         ld      hl, txtFileNotFound
113   F177 C3 18 C8         jp      bios_printString
114   F17A
115   F17A              noargsRet:
116   F17A 21 9A F1         ld      hl, txtNoArgs
117   F17D C3 18 C8         jp      bios_printString
118   F180
119   F180                  ; Esc + ) включает KOI-8 до конца выводимой строки
120   F180              txtLoading:
121   F180 0A 4C 4F 41      DB 0Ah,"LOADING ",0
121   F184 44 49 4E 47
121   F188 20 00
122   F18A
123   F18A              txtFileNotFound:
124   F18A 0A 46 49 4C      DB 0Ah,"FILE NOT FOUND",0
124   F18E 45 20 4E 4F
124   F192 54 20 46 4F
124   F196 55 4E 44 00
125   F19A
126   F19A              txtNoArgs:
127   F19A 0A 55 53 41      DB 0Ah,"USAGE: LAUNCH.COM <FILE.RKS>",0
127   F19E 47 45 3A 20
127   F1A2 4C 41 55 4E
127   F1A6 43 48 2E 43
127   F1AA 4F 4D 20 3C
127   F1AE 46 49 4C 45
127   F1B2 2E 52 4B 53
127   F1B6 3E 00
128   F1B8
129   F1B8              txtMonitorPath:
130   F1B8 41 3A 4D 4F      DB "A:MON2.MON",0
130   F1BC 4E 32 2E 4D
130   F1C0 4F 4E 00
131   F1C3
132   F1C3              nameBuffer:
133   F1C3 00 00 00...      BLOCK 10,0
134   F1CD
135   F1CD                  END
