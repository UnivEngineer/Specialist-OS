# file opened: D:\Projects\Specialist\MySoft\MXOS-Z80\format\FORMAT.asm
  1   0000              ;----------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; FORMAT.COM
  4   0000              ;
  5   0000              ; Доработки:
  6   0000              ; - "тихий режим" по параметру Y (форматировать без cпроcа)
  7   0000              ;    например FORMAT.COM B: Y
  8   0000              ;
  9   0000              ; 2022-01-14 Дизассемблировано и доработано SpaceEngineer
 10   0000              ;----------------------------------------------------------------------------
 11   0000
 12   0000                  INCLUDE "../include/mxos.inc"
# file opened: D:\Projects\Specialist\MySoft\MXOS-Z80\format\../include/mxos.inc
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-CFFF - [4096 B] DOS.SYS (в конце чуть чуть свободного места под доработки)
  9+  0000              ;   D000-E1FF - [4607 B] NC.COM (в конце место под список файлов и чуть чуть свободного места под доработки)
 10+  0000              ;   E200-E5FF - [1024 B] (свободно 1024 байт)
 11+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 12+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 13+  0000              ;   F100-F8FF - [2048 B] FORMAT.COM, FPAGE.COM, MON2.COM и прочие утилиты
 14+  0000              ;   F900-F9FF - [ 256 B] (Свободно 256 байт)
 15+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 16+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер
 17+  0000              ;   FF00-FF81 - [ 129 B] Командная строка. Заполняется функцией bios_fileExec
 18+  0000              ;   FF82-FFBF - [ 130 B] Стек
 19+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвера обмена с RAM диском
 20+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 21+  0000              ;-----------------------------------------------------------------------
 22+  0000
 23+  0000
 24+  0000              ;-----------------------------------------------------------------------
 25+  0000              ; Конфигурация сборки
 26+  0000              ;-----------------------------------------------------------------------
 27+  0000
 28+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 29+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 30+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 31+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 32+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 33+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 34+  0000              FONT_ADDR            =  0E900h  ; Адрес шрфита
 35+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 36+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 37+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 38+  0000              FAT16                =  1       ; Включить поддержку FAT16
 39+  0000
 40+  0000                  IF  LOAD_FONT
 41+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 42+  0000                  ELSE
 43+  0000 ~            FONT_ADDR_DIV_8 = -1
 44+  0000                  ENDIF
 45+  0000
 46+  0000              ;-----------------------------------------------------------------------
 47+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 48+  0000              ; Доступ к переменным и программ польователя:
 49+  0000              ; ld a, bios_vars.lastKey
 50+  0000              ;-----------------------------------------------------------------------
 51+  0000
 52+  0000                  STRUCT BIOS_VARIABLES
 53+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 54+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 55+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 56+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 57+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 58+  0000 ~            cursorCfg     DB      11h ; 0A9h      ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 59+  0000 ~            koi8          DB      -1              ; 8FEAh - 0FFh = включен KOI-8, 0 = включен KOI-7
 60+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 61+  0000 ~            keyLocks      DB      3Ah             ; 8FECh -
 62+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 63+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 64+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 65+  0000 ~            beepFreq      DB      5Fh             ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 66+  0000 ~            beepDuration  DB      20h             ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 67+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 68+  0000 ~            cursorDelay   DB      020h            ; 8FF4h -
 69+  0000 ~            byte_8FF5     DB      0E0h            ; 8FF5h -
 70+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 71+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 72+  0000 ~            flashPage     DB      0               ; 8FF9h - Текущий номер страницы флеш-диска
 73+  0000 ~            inverse       DW      0               ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 74+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 75+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 76+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 77+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 78+  0000                  ENDS
 79+  0000
 80+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
 81+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
 82+  0000
 83+  0000              ;-----------------------------------------------------------------------
 84+  0000              ; Стандартные точки входа ОС
 85+  0000              ; Отмеченные * применять не рекомендуется
 86+  0000              ;-----------------------------------------------------------------------
 87+  0000
 88+  0000              bios_init            = 0C000h ; Теплая перезагрузка
 89+  0000
 90+  0000              ; Устаревшие точки, лечше не применять
 91+  0000              bios_keyScanOld      = 0C003h ; * Получить код нажатой клавиши, = bios_keyScan
 92+  0000              bios_drawCursorOld   = 0C006h ; * Нарисовать/стереть курсор
 93+  0000              bios_clearScreenOld  = 0C010h ; * Оистка экрана
 94+  0000              bios_printCharOld    = 0C037h ; * Вывод символа на экран
 95+  0000              bios_beep_Old        = 0C170h ; * Звуковой сигнал
 96+  0000              bios_delay_l         = 0C18Fh ; * Задержка l циклов
 97+  0000              bios_delay_b         = 0C190h ; * Задержка b циклов
 98+  0000              bios_getchOld        = 0C337h ; * Ожидание ввода с клавиатуры
 99+  0000              bios_tapeReadOld     = 0C377h ; * Чтение байта с магнитофона
100+  0000              bios_tapeWriteOld    = 0C3D0h ; * Запись байта на магнитофон
101+  0000              bios_cmp_hl_de       = 0C427h ; * Сравнить hl и de
102+  0000              bios_memcpy_bc_hl    = 0C42Dh ; * Скопировать блок памяти
103+  0000              bios_printStringOld  = 0C438h ; * Вывод строки на экран
104+  0000
105+  0000              bios_reboot          = 0C800h ; Запустить NC.COM
106+  0000              bios_getch           = 0C803h ; Ожидание ввода с клавиатуры
107+  0000              bios_tapeRead        = 0C806h ; Чтение байта с магнитофона
108+  0000              bios_printChar       = 0C809h ; Вывод символа на экран
109+  0000              bios_tapeWrite       = 0C80Ch ; Запись байта на магнитофон
110+  0000              bios_input           = 0C80Fh ; Ввод строки с клавиатуры
111+  0000              bios_keyCheck        = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
112+  0000              bios_printHexByte    = 0C815h ; Вывод HEX числа на экран (байт)
113+  0000              bios_printString     = 0C818h ; Вывод строки на экран
114+  0000              bios_keyScan         = 0C81Bh ; Получить код нажатой клавиши
115+  0000              bios_getCursorPos    = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
116+  0000              bios_setCursorPos    = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
117+  0000              bios_tapeLoad        = 0C824h ; Загрузить программу с магнитофона
118+  0000              bios_tapeSave        = 0C827h ; Сохранить программу на магнитофон
119+  0000              bios_calcCS          = 0C82Ah ; Расчет контрольной суммы
120+  0000              bios_printHexWord    = 0C82Dh ; Вывод HEX числа на экран (слово)
121+  0000              bios_getMemTop       = 0C830h ; Получить объем доступной памяти
122+  0000              bios_setMemTop       = 0C833h ; Установить объем доступной памяти
123+  0000              bios_printer         = 0C836h ; Напечатать байт на принтере
124+  0000                  IF RAMFOS_COMPATIBILITY
125+  0000              bios_strToHex        = 0C839h ; Преобразвоние строки в HEX формате в число
126+  0000                  ELSE
127+  0000 ~            bios_rebootAlt       = 0C839h ; Запустить NC.COM
128+  0000                  ENDIF
129+  0000              bios_rebootAlt2      = 0C83Ch ; Запустить NC.COM
130+  0000              bios_fileList        = 0C83Fh ; Получить список файлов
131+  0000              bios_fileGetSetDrive = 0C842h ; Получить/установить активное устройство
132+  0000              bios_fileCreate      = 0C845h ; Создать файл
133+  0000              bios_fileLoad        = 0C848h ; Загрузить файл по адресу из заголовка этого файла
134+  0000              bios_fileDelete      = 0C84Bh ; Удалить файл
135+  0000              bios_fileRename      = 0C84Eh ; Переименовать файл
136+  0000              bios_fileLoadInfo    = 0C851h ; Загрузить информацию о файле
137+  0000              bios_fileGetSetAddr  = 0C854h ; Получить/установить адрес загрузки файла
138+  0000              bios_fileGetSetAttr  = 0C857h ; Получить/установить атрибуты файла
139+  0000              bios_fileNamePrepare = 0C85Ah ; Преобразовать имя файла во внутренний формат
140+  0000              bios_fileExec        = 0C85Dh ; Запустить файл
141+  0000              bios_installDriver   = 0C860h ; Установить драйвер накопителя
142+  0000              bios_diskDriver      = 0C863h ; Драйвер выбранного диска
143+  0000              bios_fileLoad2       = 0C866h ; Загрузить файл по адресу de
144+  0000              bios_printCharReal   = 0C869h ; Вывод символа на экран (только реальные символы)
145+  0000              bios_printDecWord    = 0C86Ch ; Вывод числа экран в десятичной форме
146+  0000              bios_setRAMDDriver   = 0C86Fh ; Установить драйвр рам-диска
147+  0000
148+  0000              ;-----------------------------------------------------------------------
149+  0000              ; Точки входа драйвера доступа к ДОЗУ
150+  0000              ;-----------------------------------------------------------------------
151+  0000
152+  0000              bios_RAMDRead  = 0FFC0h ; чтение из ДОЗУ
153+  0000              bios_RAMDWrite = 0FFD0h ; запись в  ДОЗУ
154+  0000
155+  0000              ;-----------------------------------------------------------------------
156+  0000              ; Адрес таблицы переходов драйвера магнитофона
157+  0000              ;-----------------------------------------------------------------------
158+  0000
159+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
160+  0000
161+  0000              ;-----------------------------------------------------------------------
162+  0000              ; Порты устройств ПК "Специалист-MX2"
163+  0000              ;-----------------------------------------------------------------------
164+  0000
165+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
166+  0000              IO_KEYB_B       =  0FFE1h
167+  0000              IO_KEYB_C       =  0FFE2h
168+  0000              IO_KEYB_MODE    =  0FFE3h
169+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
170+  0000              IO_PROG_B       =  0FFE5h
171+  0000              IO_PROG_C       =  0FFE6h
172+  0000              IO_PROG_MODE    =  0FFE7h
173+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
174+  0000              IO_FDD_TRACK    =  0FFE9h
175+  0000              IO_FDD_SECTOR   =  0FFEAh
176+  0000              IO_FDD_DATA     =  0FFEBh
177+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
178+  0000              IO_TIMER_CH1    =  0FFEDh
179+  0000              IO_TIMER_CH2    =  0FFEEh
180+  0000              IO_TIMER_MODE   =  0FFEFh
181+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
182+  0000              IO_FDD_MOTOR    =  0FFF1h
183+  0000              IO_FDD_SIDE     =  0FFF2h
184+  0000              IO_FDD_DRIVE    =  0FFF3h
185+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
186+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
187+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
188+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
189+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
190+  0000
191+  0000              ;-----------------------------------------------------------------------
192+  0000              ; Структура файловой системы
193+  0000              ;-----------------------------------------------------------------------
194+  0000
195+  0000              ; Структура каталога
196+  0000
197+  0000                  IF FAT16
198+  0000
199+  0000              DIR_DESCR_SIZE  = 32    ; Размер дескриптора файла в каталоге (байт)
200+  0000              DIR_NAME_LENGTH = 8     ; Длина имени файла  (байт)
201+  0000              FAT_ITEM_SIZE   = 2     ; Размер записи в таблице FAT (байт)
202+  0000
203+  0000              ;-----------------------------------------------------------------------
204+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
205+  0000              ;-----------------------------------------------------------------------
206+  0000
207+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
208+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
209+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
210+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
211+  0000 ~            checkSum        BLOCK   1  ; ntRes          ; смещение 0Ch, 1 байт  - контрольная сумма (!!! временный костыль, в FAT32 это ntRes - используются в Windows NT !!!)
212+  0000 ~            ctrTimeTenth    BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
213+  0000 ~            ctrTime         BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
214+  0000 ~            ctrDate         BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
215+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
216+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
217+  0000 ~            wrtTime         BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
218+  0000 ~            wrtDate         BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
219+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
220+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
221+  0000                  ENDS
222+  0000
223+  0000              ;-----------------------------------------------------------------------
224+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
225+  0000              ;-----------------------------------------------------------------------
226+  0000
227+  0000                  ELSE
228+  0000 ~
229+  0000 ~            DIR_DESCR_SIZE  = 16    ; Размер дескриптора файла в каталоге
230+  0000 ~            DIR_NAME_LENGTH = 6     ; Длина имени файла (байт)
231+  0000 ~            FAT_ITEM_SIZE   = 1     ; Размер записи в таблице FAT (байт)
232+  0000 ~
233+  0000 ~            ;-----------------------------------------------------------------------
234+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
235+  0000 ~            ;-----------------------------------------------------------------------
236+  0000 ~
237+  0000 ~                STRUCT FILE_DESCRIPTOR  ; 16 байт
238+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 6 байт  - имя файла
239+  0000 ~            ext             BLOCK   3                   ; смещение 06h, 3 байта - расширение имени файла
240+  0000 ~            attrib          BLOCK   1                   ; смещение 09h, 1 байт  - атрибуты файла: 00h - обычный файл, 01h - системный файл
241+  0000 ~            loadAddress     BLOCK   2                   ; смещение 0Ah, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый
242+  0000 ~            size            BLOCK   2                   ; смещение 0Ch, 2 байта - размер файла в байтах - 1
243+  0000 ~            checkSum        BLOCK   1                   ; смещение 0Eh, 1 байт  - контрольная сумма
244+  0000 ~            firstCluster    BLOCK   1                   ; смещение 0Fh, 1 байт  - номер первого кластера в FAT
245+  0000 ~                ENDS
246+  0000 ~
247+  0000 ~            ;-----------------------------------------------------------------------
248+  0000 ~            ; Десткриптор файла (одна запись в каталоге) MXOS FAT8
249+  0000 ~            ;-----------------------------------------------------------------------
250+  0000 ~
251+  0000                  ENDIF
252+  0000
253+  0000              ;-----------------------------------------------------------------------
254+  0000              ; Буферы в памяти
255+  0000              ;-----------------------------------------------------------------------
256+  0000
257+  0000              CLUSTER_SIZE     = 00100h                   ; размер кластера 256 байт
258+  0000              CLUSTERS_IN_BANK = 10000h / CLUSTER_SIZE    ; сколько кластеров в 64 кб банке
259+  0000
260+  0000                  IF FAT16
261+  0000
262+  0000              FAT_CLUSTERS  = 16      ; сколько кластеров занимает таблица fat
263+  0000              DIR_CLUSTERS  = 4       ; сколько кластеров занимает корневой каталог
264+  0000              FAT_BUFFER    = 8000h - (FAT_CLUSTERS + DIR_CLUSTERS) * CLUSTER_SIZE; адрес буфера таблицы fat в памяти
265+  0000
266+  0000                  ELSE
267+  0000 ~
268+  0000 ~            FAT_CLUSTERS  = 1       ; сколько кластеров занимает таблица fat
269+  0000 ~            DIR_CLUSTERS  = 3       ; сколько кластеров занимает корневой каталог
270+  0000 ~            FAT_BUFFER    = 0FB00h  ; адрес буфера таблицы fat в памяти
271+  0000 ~
272+  0000                  ENDIF
273+  0000
274+  0000              FAT_SIZE      = FAT_CLUSTERS * CLUSTER_SIZE  ; размер таблицы fat в байтах
275+  0000              DIR_SIZE      = DIR_CLUSTERS * CLUSTER_SIZE  ; размер корневого каталога в байтах
276+  0000
277+  0000              DIR_BUFFER    = FAT_BUFFER + FAT_SIZE         ; адрес буфера корневого каталога в памяти
278+  0000
279+  0000              DIR_MAX_FILES = DIR_CLUSTERS * 256 / DIR_DESCR_SIZE    ; Максимум файлов в каталоге
280+  0000
281+  0000              BAT_BUFFER    = 0FC00h  ; буфер для загрузки BAT файла
282+  0000              CMD_LINE      = 0FF00h  ; 192 байта, но в конце стек
283+  0000              STACK_ADDR    = 0FFC0h  ; стек
284+  0000
285+  0000              ;-----------------------------------------------------------------------
286+  0000              ; Всякие полезности
287+  0000              ;-----------------------------------------------------------------------
288+  0000
289+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
290+  0000                  MACRO ORG_PAD adr
291+  0000 ~                     IF $ > adr
292+  0000 ~                       ; вывод сообщения об ошибке
293+  0000 ~                       ASSERT 0
294+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
295+  0000 ~                     ELSE
296+  0000 ~                       ; заполнение памяти
297+  0000 ~                       BLOCK adr-$, 0FFh
298+  0000 ~                     ENDIF
299+  0000 ~                     ORG adr
300+  0000                  ENDM
301+  0000
302+  0000                  MACRO ORG_PAD0 adr
303+  0000 ~                     IF $ > adr
304+  0000 ~                       ; вывод сообщения об ошибке
305+  0000 ~                       ASSERT 0
306+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
307+  0000 ~                     ELSE
308+  0000 ~                       ; заполнение памяти
309+  0000 ~                       BLOCK adr-$, 0
310+  0000 ~                     ENDIF
311+  0000 ~                     ORG adr
312+  0000                  ENDM
313+  0000
314+  0000              ; Макросы для проверки текущего адреса
315+  0000                  MACRO ASSERT_EQUAL adr
316+  0000 ~                     IF $ != adr
317+  0000 ~                       ASSERT 0
318+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
319+  0000 ~                     ENDIF
320+  0000                  ENDM
321+  0000
322+  0000                  MACRO ASSERT_DONT_FIT adr
323+  0000 ~                     IF $ > adr
324+  0000 ~                       ASSERT 0
325+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
326+  0000 ~                     ENDIF
327+  0000                  ENDM
328+  0000
329+  0000              ;-----------------------------------------------------------------------
330+  0000              ; Конец
331+  0000              ;-----------------------------------------------------------------------
332+  0000
# file closed: D:\Projects\Specialist\MySoft\MXOS-Z80\format\../include/mxos.inc
 13   0000
 14   0000                  ORG 0F100h
 15   F100
 16   F100 1A               ld      a, (de)         ; В de передаётся адрес строки аргументов
 17   F101 FE 20            cp      20h
 18   F103 D2 1C F1         jp nc,  ReadParams      ; Прыжок, если есть параметр
 19   F106
 20   F106                  ; Запрос буквы диска для форматирования
 21   F106              chooseDrive:
 22   F106 21 04 F2         ld      hl, str_ChoseDrive
 23   F109 CD 18 C8         call    bios_printString; Вывод сообщения 'CHOOSE DRIVE: '
 24   F10C CD 03 C8         call    bios_getch      ; Ожидание нажатия клавиши
 25   F10F 4F               ld      c, a
 26   F110 CD 09 C8         call    bios_printChar
 27   F113 FE 21            cp      21h             ; сравнение c пробелом
 28   F115 DA E5 F1         jp c,   Abort           ; Выход в ОС, если меньше или равно
 29   F118 47               ld      b, a            ; Запомнить букву диска в b
 30   F119 C3 36 F1         jp      ConfirmRequest
 31   F11C
 32   F11C              ReadParams:
 33   F11C 47               ld      b, a            ; Запомнить букву диска в b
 34   F11D
 35   F11D              SearchLoop1:                ; Поиск первого пробела в строке параметров
 36   F11D 1A               ld      a,(de)
 37   F11E FE 21            cp      21h
 38   F120 DA 27 F1         jp c,   SearchLoop2
 39   F123 13               inc     de
 40   F124 C3 1D F1         jp      SearchLoop1
 41   F127
 42   F127              SearchLoop2:                ; Пропуск последующих пробелов
 43   F127 1A               ld      a,(de)
 44   F128 FE 20            cp      20h
 45   F12A C2 31 F1         jp nz,  SearchLoopExit
 46   F12D 13               inc     de
 47   F12E C3 27 F1         jp      SearchLoop2
 48   F131
 49   F131              SearchLoopExit:
 50   F131 FE 59            cp      'Y'             ; Если найден параметр 'Y', переход к форматированию
 51   F133 CA 4C F1         jp z,   Confirmed
 52   F136
 53   F136                  ; Подтверждение форматирования
 54   F136              ConfirmRequest:
 55   F136 78               ld      a, b
 56   F137 32 F9 F1         ld      (str_A_Y_N), a  ; Заменить 'A' в строке сообщения на введённую букву
 57   F13A 21 F1 F1         ld      hl, str_Format
 58   F13D CD 18 C8         call    bios_printString; вывод сообщения 'FORMAT <буква>: [Y/N]?'
 59   F140 CD 03 C8         call    bios_getch      ; Ожидание нажатия клавиши
 60   F143 4F               ld      c, a
 61   F144 CD 09 C8         call    bios_printChar
 62   F147 FE 59            cp      'Y'             ; сравнение c 'Y'
 63   F149 C2 E5 F1         jp nz,  Abort           ; Выход в ОС, если не 'Y'
 64   F14C
 65   F14C              Confirmed:
 66   F14C 78               ld      a, b            ; Восстановить букву диска в a
 67   F14D
 68   F14D                  ; Буква диска в регистре a
 69   F14D              Format:
 70   F14D D6 41            sub     41h             ; Номер диска
 71   F14F FE 08            cp      08h             ; Максимальный номер диска = 7
 72   F151 D2 EB F1         jp nc,  InvalidDrive    ; Выход, если неверный номер диска
 73   F154 47               ld      b, a            ; Запомнить номер диска в b
 74   F155 F5               push    af              ; И в стеке
 75   F156
 76   F156                  ; Установить выбранный диск текущим
 77   F156 1E 01            ld      e, 01h          ; Номер диска в a
 78   F158 CD 42 C8         call    bios_fileGetSetDrive
 79   F15B
 80   F15B                  ; Выдать размер диска в de
 81   F15B 06 03            ld      b, 3            ; режим 3 - получить размер
 82   F15D CD 63 C8         call    bios_diskDriver ; de = размер в кластерах
 83   F160
 84   F160                  ; Вычисляем количество рабочих и "плохих" кластеров
 85   F160 21 00 08         ld      hl, FAT_SIZE / FAT_ITEM_SIZE
 86   F163 CD DE F1         call    sub_hl_de   ; hl = количество кластеров в fat минус количество кластеров на диске
 87   F166 E5               push    hl
 88   F167
 89   F167                  ; Обнуляем рабочую часть fat (de * CLUSTER_SIZE слов 0000h)
 90   F167                                      ; de = размер в кластерах
 91   F167 21 00 00         ld      hl, buffer  ; hl = адрес буфера
 92   F16A 01 00 00         ld      bc, 0       ; bc = слово для заполнения
 93   F16D CD CE F1         call    memset
 94   F170
 95   F170                  ; Помещаем слово 0001h ("плохой" сектор) в оставшиеся ячейки fat
 96   F170                  ; (у ROM-диска 48 кб это все что выше 48 кб, и т.д.)
 97   F170                                      ; hl = адрес буфера (продолжаем предыдущий)
 98   F170 D1               pop     de          ; de = количество кластеров в fat минус количество кластеров на диске
 99   F171 01 01 00         ld      bc, 1       ; bc = слово для заполнения
100   F174 CD CE F1         call    memset
101   F177
102   F177                  ; Помещаем слово 0001h ("плохой" сектор) в зарезервированные ячейки fat, соответсвующие
103   F177                  ; самой fat и корневому каталогу
104   F177 21 00 00         ld      hl, buffer                      ; hl = адрес буфера
105   F17A 11 14 00         ld      de, FAT_CLUSTERS + DIR_CLUSTERS ; de = количество самой fat и корневого каталога
106   F17D 01 01 00         ld      bc, 1                           ; bc = слово для заполнения
107   F180 CD CE F1         call    memset
108   F183
109   F183                  ; Помещаем слово 0001h ("плохой" сектор) в ячейки fat, соответсвующие
110   F183                  ; неполным секторам в конце 64 кб блоков, если это RAM-диск
111   F183 F1               pop     af  ; a = номер диска
112   F184 FE 01            cp      1   ; RAM-диск это диск 1 ("B:")
113   F186 CC BB F1         call z, MarkRamDiskBads
114   F189
115   F189                  ; Запись FAT на диск
116   F189 21 00 00         ld      hl, buffer
117   F18C 11 00 00         ld      de, 0               ; начинаем с кластера номер 0
118   F18F 0E 10            ld      c,  FAT_CLUSTERS    ; сколько кластеров
119   F191 CD AC F1         call    WriteBuffer
120   F194
121   F194                  ; Создание пустого каталого каталога (DIR_SIZE байт 0FFh)
122   F194 21 00 00         ld      hl, buffer                      ; hl = адрес буфера
123   F197 11 00 02         ld      de, DIR_SIZE / FAT_ITEM_SIZE    ; de = количество секторов
124   F19A 01 FF FF         ld      bc, 0FFFFh                      ; bc = слово для заполнения
125   F19D CD CE F1         call    memset
126   F1A0
127   F1A0                  ; Запись каталога на диск
128   F1A0 21 00 00         ld      hl, buffer
129   F1A3 11 10 00         ld      de, FAT_CLUSTERS ; начинаем с кластера номер FAT_CLUSTERS
130   F1A6 0E 04            ld      c,  DIR_CLUSTERS ; сколько кластеров
131   F1A8 CD AC F1         call    WriteBuffer
132   F1AB
133   F1AB                  ; Выход в ОС
134   F1AB C9               ret
135   F1AC
136   F1AC              ;----------------------------------------------------------------------------
137   F1AC
138   F1AC              ; Запись буфера на диск
139   F1AC              ; c - сколько кластеров
140   F1AC              ; de - номер первого кластера
141   F1AC              WriteBuffer:
142   F1AC 06 01            ld      b,  1   ; режим 1 - запись
143   F1AE 21 00 00         ld      hl, buffer
144   F1B1              WriteBufferLoop:
145   F1B1 CD 63 C8         call    bios_diskDriver
146   F1B4 13               inc     de      ; следующий кластер
147   F1B5 24               inc     h       ; седующий блок в памяти (размер кластера 256 байт)
148   F1B6 0D               dec     c
149   F1B7 C2 B1 F1         jp nz,  WriteBufferLoop
150   F1BA C9               ret
151   F1BB
152   F1BB              ; Пометить неполные сектора RAM-диска как "бэды"
153   F1BB              MarkRamDiskBads:
154   F1BB 06 08            ld      b,  FAT_CLUSTERS / FAT_ITEM_SIZE    ; b = количество 64кб банок RAM-диска
155   F1BD 21 FE 01         ld      hl, buffer + 255 * FAT_ITEM_SIZE    ; hl = адрес первого "бэда" в буфере fat
156   F1C0 11 FF 01         ld      de, 256 * FAT_ITEM_SIZE - 1         ; de = приращение адреса для перехода к следующему "бэду"
157   F1C3              MarkRamDiskBadsLoop:
158   F1C3 36 01            ld      (hl), 1
159   F1C5 23               inc     hl
160   F1C6 36 00            ld      (hl), 0
161   F1C8 19               add     hl, de
162   F1C9 05               dec     b
163   F1CA C2 C3 F1         jp nz,  MarkRamDiskBadsLoop
164   F1CD C9               ret
165   F1CE
166   F1CE              ; Заполнение памяти по адресу hl словом bc количеством слов de
167   F1CE              memset:
168   F1CE 7A               ld      a, d
169   F1CF B3               or      e
170   F1D0 C8               ret     z   ; если de == 0, выходим
171   F1D1              memsetLoop:
172   F1D1 79               ld      a, c
173   F1D2 77               ld      (hl), a
174   F1D3 23               inc     hl
175   F1D4 78               ld      a, b
176   F1D5 77               ld      (hl), a
177   F1D6 23               inc     hl
178   F1D7 1B               dec     de
179   F1D8 7A               ld      a, d
180   F1D9 B3               or      e
181   F1DA C2 D1 F1         jp nz,  memsetLoop
182   F1DD C9               ret
183   F1DE
184   F1DE              ; hl = hl - de
185   F1DE              sub_hl_de:
186   F1DE 7D               ld    a, l
187   F1DF 93               sub   e
188   F1E0 6F               ld    l, a
189   F1E1 7C               ld    a, h
190   F1E2 9A               sbc   d
191   F1E3 67               ld    h, a
192   F1E4 C9               ret
193   F1E5
194   F1E5              ; Вывод сообщения 'ABORTING'
195   F1E5              Abort:
196   F1E5 21 2A F2         ld      hl, str_Aborting
197   F1E8 C3 18 C8         jp      bios_printString
198   F1EB
199   F1EB                  ; Вывод сообщения 'INVALID DRIVE LETTER'
200   F1EB              InvalidDrive:
201   F1EB 21 14 F2         ld      hl, str_InvalidDrive
202   F1EE C3 18 C8         jp      bios_printString
203   F1F1
204   F1F1              ;----------------------------------------------------------------------------
205   F1F1              ; Данные
206   F1F1
207   F1F1              str_Format:
208   F1F1 0A 46 4F 52      DB 0Ah,"FORMAT "
208   F1F5 4D 41 54 20
209   F1F9
210   F1F9              str_A_Y_N:
211   F1F9 41 3A 20 5B      DB "A: [Y/N]? ",0
211   F1FD 59 2F 4E 5D
211   F201 3F 20 00
212   F204
213   F204              str_ChoseDrive:
214   F204 0A 43 48 4F      DB 0Ah,"CHOOSE DRIVE: ",0
214   F208 4F 53 45 20
214   F20C 44 52 49 56
214   F210 45 3A 20 00
215   F214
216   F214              str_InvalidDrive:
217   F214 0A 49 4E 56      DB 0Ah,"INVALID DRIVE LETTER",0
217   F218 41 4C 49 44
217   F21C 20 44 52 49
217   F220 56 45 20 4C
217   F224 45 54 54 45
217   F228 52 00
218   F22A
219   F22A              str_Aborting:
220   F22A 0A 41 42 4F      DB 0Ah,"ABORTING",0
220   F22E 52 54 49 4E
220   F232 47 00
221   F234
222   F234              buffer = 0000h ; 0D100h ; Адрес буфера
223   F234
224   F234              ;----------------------------------------------------------------------------
225   F234
226   F234                  END
# file closed: D:\Projects\Specialist\MySoft\MXOS-Z80\format\FORMAT.asm
