# file opened: D:\Projects\Specialist\MySoft\MXOS-Z80\format\FORMAT.asm
  1   0000              ;----------------------------------------------------------------------------
  2   0000              ; MXOS
  3   0000              ; FORMAT.COM
  4   0000              ;
  5   0000              ; Доработки:
  6   0000              ; - "тихий режим" по параметру Y (форматировать без cпроcа)
  7   0000              ;    например FORMAT.COM B: Y
  8   0000              ;
  9   0000              ; 2022-01-14 Дизассемблировано и переработано SpaceEngineer
 10   0000              ;----------------------------------------------------------------------------
 11   0000
 12   0000                  INCLUDE "../include/mxos.inc"
# file opened: D:\Projects\Specialist\MySoft\MXOS-Z80\format\../include/mxos.inc
  1+  0000              ;-----------------------------------------------------------------------
  2+  0000              ; MXOS
  3+  0000              ; Точки входа и настройки сборки MXOS
  4+  0000              ;
  5+  0000              ; Новая карта памяти:
  6+  0000              ;   8FDF-8FFF - [  32 B] Переменные
  7+  0000              ;   9000-BFFF - [12  KB] Экран
  8+  0000              ;   C000-D3FF - [5120 B] DOS.SYS
  9+  0000              ;   D400-DBFF - [2048 B] Свободно (2048 байт)
 10+  0000              ;   DC00-EDFF - [ 512 B] Драйвер магнитофона
 11+  0000              ;   DE00-DFFF - [ 512 B] Драйвер флеш-диска
 12+  0000              ;   E000-E7FF - [2048 B] Шрифт
 13+  0000              ;   E800-FAFF - [4864 B] Системные программы (NC.COM, E.COM, DL-RED.COM, FORMAT.COM, MON2.COM, ...)
 14+  0000              ;   FB00-FEFF - [1024 B] Дисковый кэш (fat + каталог)
 15+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 16+  0000              ;   FF82-FFBF - [  62 B] Стек
 17+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 18+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 19+  0000              ;
 20+  0000              ; Старая карта памяти:
 21+  0000              ;   8FDF-8FFF - [  32 B] Переменные
 22+  0000              ;   9000-BFFF - [12  KB] Экран
 23+  0000              ;   C000-CFFF - [4096 B] DOS.SYS
 24+  0000              ;   D000-E1FF - [4607 B] Системные программы (NC.COM, E.COM, DL-RED.COM)
 25+  0000              ;   E200-E5FF - [1024 B] Свободно (1024 байт)
 26+  0000              ;   E600-E7FF - [ 512 B] Драйвер магнитофона
 27+  0000              ;   E800-E8FF - [ 256 B] Свободно (256 байт)
 28+  0000              ;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
 29+  0000              ;   F100-F8FF - [2048 B] Системные программы (FORMAT.COM, MON2.COM, ...)
 30+  0000              ;   F900-F9FF - [ 256 B] Свободно (256 байт)
 31+  0000              ;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
 32+  0000              ;   FB00-FEFF - [1024 B] Дисковый буфер (fat + каталог)
 33+  0000              ;   FF00-FF81 - [ 130 B] Командная строка
 34+  0000              ;   FF82-FFBF - [  62 B] Стек
 35+  0000              ;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
 36+  0000              ;   FFE0-FFFF - [  32 B] Оборудование
 37+  0000              ;-----------------------------------------------------------------------
 38+  0000
 39+  0000
 40+  0000              ;-----------------------------------------------------------------------
 41+  0000              ; Конфигурация сборки
 42+  0000              ;-----------------------------------------------------------------------
 43+  0000
 44+  0000              NEW_MEMORY_MAP       =  1       ; Новая карта памяти
 45+  0000              RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
 46+  0000              RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
 47+  0000              ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
 48+  0000              ENABLE_COLOR         =  1       ; Включить поддержку цвета
 49+  0000              EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
 50+  0000              LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
 51+  0000              COLOR_BIOS           =  0F0h    ; Цвет командной строки
 52+  0000              RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
 53+  0000              BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса
 54+  0000
 55+  0000                  IF  NEW_MEMORY_MAP
 56+  0000              FONT_ADDR = 0E000h  ; Адрес шрфита
 57+  0000                  ELSE
 58+  0000 ~            FONT_ADDR = 0E900h  ; Адрес шрфита
 59+  0000                  ENDIF
 60+  0000
 61+  0000                  IF  LOAD_FONT
 62+  0000              FONT_ADDR_DIV_8 = FONT_ADDR/8
 63+  0000                  ELSE
 64+  0000 ~            FONT_ADDR_DIV_8 = -1
 65+  0000                  ENDIF
 66+  0000
 67+  0000              ;-----------------------------------------------------------------------
 68+  0000              ; Переменные ОС в подэкранном пространстве и их начальные значения
 69+  0000              ; Доступ к переменным и программ польователя:
 70+  0000              ; ld a, bios_vars.lastKey
 71+  0000              ;-----------------------------------------------------------------------
 72+  0000
 73+  0000                  STRUCT BIOS_VARIABLES
 74+  0000 ~            _reserv_1     DW      -1              ; 8FDFh -
 75+  0000 ~            tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
 76+  0000 ~            tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
 77+  0000 ~            _reserv_2     DW      -1              ; 8FE5h -
 78+  0000 ~            charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
 79+  0000 ~            cursorCfg     DB       21h ; 0A9h     ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
 80+  0000 ~            koi7          DB       0   ; 0FFh     ; 8FEAh - 0FFh = включен KOI-7, 0 = включен KOI-8
 81+  0000 ~            escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
 82+  0000 ~            keyLocks      DB      0BAh ; 3Ah      ; 8FECh - Caps Lock или Рус/Lat (3A - прописные анг, BA - строчные анг, BB - прописные рус, 3B - строчные рус)
 83+  0000 ~            _reserv_3     DW      -1              ; 8FEDh -
 84+  0000 ~            lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
 85+  0000 ~            lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
 86+  0000 ~            beepFreq      DB       5Fh            ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
 87+  0000 ~            beepDuration  DB       20h            ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
 88+  0000 ~            tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
 89+  0000 ~            cursorDelay   DB       20h            ; 8FF4h - Задержка мигания курсора
 90+  0000 ~            antiBsDelay   DB      0E0h            ; 8FF5h - Задержка защиты от дребезга контактов клавиш
 91+  0000 ~            oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
 92+  0000 ~            ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
 93+  0000 ~            _reserv_4     DB       0              ; 8FF9h -
 94+  0000 ~            inverse       DW       0              ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
 95+  0000 ~            cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
 96+  0000 ~            cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
 97+  0000 ~            writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
 98+  0000 ~            readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
 99+  0000                  ENDS
100+  0000
101+  0000              ; Блок переменных BIOS начинается с адреса 8FDFh
102+  0000              bios_vars   BIOS_VARIABLES = 8FDFh
103+  0000
104+  0000              ;-----------------------------------------------------------------------
105+  0000              ; Стандартные точки входа ОС
106+  0000              ; Отмеченные [OLD] применять не рекомендуется
107+  0000              ; Отмеченные [MXOS2] - новые в MXOS 2
108+  0000              ;-----------------------------------------------------------------------
109+  0000
110+  0000              bios_init               = 0C000h ; Теплая перезагрузка
111+  0000
112+  0000              ; Устаревшие точки, лечше не применять
113+  0000              bios_keyScanOld         = 0C003h ; [OLD] Получить код нажатой клавиши, = bios_keyScan
114+  0000              bios_drawCursorOld      = 0C006h ; [OLD] Нарисовать/стереть курсор
115+  0000              bios_clearScreenOld     = 0C010h ; [OLD] Оистка экрана
116+  0000              bios_printCharOld       = 0C037h ; [OLD] Вывод символа на экран
117+  0000              bios_beep_Old           = 0C170h ; [OLD] Звуковой сигнал
118+  0000              bios_delay_l            = 0C18Fh ; [OLD] Задержка l циклов
119+  0000              bios_delay_b            = 0C190h ; [OLD] Задержка b циклов
120+  0000              bios_getchOld           = 0C337h ; [OLD] Ожидание ввода с клавиатуры
121+  0000              bios_tapeReadOld        = 0C377h ; [OLD] Чтение байта с магнитофона
122+  0000              bios_tapeWriteOld       = 0C3D0h ; [OLD] Запись байта на магнитофон
123+  0000              bios_cmp_hl_de          = 0C427h ; [OLD] Сравнить hl и de
124+  0000              bios_memcpy_bc_hl       = 0C42Dh ; [OLD] Скопировать блок памяти
125+  0000              bios_printStringOld     = 0C438h ; [OLD] Вывод строки на экран
126+  0000
127+  0000              ; Стандартные точки C800h
128+  0000              bios_reboot             = 0C800h ; Запустить NC.COM
129+  0000              bios_getch              = 0C803h ; Ожидание ввода с клавиатуры
130+  0000              bios_tapeRead           = 0C806h ; Чтение байта с магнитофона
131+  0000              bios_printChar          = 0C809h ; Вывод символа на экран
132+  0000              bios_tapeWrite          = 0C80Ch ; Запись байта на магнитофон
133+  0000              bios_input              = 0C80Fh ; Ввод строки с клавиатуры
134+  0000              bios_keyCheck           = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
135+  0000              bios_printHexByte       = 0C815h ; Вывод HEX числа на экран (байт)
136+  0000              bios_printString        = 0C818h ; Вывод строки на экран
137+  0000              bios_keyScan            = 0C81Bh ; Получить код нажатой клавиши
138+  0000              bios_getCursorPos       = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
139+  0000              bios_setCursorPos       = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
140+  0000              bios_tapeLoad           = 0C824h ; Загрузить программу с магнитофона
141+  0000              bios_tapeSave           = 0C827h ; Сохранить программу на магнитофон
142+  0000              bios_calcCS             = 0C82Ah ; Расчет контрольной суммы
143+  0000              bios_printHexWord       = 0C82Dh ; Вывод HEX числа на экран (слово)
144+  0000              bios_getMemTop          = 0C830h ; Получить объем доступной памяти
145+  0000              bios_setMemTop          = 0C833h ; Установить объем доступной памяти
146+  0000              bios_printer            = 0C836h ; Напечатать байт на принтере
147+  0000                  IF RAMFOS_COMPATIBILITY
148+  0000              bios_strToHex           = 0C839h ; [MXOS2] Преобразвоние строки в HEX формате в число
149+  0000                  ELSE
150+  0000 ~            bios_rebootAlt          = 0C839h ; Запустить NC.COM
151+  0000                  ENDIF
152+  0000              bios_rebootAlt2         = 0C83Ch ; Запустить NC.COM
153+  0000              bios_fileList           = 0C83Fh ; Получить список файлов
154+  0000              bios_fileGetSetDrive    = 0C842h ; Получить/установить активное устройство
155+  0000              bios_fileCreate         = 0C845h ; Создать файл
156+  0000              bios_fileLoad           = 0C848h ; Загрузить файл по адресу из заголовка этого файла
157+  0000              bios_fileDelete         = 0C84Bh ; Удалить файл
158+  0000              bios_fileRename         = 0C84Eh ; Переименовать файл
159+  0000              bios_fileLoadInfo       = 0C851h ; Загрузить информацию о файле
160+  0000              bios_fileGetSetAddr     = 0C854h ; Получить/установить адрес загрузки файла
161+  0000              bios_fileGetSetAttr     = 0C857h ; Получить/установить атрибуты файла
162+  0000              bios_fileNamePrepare    = 0C85Ah ; Преобразовать имя файла во внутренний формат
163+  0000              bios_fileExec           = 0C85Dh ; Запустить файл
164+  0000              bios_installDriver      = 0C860h ; Установить драйвер накопителя
165+  0000              bios_diskDriver         = 0C863h ; Драйвер выбранного диска
166+  0000              bios_fileLoad2          = 0C866h ; Загрузить файл по адресу de
167+  0000
168+  0000              ; Новые точки C800h MXOS2
169+  0000              bios_printCharReal      = 0C869h ; [MXOS2] Вывод символа на экран (только реальные символы)
170+  0000              bios_printDecWord       = 0C86Ch ; [MXOS2] Вывод числа экран в десятичной форме
171+  0000              bios_setRAMDDriver      = 0C86Fh ; [MXOS2] Установить драйвр рам-диска
172+  0000              bios_getDriveFreeSpace  = 0C872h ; [MXOS2] Получить оставшийся свободный объем диска
173+  0000              bios_upperCase          = 0C875h ; [MXOS2] Перевод кода символа КОИ-8 в верхний регистр
174+  0000              bios_strcmp             = 0C878h ; [MXOS2] Сравнение строк, чувствительное к регистру
175+  0000              bios_stricmp            = 0C87Bh ; [MXOS2] Сравнение строк, нечувствительное к регистру
176+  0000              bios_sub_hl_de          = 0C87Eh ; [MXOS2] Вычитание hl и de: hl = hl - de
177+  0000              bios_div_hl_2           = 0C881h ; [MXOS2] Деление hl на 2: hl = hl / 2
178+  0000              bios_mul_hl_de          = 0C884h ; [MXOS2] Умножение hl на de: hl = hl * de
179+  0000              bios_div_hl_de          = 0C887h ; [MXOS2] Деление hl на de: hl = hl / de, de = hl % de
180+  0000
181+  0000              ;-----------------------------------------------------------------------
182+  0000              ; Адрес таблицы переходов драйвера магнитофона
183+  0000              ;-----------------------------------------------------------------------
184+  0000
185+  0000              TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта
186+  0000
187+  0000              ;-----------------------------------------------------------------------
188+  0000              ; Непереключаемое ОЗУ ПК "Специалист-MX" (0FFC0h-0FFDF, 32 байта)
189+  0000              ;-----------------------------------------------------------------------
190+  0000
191+  0000              bios_RAMDRead   = 0FFC0h ; п/п чтения из ДОЗУ
192+  0000              bios_RAMDWrite  = 0FFD0h ; п/п записи в  ДОЗУ
193+  0000
194+  0000              ;-----------------------------------------------------------------------
195+  0000              ; Порты устройств ПК "Специалист-MX2" (0FFE0h-0FFFF, 32 байта)
196+  0000              ;-----------------------------------------------------------------------
197+  0000
198+  0000              IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
199+  0000              IO_KEYB_B       =  0FFE1h
200+  0000              IO_KEYB_C       =  0FFE2h
201+  0000              IO_KEYB_MODE    =  0FFE3h
202+  0000              IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
203+  0000              IO_PROG_B       =  0FFE5h
204+  0000              IO_PROG_C       =  0FFE6h
205+  0000              IO_PROG_MODE    =  0FFE7h
206+  0000              IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
207+  0000              IO_FDD_TRACK    =  0FFE9h
208+  0000              IO_FDD_SECTOR   =  0FFEAh
209+  0000              IO_FDD_DATA     =  0FFEBh
210+  0000              IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
211+  0000              IO_TIMER_CH1    =  0FFEDh
212+  0000              IO_TIMER_CH2    =  0FFEEh
213+  0000              IO_TIMER_MODE   =  0FFEFh
214+  0000              IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
215+  0000              IO_FDD_MOTOR    =  0FFF1h
216+  0000              IO_FDD_SIDE     =  0FFF2h
217+  0000              IO_FDD_DRIVE    =  0FFF3h
218+  0000              IO_COLOR        =  0FFF8h   ; регистр цвета
219+  0000              IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
220+  0000              IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
221+  0000              IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
222+  0000              IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима
223+  0000
224+  0000              ;-----------------------------------------------------------------------
225+  0000              ; Структура файловой системы
226+  0000              ;-----------------------------------------------------------------------
227+  0000
228+  0000              ; Структура каталога
229+  0000              DIR_DESCR_SIZE  = 32    ; размер дескриптора файла в каталоге (байт)
230+  0000              DIR_NAME_LENGTH = 8     ; длина имени файла  (байт)
231+  0000              FAT_ITEM_SIZE   = 2     ; размер записи в таблице FAT (байт)
232+  0000
233+  0000              SECTOR_SIZE  = 00100h   ; размер сектора 256 байт
234+  0000              CLUSTER_SIZE = 00100h   ; размер кластера 256 байт
235+  0000
236+  0000              ; Специальные коды кластеров FAT
237+  0000              FAT12_BAD = 00FF7h  ; плохой кластер
238+  0000              FAT16_BAD = 0FFF7h
239+  0000              FAT12_EOC = 00FFFh  ; последний кластер файла
240+  0000              FAT16_EOC = 0FFFFh
241+  0000              FAT12_RES = 00FFFh  ; зарезервированный кластер
242+  0000              FAT16_RES = 0FFFFh
243+  0000
244+  0000              ;-----------------------------------------------------------------------
245+  0000              ; Десткриптор файла (одна запись в каталоге) FAT12/16/32
246+  0000              ;-----------------------------------------------------------------------
247+  0000
248+  0000                  STRUCT FILE_DESCRIPTOR  ; 32 байта
249+  0000 ~            name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
250+  0000 ~            ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
251+  0000 ~            attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
252+  0000 ~            ntReserved      BLOCK   1                   ; смещение 0Ch, 1 байт  - используются в Windows NT
253+  0000 ~            createTimeTenth BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
254+  0000 ~            createTime      BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
255+  0000 ~            createDate      BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
256+  0000 ~            loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
257+  0000 ~            firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
258+  0000 ~            writeTime       BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
259+  0000 ~            writeDate       BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
260+  0000 ~            firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
261+  0000 ~            size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
262+  0000                  ENDS
263+  0000
264+  0000              ;-----------------------------------------------------------------------
265+  0000              ; Информация о активном накопителе (диске)
266+  0000              ;-----------------------------------------------------------------------
267+  0000
268+  0000                  STRUCT DISK_INFO
269+  0000 ~            sectorSize          BLOCK   2   ; размер сектора, байт (256, 512, 1024)
270+  0000 ~            sectorsPerCluster   BLOCK   2   ; размер кластера, секторов (1, 2, 4, 8)
271+  0000 ~            resSectors          BLOCK   2   ; сколько секторов занимает зарезервированная область = первый сектор таблицы fat
272+  0000 ~            fatSectors          BLOCK   2   ; сколько секторов занимает таблица fat
273+  0000 ~            dirSectors          BLOCK   2   ; сколько секторов занимает корневой каталог
274+  0000 ~            totalSectors        BLOCK   2   ; сколько всего секторов на диске
275+  0000 ~            rootDirMaxFiles     BLOCK   2   ; максимум файлов в корневом каталоге
276+  0000 ~            descrPerSector      BLOCK   2   ; сколько дескрипторов файлов вмещается в один сектор
277+  0000 ~            fatNumCells         BLOCK   2   ; количество ячеек в таблице fat (= fatSectors * sectorSize / 2)
278+  0000 ~            dirStartSector      BLOCK   2   ; первый сектор корневого каталога
279+  0000 ~            dataStartSector     BLOCK   2   ; первый сектор области данных
280+  0000 ~            volumeLabel         BLOCK  12   ; метка тома и 0 в конце
281+  0000 ~            isValid             BLOCK   1   ; 0 = нет драйвера, 1 = диск не распознан, 2 = диск распознан, корректно отформатирован
282+  0000                  ENDS
283+  0000
284+  0000              DISK_NO_DRIVER = 0
285+  0000              DISK_INVALID   = 1
286+  0000              DISK_VALID     = 2
287+  0000
288+  0000              ;-----------------------------------------------------------------------
289+  0000              ; Буферы в памяти
290+  0000              ;-----------------------------------------------------------------------
291+  0000
292+  0000              ; Дисковый кэш
293+  0000              FAT_CACHE_ADDR = 0FB00h ; адрес кэша секторов fat в памяти
294+  0000              FAT_CACHE_SIZE = 1024   ; размер кэша в байтах
295+  0000              FAT_CACHE_CAPACITY = FAT_CACHE_SIZE / SECTOR_SIZE   ; сколько секторов вмещается в кэш
296+  0000
297+  0000              ; Буфер для загрузки BAT файла
298+  0000                  IF NEW_MEMORY_MAP
299+  0000              BAT_BUFFER = 0E800h
300+  0000                  ELSE
301+  0000 ~            BAT_BUFFER = 0FC00h
302+  0000                  ENDIF
303+  0000
304+  0000              ; Командная строка и стек
305+  0000              CMD_LINE   = 0FF00h  ; 192 байта, но в конце стек
306+  0000              STACK_ADDR = 0FFC0h  ; стек
307+  0000
308+  0000              ;-----------------------------------------------------------------------
309+  0000              ; Всякие полезности
310+  0000              ;-----------------------------------------------------------------------
311+  0000
312+  0000              ; Макрос для заполнения памяти от текущего адреса до указанного
313+  0000                  MACRO ORG_PAD adr
314+  0000 ~                     IF $ > adr
315+  0000 ~                       ; вывод сообщения об ошибке
316+  0000 ~                       ASSERT 0
317+  0000 ~                       DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
318+  0000 ~                     ELSE
319+  0000 ~                       ; заполнение памяти
320+  0000 ~                       BLOCK adr-$, 0FFh
321+  0000 ~                     ENDIF
322+  0000 ~                     ORG adr
323+  0000                  ENDM
324+  0000
325+  0000                  MACRO ORG_PAD0 adr
326+  0000 ~                     IF $ > adr
327+  0000 ~                       ; вывод сообщения об ошибке
328+  0000 ~                       ASSERT 0
329+  0000 ~                       DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
330+  0000 ~                     ELSE
331+  0000 ~                       ; заполнение памяти
332+  0000 ~                       BLOCK adr-$, 0
333+  0000 ~                     ENDIF
334+  0000 ~                     ORG adr
335+  0000                  ENDM
336+  0000
337+  0000              ; Макросы для проверки текущего адреса
338+  0000                  MACRO ASSERT_EQUAL adr
339+  0000 ~                     IF $ != adr
340+  0000 ~                       ASSERT 0
341+  0000 ~                       DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
342+  0000 ~                     ENDIF
343+  0000                  ENDM
344+  0000
345+  0000                  MACRO ASSERT_DONT_FIT adr
346+  0000 ~                     IF $ > adr
347+  0000 ~                       ASSERT 0
348+  0000 ~                       DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
349+  0000 ~                     ENDIF
350+  0000                  ENDM
351+  0000
352+  0000              ;-----------------------------------------------------------------------
353+  0000              ; Конец
354+  0000              ;-----------------------------------------------------------------------
355+  0000
# file closed: D:\Projects\Specialist\MySoft\MXOS-Z80\format\../include/mxos.inc
 13   0000
 14   0000              SECTOR_SIZE = 256           ; размер сектора в байтах
 15   0000
 16   0000                  ORG 0F100h
 17   F100
 18   F100 1A               ld      a, (de)         ; в de передаётся адрес строки аргументов
 19   F101 FE 20            cp      20h
 20   F103 D2 1F F1         jp nc,  ReadParams      ; прыжок, если есть параметр
 21   F106
 22   F106                  ; Запрос буквы диска для форматирования
 23   F106              chooseDrive:
 24   F106 21 C4 F2         ld      hl, str_ChoseDrive
 25   F109 CD 18 C8         call    bios_printString; вывод сообщения 'CHOOSE DRIVE: '
 26   F10C CD 03 C8         call    bios_getch      ; ожидание нажатия клавиши
 27   F10F 4F               ld      c, a
 28   F110 CD 09 C8         call    bios_printChar
 29   F113 FE 21            cp      21h             ; сравнение c пробелом
 30   F115 DA A5 F2         jp c,   errAbort        ; выход в ОС, если меньше или равно
 31   F118 CD 75 C8         call    bios_upperCase  ; превод буквы в верхний регистр
 32   F11B 47               ld      b, a            ; запомнить букву диска в b
 33   F11C C3 60 F1         jp      ConfirmRequest
 34   F11F
 35   F11F              ReadParams:
 36   F11F CD 75 C8         call    bios_upperCase  ; превод буквы в верхний регистр
 37   F122 47               ld      b, a            ; запомнить букву диска в b
 38   F123
 39   F123              SearchLoop1:                ; поиск первого пробела в строке параметров
 40   F123 1A               ld      a, (de)
 41   F124 FE 21            cp      21h
 42   F126 DA 2D F1         jp c,   SearchLoop2
 43   F129 13               inc     de
 44   F12A C3 23 F1         jp      SearchLoop1
 45   F12D
 46   F12D              SearchLoop2:                ; пропуск последующих пробелов
 47   F12D 1A               ld      a, (de)
 48   F12E FE 20            cp      20h
 49   F130 C2 37 F1         jp nz,  AnalyzeParam
 50   F133 13               inc     de
 51   F134 C3 2D F1         jp      SearchLoop2
 52   F137
 53   F137              AnalyzeParam:
 54   F137 FE 21            cp      21h
 55   F139 DA 59 F1         jp c,   SearchExit      ; конец строки параметров
 56   F13C CD 75 C8         call    bios_upperCase  ; превод буквы в верхний регистр
 57   F13F FE 59            cp      'Y'             ; если найден параметр 'Y', установим флаг "форматировать без подтверждения"
 58   F141 C2 4C F1         jp nz,  AnalyzeParam1
 59   F144 3E FF            ld      a, 0FFh
 60   F146 32 0A F3         ld      (v_FormatConfirmed), a
 61   F149 C3 23 F1         jp      SearchLoop1     ; продолжаем анализировать строку параметров
 62   F14C              AnalyzeParam1:
 63   F14C FE 52            cp      'R'             ; если найден параметр 'R', установим флаг "форматировать как RAM-диск"
 64   F14E C2 23 F1         jp nz,  SearchLoop1     ; иначе продолжаем анализировать строку параметров
 65   F151 3E FF            ld      a, 0FFh
 66   F153 32 0B F3         ld      (v_FormatRAMdisk), a
 67   F156 C3 23 F1         jp      SearchLoop1     ; продолжаем анализировать строку параметров
 68   F159
 69   F159              SearchExit:
 70   F159 3A 0A F3         ld      a, (v_FormatConfirmed)
 71   F15C B7               or      a
 72   F15D C2 7C F1         jp nz,  Confirmed
 73   F160
 74   F160                  ; Параметр Y не найден - вывод запроса на подтверждение форматирования
 75   F160              ConfirmRequest:
 76   F160 78               ld      a, b
 77   F161 32 B9 F2         ld      (str_A_Y_N), a  ; заменить 'A' в строке сообщения на введённую букву
 78   F164 21 AB F2         ld      hl, str_Format
 79   F167 CD 18 C8         call    bios_printString; вывод сообщения 'FORMAT <буква>: [Y/N]?'
 80   F16A CD 03 C8         call    bios_getch      ; ожидание нажатия клавиши
 81   F16D CD 75 C8         call    bios_upperCase  ; превод буквы в верхний регистр
 82   F170 4F               ld      c, a
 83   F171 CD 09 C8         call    bios_printChar
 84   F174 FE 59            cp      'Y'             ; если найден параметр 'Y', переход к форматированию
 85   F176 CA 7C F1         jp z,   Confirmed
 86   F179 C3 A5 F2         jp      errAbort        ; выход в ОС, если не 'Y/y'
 87   F17C
 88   F17C              Confirmed:
 89   F17C 78               ld      a, b            ; восстановить букву диска в a
 90   F17D
 91   F17D                  ; Буква диска в регистре a
 92   F17D              Format:
 93   F17D D6 41            sub     41h             ; номер диска
 94   F17F FE 08            cp      08h             ; максимальный номер диска = 7
 95   F181 D2 99 F2         jp nc,  errInvalidDrive ; выход в ОС, если неверный номер диска
 96   F184 47               ld      b, a            ; запомнить номер диска в b
 97   F185
 98   F185                  ; Установить выбранный диск текущим
 99   F185 1E 01            ld      e, 01h          ; Номер диска в a
100   F187 CD 42 C8         call    bios_fileGetSetDrive
101   F18A
102   F18A                  ; Выдать размер диска в de
103   F18A 06 03            ld      b, 3            ; режим 3 - получить размер
104   F18C CD 63 C8         call    bios_diskDriver ; de = размер в секторах
105   F18F
106   F18F                  ; Если de == 0, драйвер диска не установлен
107   F18F 7A               ld      a, d
108   F190 B3               or      e
109   F191 CA 9F F2         jp z,   errNoDriver     ; выход в ОС, если нет драйвера
110   F194
111   F194                  ; Cохраняем количество секторов диска в структуру загрузочного сектора
112   F194 EB               ex      hl, de
113   F195 22 2B F3         ld      (v_TotalSectors), hl
114   F198
115   F198                  ; Если был параметр 'R', меняем метку тома на "RAM DISK"
116   F198 3A 0B F3         ld      a, (v_FormatRAMdisk)
117   F19B B7               or      a               ; был ли параметр 'R'?
118   F19C CA AD F1         jp z,   CalcParams      ; если не было, переходим
119   F19F
120   F19F                  ; Меняем метку тома
121   F19F E5               push    hl
122   F1A0 21 FF F2         ld      hl, str_RAM_DISK
123   F1A3 11 0A F3         ld      de, str_RAM_DISK + 11
124   F1A6 01 43 F3         ld      bc, v_VolLabel
125   F1A9 CD 2D C4         call    bios_memcpy_bc_hl
126   F1AC E1               pop     hl
127   F1AD
128   F1AD              CalcParams:
129   F1AD
130   F1AD                  ; Расчитываем размер таблицы fat
131   F1AD 29               add     hl, hl              ; hl * 2 - размер fat в байтах
132   F1AE 22 0C F3         ld      (v_FatBytes), hl
133   F1B1 11 00 01         ld      de, SECTOR_SIZE     ; de = размер сектора в байтах
134   F1B4 CD 87 C8         call    bios_div_hl_de      ; hl = количество секторов fat
135   F1B7 22 2E F3         ld      (v_FatSectors), hl  ; сохраняем значение
136   F1BA
137   F1BA                  ; Расчитываем номер первого сектора каталога
138   F1BA 23               inc     hl                      ; hl = размер fat + 1 загрузочный сектор
139   F1BB 22 12 F3         ld      (v_DirStartSector), hl  ; сохраняем значение
140   F1BE
141   F1BE                  ; Расчитываем размер каталога
142   F1BE 2A 29 F3         ld      hl,(v_DirFiles)     ; количество дескрипторов в корневом каталоге
143   F1C1 11 20 00         ld      de, DIR_DESCR_SIZE  ; размер дескриптора в байтах
144   F1C4 CD 84 C8         call    bios_mul_hl_de      ; размер каталога в байтах
145   F1C7 22 0E F3         ld      (v_DirBytes), hl
146   F1CA 11 00 01         ld      de, SECTOR_SIZE
147   F1CD CD 87 C8         call    bios_div_hl_de      ; hl = количество секторов каталога
148   F1D0 22 10 F3         ld      (v_DirSectors), hl
149   F1D3
150   F1D3                  ; Расчитываем номер первого сектора области данных
151   F1D3 EB               ex      hl, de
152   F1D4 2A 12 F3         ld      hl, (v_DirStartSector)
153   F1D7 19               add     hl, de                  ; hl = размер каталога + размер fat + 1 загрузочный сектор
154   F1D8 22 16 F3         ld      (v_DataStartSector), hl ; сохраняем значение
155   F1DB
156   F1DB                  ; Расчитывем размер области данных
157   F1DB EB               ex      hl, de
158   F1DC 2A 2B F3         ld      hl, (v_TotalSectors); hl = количество секторов на диске
159   F1DF CD 7E C8         call    bios_sub_hl_de      ; hl = количество секторов на диске минус все зарезервированные
160   F1E2 22 14 F3         ld      (v_DataSectors), hl ; сохраняем значение
161   F1E5
162   F1E5              ;----------------------------------------------------------------------------
163   F1E5              ; Загрузочный сектор
164   F1E5
165   F1E5                  ; Копируем заголовок загрузочного сектора в буфер
166   F1E5 21 18 F3         ld      hl, v_HeaderStart
167   F1E8 11 56 F3         ld      de, v_HeaderEnd
168   F1EB 01 00 00         ld      bc, buffer
169   F1EE CD 2D C4         call    bios_memcpy_bc_hl
170   F1F1
171   F1F1                  ; Остальное заполняем байтом 0FFh
172   F1F1 21 3E 00         ld      hl, buffer      + v_HeaderEnd - v_HeaderStart
173   F1F4 11 C2 00         ld      de, SECTOR_SIZE - v_HeaderEnd + v_HeaderStart
174   F1F7 06 FF            ld      b, 0FFh
175   F1F9 CD 90 F2         call    memset
176   F1FC
177   F1FC                  ; Записываем загрузочный сектор на диск
178   F1FC 21 00 00         ld      hl, buffer          ; адрес буфера
179   F1FF 11 00 00         ld      de, 0               ; сектор номер 0
180   F202 0E 01            ld      c,  1               ; сколько секторов
181   F204 CD 5E F2         call    WriteBuffer
182   F207
183   F207              ;----------------------------------------------------------------------------
184   F207              ; FAT
185   F207
186   F207                  ; Сколько ячеек fat нельзя использовать
187   F207 2A 16 F3         ld      hl, (v_DataStartSector) ; hl = сколько секторов заняты загрузочным сектором, fat и каталогом
188   F20A 2B               dec     hl                      ; первые две ячейки fat зарезервированы
189   F20B 2B               dec     hl
190   F20C 29               add     hl, hl                  ; hl *= 2 - столько байт в конце таблицы fat нельзя использовать (сектор = кластер!)
191   F20D E5               push    hl
192   F20E
193   F20E                  ; Обнуляем все ячейки fat (пустой кластер), кроме последних
194   F20E 2A 0C F3         ld      hl, (v_FatBytes)    ; размер fat в байтах
195   F211 D1               pop     de                  ; столько байт в конце таблицы fat нельзя использовать
196   F212 D5               push    de
197   F213 CD 7E C8         call    bios_sub_hl_de      ; уменьшаем fat на столько
198   F216 EB               ex      hl, de              ; de = сколько байт заполнять
199   F217 21 00 00         ld      hl, buffer          ; адрес буфера
200   F21A 06 00            ld      b, 0                ; байт для заполнения
201   F21C CD 90 F2         call    memset
202   F21F
203   F21F                  ; Помещаем слово FFFFh (зарезервированный кластер) в последние ячейки fat
204   F21F D1               pop     de                  ; столько байт осталось до конца таблицы fat
205   F220 06 FF            ld      b, 0FFh             ; байт для заполнения
206   F222 CD 90 F2         call    memset
207   F225
208   F225                  ; Помещаем слово FFFFh (зарезервированный кластер) в первые две зарезервированнные ячейки fat
209   F225 21 FF FF         ld      hl, 0FFFFh
210   F228 22 00 00         ld      (buffer),   hl
211   F22B 22 02 00         ld      (buffer+2), hl
212   F22E
213   F22E                  ; Если это RAM-диск, помещаем слово FFF7h (плохой сектор) в ячейки fat,
214   F22E                  ; соответсвующие неполным секторам в конце 64 кб блоков
215   F22E 3A 0B F3         ld      a, (v_FormatRAMdisk)
216   F231 B7               or      a                   ; был ли параметр 'R'?
217   F232 C4 6D F2         call nz,MarkRamDiskBads
218   F235
219   F235                  ; Записываем FAT на диск
220   F235 2A 2E F3         ld      hl, (v_FatSectors)  ; количество секторов fat
221   F238 4D               ld      c, l                ; количество секторов fat (считаем, что их меньше 256)
222   F239 21 00 00         ld      hl, buffer          ; адрес буфера
223   F23C 11 01 00         ld      de, 1               ; начинаем с сектора номер 1
224   F23F CD 5E F2         call    WriteBuffer
225   F242
226   F242              ;----------------------------------------------------------------------------
227   F242              ; Корневой каталог
228   F242
229   F242                  ; Создание пустого каталога (de байт 0FFh)
230   F242 2A 0E F3         ld      hl, (v_DirBytes)    ; размер каталога в байтах
231   F245 EB               ex      hl, de
232   F246 21 00 00         ld      hl, buffer          ; адрес буфера
233   F249 06 FF            ld      b, 0FFh             ; байт для заполнения
234   F24B CD 90 F2         call    memset
235   F24E
236   F24E                  ; Записываем каталог на диск
237   F24E 3A 10 F3         ld      a, (v_DirSectors)
238   F251 4F               ld      c, a                ; количество секторов каталога (считаем, что их меньше 256)
239   F252 2A 2E F3         ld      hl, (v_FatSectors)  ; количество секторов fat
240   F255 23               inc     hl                  ; количество секторов fat + 1 = начальный сектор каталога
241   F256 EB               ex      hl, de              ; начальный сектор каталога
242   F257 21 00 00         ld      hl, buffer          ; адрес буфера
243   F25A CD 5E F2         call    WriteBuffer
244   F25D
245   F25D                  ; Выход в ОС
246   F25D C9               ret
247   F25E
248   F25E              ;----------------------------------------------------------------------------
249   F25E              ; Запись буфера на диск
250   F25E              ; c - сколько секторов
251   F25E              ; de - номер первого сектора
252   F25E
253   F25E              WriteBuffer:
254   F25E 06 01            ld      b,  1   ; режим 1 - запись
255   F260 21 00 00         ld      hl, buffer
256   F263              WriteBufferLoop:
257   F263 CD 63 C8         call    bios_diskDriver
258   F266 13               inc     de      ; следующий сектор
259   F267 24               inc     h       ; седующий блок в памяти (размер сектора 256 байт)
260   F268 0D               dec     c
261   F269 C2 63 F2         jp nz,  WriteBufferLoop
262   F26C C9               ret
263   F26D
264   F26D              ;----------------------------------------------------------------------------
265   F26D              ; Пометить неполные секторы RAM-диска как плохие
266   F26D              ; Формула вычисления номера сектора по номеру кластера
267   F26D              ; sector = (cluster - 2) * BPB_SecPerClus + v_DataStartSector
268   F26D              ; Обратная формула:
269   F26D              ; cluster = (sector - v_DataStartSector) / BPB_SecPerClus + 2
270   F26D
271   F26D
272   F26D              MarkRamDiskBads:
273   F26D                  ; Вычисляем номер кластера, соответствующий первому плохому сектору на RAM-диске
274   F26D 2A 16 F3         ld      hl, (v_DataStartSector)
275   F270 11 FF 00         ld      de, 255 ; плохой сектор - последний в 64к банке
276   F273 EB               ex      de, hl
277   F274 CD 7E C8         call    bios_sub_hl_de
278   F277                  ; тут дожно быть hl = hl / BPB_SecPerClus, но у нас пока сектор = кластер
279   F277 23               inc     hl
280   F278 23               inc     hl
281   F279
282   F279                  ; Переводим номер кластера в адрес ячейки в буфере fat
283   F279 29               add     hl, hl  ; hl *= 2
284   F27A 11 00 00         ld      de, buffer
285   F27D 19               add     hl, de
286   F27E
287   F27E                  ; Приращение адреса для перехода к следующему плохому сектору
288   F27E                  ; -1 потому что в цикле один раз делается inc hl
289   F27E 11 FF 01         ld      de, 65536/256 * 2 - 1   ; = 511 байт
290   F281
291   F281                  ; В цикле помечаем плохие сектора каждой 64к банки
292   F281 3A F8 8F         ld      a, (bios_vars.ramPageCount) ; a = количество 64к банок RAM-диска
293   F284 47               ld      b, a                        ; счетчик цикла
294   F285              MarkRamDiskBadsLoop:
295   F285 36 F7            ld      (hl), FAT16_BAD & 0FFh
296   F287 23               inc     hl
297   F288 36 FF            ld      (hl), FAT16_BAD >> 8
298   F28A 19               add     hl, de
299   F28B 05               dec     b
300   F28C C2 85 F2         jp nz,  MarkRamDiskBadsLoop
301   F28F C9               ret
302   F290
303   F290              ;----------------------------------------------------------------------------
304   F290              ; Заполнение памяти по адресу hl байтом b количеством байт de
305   F290
306   F290              memset:
307   F290 70               ld      (hl), b
308   F291 23               inc     hl
309   F292 1B               dec     de
310   F293 7A               ld      a, d
311   F294 B3               or      e
312   F295 C2 90 F2         jp nz,  memset
313   F298 C9               ret
314   F299
315   F299              ;----------------------------------------------------------------------------
316   F299              ; Вывод сообщения 'INVALID DRIVE LETTER'
317   F299
318   F299              errInvalidDrive:
319   F299 21 D4 F2         ld      hl, str_InvalidDrive
320   F29C C3 18 C8         jp      bios_printString
321   F29F
322   F29F              ;----------------------------------------------------------------------------
323   F29F              ; Вывод сообщения 'NO DRIVER'
324   F29F
325   F29F              errNoDriver:
326   F29F 21 EA F2         ld      hl, str_NoDriver
327   F2A2 C3 18 C8         jp      bios_printString
328   F2A5
329   F2A5              ;----------------------------------------------------------------------------
330   F2A5              ; Вывод сообщения 'DRIVE SIZE IS UNKNOWN'
331   F2A5
332   F2A5              ;errSizeUnknown:
333   F2A5              ;    ld      hl, str_SizeUnknown
334   F2A5              ;    jp      bios_printString
335   F2A5
336   F2A5              ;----------------------------------------------------------------------------
337   F2A5              ; Вывод сообщения 'ABORTING'
338   F2A5
339   F2A5              errAbort:
340   F2A5 21 F5 F2         ld      hl, str_Aborting
341   F2A8 C3 18 C8         jp      bios_printString
342   F2AB
343   F2AB              ;----------------------------------------------------------------------------
344   F2AB              ; Данные
345   F2AB
346   F2AB 0A 46 6F 72  str_Format:         DB 0Ah,"Format drive "
346   F2AF 6D 61 74 20
346   F2B3 64 72 69 76
346   F2B7 65 20
347   F2B9 41 3A 20 5B  str_A_Y_N:          DB "A: [Y/N]? ",0
347   F2BD 59 2F 4E 5D
347   F2C1 3F 20 00
348   F2C4 0A 43 68 6F  str_ChoseDrive:     DB 0Ah,"Choose drive: ",0
348   F2C8 6F 73 65 20
348   F2CC 64 72 69 76
348   F2D0 65 3A 20 00
349   F2D4 0A 49 6E 76  str_InvalidDrive:   DB 0Ah,"Invalid drive letter",0
349   F2D8 61 6C 69 64
349   F2DC 20 64 72 69
349   F2E0 76 65 20 6C
349   F2E4 65 74 74 65
349   F2E8 72 00
350   F2EA 0A 4E 6F 20  str_NoDriver:       DB 0Ah,"No driver",0
350   F2EE 64 72 69 76
350   F2F2 65 72 00
351   F2F5              ;str_SizeUnknown:    DB 0Ah,"Drive size is unkown",0
352   F2F5 0A 41 62 6F  str_Aborting:       DB 0Ah,"Aborting",0
352   F2F9 72 74 69 6E
352   F2FD 67 00
353   F2FF 52 41 4D 20  str_RAM_DISK:       DB "RAM DISK   "
353   F303 44 49 53 4B
353   F307 20 20 20
354   F30A
355   F30A 00           v_FormatConfirmed:  DB 0
356   F30B 00           v_FormatRAMdisk:    DB 0
357   F30C 00 00        v_FatBytes:         DW 0
358   F30E 00 00        v_DirBytes:         DW 0
359   F310 00 00        v_DirSectors:       DW 0
360   F312 00 00        v_DirStartSector:   DW 0
361   F314 00 00        v_DataSectors:      DW 0
362   F316 00 00        v_DataStartSector:  DW 0
363   F318
364   F318              buffer = 0000h ; 0D100h ; Адрес буфера
365   F318
366   F318              ; Начало загрузочного сектора.
367   F318              ; Поля, отмеченные *, настраиваются этой программой.
368   F318              v_HeaderStart:
369   F318 00 00 00         DB 0, 0, 0          ; BS_JmpBoot     - смещение  00h,   3 байт - jmp на загрузчик - не использзуется
370   F31B 53 50 45 54      DB "SPETSMX2"       ; BS_OEMName     - смещение  03h,   8 байт - сигнатура "MSWIN 4.1" или "MSDOS 5.0", но можно и свою :)
370   F31F 53 4D 58 32
371   F323 00 01            DW SECTOR_SIZE      ; BPB_BytsPerSec - смещение  0Bh,   2 байт - размер сектора в байтах
372   F325 01               DB 1                ; BPB_SecPerClus - смещение  0Dh,   1 байт - сколько секторов в кластере
373   F326 01 00            DW 1                ; BPB_RsvdSecCnt - смещение  0Eh,   2 байт - сколько секторов в арезервированной (загрузочной) области
374   F328 01               DB 1                ; BPB_NumFATs    - смещение  10h,   1 байт - количество копий FAT
375   F329              v_DirFiles:
376   F329 40 00            DW 64               ; BPB_RootEntCnt - смещение  11h,   2 байт - количество файлов в корневом каталоге (512 - стандрат для FAT16)
377   F32B              v_TotalSectors:
378   F32B 00 00            DW 0            ; * ; BPB_TotSec16   - смещение  13h,   2 байт - сколько всего секторов на диске (16-битное значение)
379   F32D F8               DB 0F8h             ; BPB_Media      - смещение  15h,   1 байт - допустимо F0h, F8h ... FFh, такое же значение должно быть в младших 8 битах FAT[0]
380   F32E              v_FatSectors:
381   F32E 00 00            DW 0            ; * ; BPB_FATSz16    - смещение  16h,   2 байт - сколько секторов занимает FAT
382   F330 00 00            DW 0                ; BPB_SecPerTrk  - смещение  18h,   2 байт - количество секторов на дорожку
383   F332 00 00            DW 0                ; BPB_NumHeads   - смещение  1Ah,   2 байт - количество головок
384   F334 00 00 00 00      DB 0, 0, 0, 0       ; BPB_HiddSec    - смещение  1Ch,   4 байт - количество скрытых секторов перед этим разделом
385   F338 00 00 00 00      DB 0, 0, 0, 0       ; BPB_TotSec32   - смещение  20h,   4 байт - сколько всего секторов на диске (32-битное значение)
386   F33C 80               DB 80h              ; BS_DrvNum      - смещение  24h,   1 байт - номер накопителя IBM PC: 0 для дисковода, 80h для жествого диска
387   F33D 00               DB 0                ; BS_Reserved    - смещение  25h,   1 байт - зарезервировано для Windows NT
388   F33E 29               DB 29h              ; BS_BootSig     - смещение  26h,   1 байт - расширенная сигнатура загрузочного сектора (29h): следующие три поля валидны
389   F33F 00 00 00 00      DB 0, 0, 0, 0       ; BS_VolID       - смещение  27h,   4 байт - серийный номер тома
390   F343              v_VolLabel:
391   F343 4E 4F 20 4E      DB "NO NAME    "; * ; BS_VolLab      - смещение  2Bh,  11 байт - метка тома
391   F347 41 4D 45 20
391   F34B 20 20 20
392   F34E 46 41 54 31      DB "FAT16   "       ; BS_FilSysType  - смещение  36h,   8 байт - сигнатура "FAT12   ", "FAT16   " или "FAT     "
392   F352 36 20 20 20
393   F356
394   F356              v_HeaderEnd:            ; остальное заполняется байтом 0FFh
395   F356
396   F356              ;----------------------------------------------------------------------------
397   F356
398   F356                  END
# file closed: D:\Projects\Specialist\MySoft\MXOS-Z80\format\FORMAT.asm
