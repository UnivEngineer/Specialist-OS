;----------------------------------------------------------------------------
; MXOS
; Определение свободного объема накопителя
;
; выход:
;   de = количество свободных кластеров
;
; 2022-02-09 Разработано SpaceEngineer
;----------------------------------------------------------------------------

getDriveFreeSpace:
            ; Сохраняем регистры
            push    hl
            push    bc

            ; Счетчик свободных кластеров
            ld      de, 0

            ; Кэшируем по очереди все секторы таблицы fat,
            ; и подсчитываем общее коичество свободных кластеров в них
            ld      hl, (v_diskInfo.fatSectors) ; hl = количество секторов fat на устройстве
            ld      a, l                        ; a  = количество секторов fat на устройстве (считаем, что их меньше 256)
            push    af
            ld      hl, (v_diskInfo.resSectors) ; hl = номер сектора: начинаем с resSectors
fatSectorsLoop:
            push    hl              ; hl = номер сектора
            ld      b, 0            ; флаг - сектор не будет модифицироваться
            call    cacheSector     ; теперь hl = адрес буфера с загруженным сектором fat

            ; Цикл по кластерам сектора fat
            ld      bc, SECTOR_SIZE/2   ; счетчик цикла
sectorClustersLoop:
            ; Читаем в a номер кластера из ячейки по адресу hl и сразу сравниваем с нулем
            ld      a, (hl)
            inc     hl
            or      (hl)
            inc     hl

            ; Если кластер пустой, увеличиваем счетчик свободных кластеров
            jp nz,  gdfs_nonEmpty
            inc     de
gdfs_nonEmpty:

            ; Повтор цикла по кластерам сектора fat
            dec     bc  ; счетчик просмотренных кластеров сектора
            ld      a, b
            or      c
            jp nz,  sectorClustersLoop

            ; Повтор цикла по секторам fat
            pop     hl              ; hl = номер сектора
            inc     hl              ; инкремент номера сектора

            pop     af
            dec     a               ; счетчик цикла
            push    af

            jp nz,  fatSectorsLoop  ; повтор цилкла по секторам

            ; Восстанавливаем регистры и выходим
            pop     af
            pop     bc
            pop     hl

            ret
