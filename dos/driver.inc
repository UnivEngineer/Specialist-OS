;+---------------------------------------------------------------------------
; MXOS
; Драйвер диска в ДОЗУ, ПЗУ
;
; Запись 256-байтного блока
;   На входе
;     b = 1                 // было: e = 1
;     de = номер кластера   // было: d = номер блока 
;     hl = адрес буфера в памяти
;   На выходе
;     все регистры сохраняются
;
; Чтение 256-байтного блока
;   На входе
;     b = 2                 // было: e = 2
;     de = номер кластера   // было: d = номер блока 
;     hl = адрес буфера в памяти
;   На выходе
;     все регистры сохраняются
;
; Получение размера накопителя
;   На входе
;     b = 3                 // было: e = 3
;   На выходе
;     de = кол-во секторов на диске
;
; 2013-12-12 Дизассемблировано и доработано vinxru
; 2022-02-02 Доработано SpaceEngineer
;----------------------------------------------------------------------------

    IF ROM_64K
ROM_SIZE  =  0100h  ; 64 кб
    ELSE
ROM_SIZE  =  00C0h  ; 48 кб
    ENDIF

diskDriver: ; Сохраняем регистры
            push    af

            ; Функция 3 - Получение размера диска
            ld      a, b
            cp      3
            jp z,   diskDriver_s

             ; Сохраняем регистры
            push    hl
            push    bc
            push    de

            ; Заранее загружаем в С активный диск
            ld      a, (v_drive)
            ld      c, a

            ; Функция 1 - Запись блока
            dec     b
            jp z,   diskDriver_w

            ; Функция 2 - Чтение блока
            dec     b
            jp z,   diskDriver_r

popDBHA_ret:
            ; Восстанавливаем регистры и выходим
            pop     de
            pop     bc
            pop     hl
            pop     af
            ret

            
; ---------------------------------------------------------------------------
; Функция 2 - Чтение блока

diskDriver_r:
            ; Это ROM-диск?
            or      a
            jp nz,  ramDRead ; нет, переходим к драйверу RAM-диска

    IF ROM_64K

            ; Это старшая часть ПЗУ?
            ld      a, 80h
            xor     e   ;   // xor     d
            jp m,   romMXRead; нет переходим к драйверу ROM-диска MX (Специалист-MX2)

            ; Драйвер ROM-диска STD (Специалист-MX2)
            ld      d, a
            ld      e, 0 ;  // new
            inc     de ; пропускаем первые 4 байта в ПЗУ STD (это код перехода на загрузчик)
            inc     de
            inc     de
            inc     de
            ; Включаем ПЗУ STD (да, надо регистр цвета сбросить для этого)
            xor     a
            ld      (IO_COLOR), a
romStdReadLoop:
            ; Включаем режим STD
            ld      (IO_PAGE_STD), a
            ; Чтение
            ld      a, (de)
            ; Включаем ОЗУ MX
            ld      (IO_PAGE_RAM-800h),a
            ; Запись
            ld      (hl), a
            inc     hl
            ; Цикл
            inc     de
            ld      a, 4
            cp      e
            jp nz,  romStdReadLoop

            ; Восстаналиваем цвет
            ld      a, COLOR_BIOS
            ld      (IO_COLOR), a

            ; Восстанавливаем регистры и выходим
            jp      popDBHA_ret
            
    ENDIF

romMXRead:
romMXReadDrv:
            ld      a, c    ; c = номер страницы = 0
            ld      d, e    ; d = номер блока 
            ld      e, 0    ; e = 0
                            ; hl = адрес буфера в памяти
romMXReadLoop:
            ld      (IO_PAGE_ROM), a
            ld      a, (de)
            ld      (IO_PAGE_RAM), a
            ld      (hl), a
            inc     hl
            inc     e
            jp nz,  romMXReadLoop
            jp      popDBHA_ret

ramDRead:
            ; Вызываем драйвер чтения RAM-диска
            ld      c, d    ; c = номер страницы
            ld      d, e    ; d = номер блока 
            ld      e, 0    ; e = 0
                            ; hl = адрес буфера в памяти
            call    bios_RAMDRead

            ; Восстановливаем регистры и выходим
            jp      popDBHA_ret

; ---------------------------------------------------------------------------
; Функция 1 - Запись блока

diskDriver_w:
            ; Это ROM-диск?
            or      a
            jp z,   popDBHA_ret    ; да, запись не поддерживается

            ; Вызываем драйвер записи RAM-диска
            ld      c, d    ; c = номер страницы
            ld      d, e    ; d = номер блока 
            ld      e, 0    ; e = 0
                            ; hl = адрес буфера в памяти
            call    bios_RAMDWrite

            ; Восстановливаем регистры и выходим
            jp      popDBHA_ret

; ---------------------------------------------------------------------------
; Функция 3 - Получение размера диска

diskDriver_s:
            ld      a, (v_drive)
            or      a               ; Это ROM-диск?
            jp nz,  diskDriver_s_ram
            ld      de, ROM_SIZE    ; Размер ROM-диска
            jp      diskDriver_s_exit
diskDriver_s_ram:
            ld      a, (bios_vars.ramPageCount)
            ld      d, a
            ld      e, 0            ; Размер RAM-диска = 256 секторов * число страниц
diskDriver_s_exit:
            ; Восстановливаем регистры и выходим
            pop     af
            ret

;----------------------------------------------------------------------------
; MXOS
; "Пустой" драйвер диска
; Назначается при старте на устройства C: ... H:
;
; 2022-02-07 SpaceEngineer
;----------------------------------------------------------------------------

;diskDriverDummy:
;            push    af
;
;            ; Функция 3 - Получение размера диска
;            ld      a, b
;            cp      3
;            jp nz,  diskDriverDummyExit
;
;            ld      de, 0   ; вернуть 0 размер
;
;diskDriverDummyExit:
;            ; Остальные функции просто ничего не делают
;            pop     af
;            ret
