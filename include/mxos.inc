;-----------------------------------------------------------------------
; MXOS
; Точки входа и настройки сборки MXOS
;
; Новая карта памяти:
;   8FDF-8FFF - [  32 B] Переменные
;   9000-BFFF - [12  KB] Экран
;   C000-D3FF - [5120 B] DOS.SYS
;   D400-DBFF - [2048 B] Свободно (2048 байт)
;   DC00-EDFF - [ 512 B] Драйвер магнитофона
;   DE00-DFFF - [ 512 B] Драйвер флеш-диска
;   E000-E7FF - [2048 B] Шрифт
;   E800-FAFF - [4864 B] Системные программы (NC.COM, E.COM, DL-RED.COM, FORMAT.COM, MON2.COM, ...)
;   FB00-FEFF - [1024 B] Дисковый кэш (fat + каталог)
;   FF00-FF81 - [ 130 B] Командная строка
;   FF82-FFBF - [  62 B] Стек
;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
;   FFE0-FFFF - [  32 B] Оборудование
;
; Старая карта памяти:
;   8FDF-8FFF - [  32 B] Переменные
;   9000-BFFF - [12  KB] Экран
;   C000-CFFF - [4096 B] DOS.SYS
;   D000-E1FF - [4607 B] Системные программы (NC.COM, E.COM, DL-RED.COM)
;   E200-E5FF - [1024 B] Свободно (1024 байт)
;   E600-E7FF - [ 512 B] Драйвер магнитофона
;   E800-E8FF - [ 256 B] Свободно (256 байт)
;   E900-F0FF - [2048 B] Шрифт (можно отключить запуском ROMFNT.COM или опцией LOAD_FONT=0)
;   F100-F8FF - [2048 B] Системные программы (FORMAT.COM, MON2.COM, ...)
;   F900-F9FF - [ 256 B] Свободно (256 байт)
;   FA00-FAFF - [ 256 B] Драйвер флеш-диска
;   FB00-FEFF - [1024 B] Дисковый буфер (fat + каталог)
;   FF00-FF81 - [ 130 B] Командная строка
;   FF82-FFBF - [  62 B] Стек
;   FFC0-FFEF - [  32 B] Непереключаемое ОЗУ, драйвер обмена с RAM диском
;   FFE0-FFFF - [  32 B] Оборудование
;-----------------------------------------------------------------------


;-----------------------------------------------------------------------
; Конфигурация сборки
;-----------------------------------------------------------------------

NEW_MEMORY_MAP       =  1       ; Новая карта памяти
RAMD_MAX_PAGE        =  16      ; Максимальное количество страниц RAM диска
RAMD_PAGE_END        =  0FFBBh  ; Включить поддержку ДОЗУ большего чем 64 Кб
ROM_64K              =  1       ; Включить поддержку ПЗУ 64 Кб Специалиста МХ2
ENABLE_COLOR         =  1       ; Включить поддержку цвета
EMBED_FONT           =  0       ; Встроить шрифт в программу (при запуске шрифт копируется на FONT_ADDR)
LOAD_FONT            =  1       ; Загружать шрифт в ОЗУ
COLOR_BIOS           =  0F0h    ; Цвет командной строки
RAMFOS_COMPATIBILITY =  1       ; Совместимость с RAMFOS (WIP)
BOOT_FROM_TAPE       =  0       ; Включить загрузку с ленты при нажатой клавише после сброса

    IF  NEW_MEMORY_MAP
FONT_ADDR = 0E000h  ; Адрес шрфита
    ELSE
FONT_ADDR = 0E900h  ; Адрес шрфита
    ENDIF

    IF  LOAD_FONT
FONT_ADDR_DIV_8 = FONT_ADDR/8
    ELSE
FONT_ADDR_DIV_8 = -1
    ENDIF

;-----------------------------------------------------------------------
; Переменные ОС в подэкранном пространстве и их начальные значения
; Доступ к переменным и программ польователя:
; ld a, bios_vars.lastKey
;-----------------------------------------------------------------------

    STRUCT BIOS_VARIABLES
_reserv_1     DW      -1              ; 8FDFh -
tapeError     DW      0C800h          ; 8FE1h - Адрес, куда происходит переход при ошибке чтения с ленты
tapeAddr      DW      -1              ; 8FE3h - Адрес программы загруженной с ленты
_reserv_2     DW      -1              ; 8FE5h -
charGen       DW      FONT_ADDR_DIV_8 ; 8FE7h - Адрес альтернативного знакогенератора / 8
cursorCfg     DB       21h ; 0A9h     ; 8FE9h - Внешний вид курсора (биты: 7 - мигание (если 0), 654 - положение (Y) от низа строки, 3210 - размер по высоте)
koi7          DB       0   ; 0FFh     ; 8FEAh - 0FFh = включен KOI-7, 0 = включен KOI-8
escMode       DB      -1              ; 8FEBh - Обработка ESC-последовательности
keyLocks      DB      0BAh ; 3Ah      ; 8FECh - Caps Lock или Рус/Lat (3A - прописные анг, BA - строчные анг, BB - прописные рус, 3B - строчные рус)
_reserv_3     DW      -1              ; 8FEDh -
lastLastKey   DB      -1              ; 8FEFh - Предпоследняя нажатая клавиша
lastKey       DB      -1              ; 8FF0h - Последняя нажатая клавиша
beepFreq      DB       5Fh            ; 8FF1h - Частота звукового сигнала (также влияет на длительность)
beepDuration  DB       20h            ; 8FF2h - Длительность звукового сигнала (сколько раз повторять посылку)
tapeInverse   DB      0FFh            ; 8FF3h - Признак инверсии данных с ленты
cursorDelay   DB       20h            ; 8FF4h - Задержка мигания курсора
antiBsDelay   DB      0E0h            ; 8FF5h - Задержка защиты от дребезга контактов клавиш
oldSP         DW      -1              ; 8FF6h - Используется для сохранения SP некоторыми функциями
ramPageCount  DB      RAMD_MAX_PAGE   ; 8FF8h - Количество детектированных 64кб страниц RAM-диска
_reserv_4     DB       0              ; 8FF9h -
inverse       DW       0              ; 8FFAh - Инвертирование текста (0=нормальный текст, 0FFFFh=инверсный)
cursorY       DB      -1              ; 8FFCh - Положение курсора по вертикали в пикселях
cursorX       DB      -1              ; 8FFDh - Положение курсора по горизонтали в пикселях / 2
writeDelay    DB      28h             ; 8FFEh - Скорость при записи на ленту
readDelay     DB      3Ch             ; 8FFFh - Скорость при чтении с ленты
    ENDS

; Блок переменных BIOS начинается с адреса 8FDFh
bios_vars   BIOS_VARIABLES = 8FDFh

;-----------------------------------------------------------------------
; Стандартные точки входа ОС
; Отмеченные [OLD] применять не рекомендуется
; Отмеченные [MXOS2] - новые в MXOS 2
;-----------------------------------------------------------------------

bios_init               = 0C000h ; Теплая перезагрузка

; Устаревшие точки, лечше не применять
bios_keyScanOld         = 0C003h ; [OLD] Получить код нажатой клавиши, = bios_keyScan
bios_drawCursorOld      = 0C006h ; [OLD] Нарисовать/стереть курсор
bios_clearScreenOld     = 0C010h ; [OLD] Оистка экрана
bios_printCharOld       = 0C037h ; [OLD] Вывод символа на экран
bios_beep_Old           = 0C170h ; [OLD] Звуковой сигнал
bios_delay_l            = 0C18Fh ; [OLD] Задержка l циклов
bios_delay_b            = 0C190h ; [OLD] Задержка b циклов
bios_getchOld           = 0C337h ; [OLD] Ожидание ввода с клавиатуры
bios_tapeReadOld        = 0C377h ; [OLD] Чтение байта с магнитофона
bios_tapeWriteOld       = 0C3D0h ; [OLD] Запись байта на магнитофон
bios_cmp_hl_de          = 0C427h ; [OLD] Сравнить hl и de
bios_memcpy_bc_hl       = 0C42Dh ; [OLD] Скопировать блок памяти
bios_printStringOld     = 0C438h ; [OLD] Вывод строки на экран

; Стандартные точки C800h
bios_reboot             = 0C800h ; Запустить NC.COM
bios_getch              = 0C803h ; Ожидание ввода с клавиатуры
bios_tapeRead           = 0C806h ; Чтение байта с магнитофона
bios_printChar          = 0C809h ; Вывод символа на экран
bios_tapeWrite          = 0C80Ch ; Запись байта на магнитофон
bios_input              = 0C80Fh ; Ввод строки с клавиатуры
bios_keyCheck           = 0C812h ; Получить код нажатой клавиши, = bios_keyScan
bios_printHexByte       = 0C815h ; Вывод HEX числа на экран (байт)
bios_printString        = 0C818h ; Вывод строки на экран
bios_keyScan            = 0C81Bh ; Получить код нажатой клавиши
bios_getCursorPos       = 0C81Eh ; Получить координаты курсора в hl (координаты в пикселях)
bios_setCursorPos       = 0C821h ; Установить координаты курсора из hl (координаты в пикселях)
bios_tapeLoad           = 0C824h ; Загрузить программу с магнитофона
bios_tapeSave           = 0C827h ; Сохранить программу на магнитофон
bios_calcCS             = 0C82Ah ; Расчет контрольной суммы
bios_printHexWord       = 0C82Dh ; Вывод HEX числа на экран (слово)
bios_getMemTop          = 0C830h ; Получить объем доступной памяти
bios_setMemTop          = 0C833h ; Установить объем доступной памяти
bios_printer            = 0C836h ; Напечатать байт на принтере
    IF RAMFOS_COMPATIBILITY
bios_strToHex           = 0C839h ; [MXOS2] Преобразвоние строки в HEX формате в число
    ELSE
bios_rebootAlt          = 0C839h ; Запустить NC.COM
    ENDIF
bios_rebootAlt2         = 0C83Ch ; Запустить NC.COM
bios_fileList           = 0C83Fh ; Получить список файлов
bios_fileGetSetDrive    = 0C842h ; Получить/установить активное устройство
bios_fileCreate         = 0C845h ; Создать файл
bios_fileLoad           = 0C848h ; Загрузить файл по адресу из заголовка этого файла
bios_fileDelete         = 0C84Bh ; Удалить файл
bios_fileRename         = 0C84Eh ; Переименовать файл
bios_fileLoadInfo       = 0C851h ; Загрузить информацию о файле
bios_fileGetSetAddr     = 0C854h ; Получить/установить адрес загрузки файла
bios_fileGetSetAttr     = 0C857h ; Получить/установить атрибуты файла
bios_fileNamePrepare    = 0C85Ah ; Преобразовать имя файла во внутренний формат
bios_fileExec           = 0C85Dh ; Запустить файл
bios_installDriver      = 0C860h ; Установить драйвер накопителя
bios_diskDriver         = 0C863h ; Драйвер выбранного диска
bios_fileLoad2          = 0C866h ; Загрузить файл по адресу de

; Новые точки C800h MXOS2
bios_printCharReal      = 0C869h ; [MXOS2] Вывод символа на экран (только реальные символы)
bios_printDecWord       = 0C86Ch ; [MXOS2] Вывод числа экран в десятичной форме
bios_setRAMDDriver      = 0C86Fh ; [MXOS2] Установить драйвр рам-диска
bios_getDriveFreeSpace  = 0C872h ; [MXOS2] Получить оставшийся свободный объем диска
bios_upperCase          = 0C875h ; [MXOS2] Перевод кода символа КОИ-8 в верхний регистр
bios_strcmp             = 0C878h ; [MXOS2] Сравнение строк, чувствительное к регистру
bios_stricmp            = 0C87Bh ; [MXOS2] Сравнение строк, нечувствительное к регистру
bios_sub_hl_de          = 0C87Eh ; [MXOS2] Вычитание hl и de: hl = hl - de
bios_div_hl_2           = 0C881h ; [MXOS2] Деление hl на 2: hl = hl / 2
bios_mul_hl_de          = 0C884h ; [MXOS2] Умножение hl на de: hl = hl * de
bios_div_hl_de          = 0C887h ; [MXOS2] Деление hl на de: hl = hl / de, de = hl % de

;-----------------------------------------------------------------------
; Адрес таблицы переходов драйвера магнитофона
;-----------------------------------------------------------------------

TAPE_DRIVER_JUMPS = bios_tapeReadOld    ; размещается на месте бывшей п/п чтения байта

;-----------------------------------------------------------------------
; Непереключаемое ОЗУ ПК "Специалист-MX" (0FFC0h-0FFDF, 32 байта)
;-----------------------------------------------------------------------

bios_RAMDRead   = 0FFC0h ; п/п чтения из ДОЗУ
bios_RAMDWrite  = 0FFD0h ; п/п записи в  ДОЗУ

;-----------------------------------------------------------------------
; Порты устройств ПК "Специалист-MX2" (0FFE0h-0FFFF, 32 байта)
;-----------------------------------------------------------------------

IO_KEYB_A       =  0FFE0h   ; ВВ55 клавиатуры
IO_KEYB_B       =  0FFE1h
IO_KEYB_C       =  0FFE2h
IO_KEYB_MODE    =  0FFE3h
IO_PROG_A       =  0FFE4h   ; ВВ55 программатора/флеш диска
IO_PROG_B       =  0FFE5h
IO_PROG_C       =  0FFE6h
IO_PROG_MODE    =  0FFE7h
IO_FDD_CMD      =  0FFE8h   ; контроллер дисковода ВГ93
IO_FDD_TRACK    =  0FFE9h
IO_FDD_SECTOR   =  0FFEAh
IO_FDD_DATA     =  0FFEBh
IO_TIMER_CH0    =  0FFECh   ; таймер ВИ53
IO_TIMER_CH1    =  0FFEDh
IO_TIMER_CH2    =  0FFEEh
IO_TIMER_MODE   =  0FFEFh
IO_FDD_REQ      =  0FFF0h   ; контроллер дисковода
IO_FDD_MOTOR    =  0FFF1h
IO_FDD_SIDE     =  0FFF2h
IO_FDD_DRIVE    =  0FFF3h
IO_COLOR        =  0FFF8h   ; регистр цвета
IO_PAGE_RAM     =  0FFFCh   ; порт включения основного ОЗУ
IO_PAGE_RAMD    =  0FFFDh   ; порт включения ОЗУ RAM-дисков
IO_PAGE_ROM     =  0FFFEh   ; порт включения ПЗУ
IO_PAGE_STD     =  0FFFFh   ; порт включения STD режима

;-----------------------------------------------------------------------
; Структура файловой системы
;-----------------------------------------------------------------------

; Структура каталога
DIR_DESCR_SIZE  = 32    ; размер дескриптора файла в каталоге (байт)
DIR_NAME_LENGTH = 8     ; длина имени файла  (байт)
FAT_ITEM_SIZE   = 2     ; размер записи в таблице FAT (байт)

SECTOR_SIZE  = 00100h   ; размер сектора 256 байт
CLUSTER_SIZE = 00100h   ; размер кластера 256 байт

; Специальные коды кластеров FAT
FAT12_BAD = 00FF7h  ; плохой кластер
FAT16_BAD = 0FFF7h
FAT12_EOC = 00FFFh  ; последний кластер файла
FAT16_EOC = 0FFFFh
FAT12_RES = 00FFFh  ; зарезервированный кластер
FAT16_RES = 0FFFFh

;-----------------------------------------------------------------------
; Десткриптор файла (одна запись в каталоге) FAT12/16/32
;-----------------------------------------------------------------------

    STRUCT FILE_DESCRIPTOR  ; 32 байта
name            BLOCK   DIR_NAME_LENGTH     ; смещение 00h, 8 байт  - имя файла
ext             BLOCK   3                   ; смещение 08h, 3 байта - расширение имени файла
attrib          BLOCK   1                   ; смещение 0Bh, 1 байт  - атрибуты файла
ntReserved      BLOCK   1                   ; смещение 0Ch, 1 байт  - используются в Windows NT
createTimeTenth BLOCK   1                   ; смещение 0Dh, 1 байт  - (только FAT32) время создания файла, десятки миллисекунд (0-199)
createTime      BLOCK   2                   ; смещение 0Eh, 2 байта - (только FAT32) время создания файла, секунды*2 (0-43200)
createDate      BLOCK   2                   ; смещение 10h, 2 байта - (только FAT32) дата  создания файла
loadAddress     BLOCK   2  ; accDate        ; смещение 12h, 2 байта - начальный адрес загрузки в ОЗУ, он же и стартовый (!!! временный костыль, в FAT32 это accDate - дата доступа к файлу !!!)
firstClusterHi  BLOCK   2                   ; смещение 14h, 2 байта - номер первого кластера в FAT, старшее слово
writeTime       BLOCK   2                   ; смещение 16h, 2 байта - время модификации файла, секунды*2 (0-43200)
writeDate       BLOCK   2                   ; смещение 18h, 2 байта - дата  модификации файла
firstCluster    BLOCK   2                   ; смещение 1Ah, 2 байта - номер первого кластера в FAT, младшее слово
size            BLOCK   4                   ; смещение 1Ch, 4 байта - размер файла в байтах
    ENDS

;-----------------------------------------------------------------------
; Информация о активном накопителе (диске)
;-----------------------------------------------------------------------

    STRUCT DISK_INFO
sectorSize          BLOCK   2   ; размер сектора, байт (256, 512, 1024)
sectorsPerCluster   BLOCK   2   ; размер кластера, секторов (1, 2, 4, 8)
resSectors          BLOCK   2   ; сколько секторов занимает зарезервированная область = первый сектор таблицы fat
fatSectors          BLOCK   2   ; сколько секторов занимает таблица fat
dirSectors          BLOCK   2   ; сколько секторов занимает корневой каталог
totalSectors        BLOCK   2   ; сколько всего секторов на диске
rootDirMaxFiles     BLOCK   2   ; максимум файлов в корневом каталоге
descrPerSector      BLOCK   2   ; сколько дескрипторов файлов вмещается в один сектор
fatNumCells         BLOCK   2   ; количество ячеек в таблице fat (= fatSectors * sectorSize / 2)
dirStartSector      BLOCK   2   ; первый сектор корневого каталога
dataStartSector     BLOCK   2   ; первый сектор области данных
volumeLabel         BLOCK  12   ; метка тома и 0 в конце
isValid             BLOCK   1   ; 0 = нет драйвера, 1 = диск не распознан, 2 = диск распознан, корректно отформатирован
    ENDS

DISK_NO_DRIVER = 0
DISK_INVALID   = 1
DISK_VALID     = 2

;-----------------------------------------------------------------------
; Буферы в памяти
;-----------------------------------------------------------------------

; Дисковый кэш
FAT_CACHE_ADDR = 0FB00h ; адрес кэша секторов fat в памяти
FAT_CACHE_SIZE = 1024   ; размер кэша в байтах
FAT_CACHE_CAPACITY = FAT_CACHE_SIZE / SECTOR_SIZE   ; сколько секторов вмещается в кэш

; Буфер для загрузки BAT файла
    IF NEW_MEMORY_MAP
BAT_BUFFER = 0E800h
    ELSE
BAT_BUFFER = 0FC00h
    ENDIF

; Командная строка и стек
CMD_LINE   = 0FF00h  ; 192 байта, но в конце стек
STACK_ADDR = 0FFC0h  ; стек

;-----------------------------------------------------------------------
; Всякие полезности
;-----------------------------------------------------------------------

; Макрос для заполнения памяти от текущего адреса до указанного
    MACRO ORG_PAD adr
         IF $ > adr
           ; вывод сообщения об ошибке
           ASSERT 0
           DISPLAY /l, "Error! ORG_PAD failed! ", $, " is more than ", adr
         ELSE
           ; заполнение памяти
           BLOCK adr-$, 0FFh
         ENDIF
         ORG adr
    ENDM

    MACRO ORG_PAD0 adr
         IF $ > adr
           ; вывод сообщения об ошибке
           ASSERT 0
           DISPLAY /l, "Error! ORG_PAD0 failed! ", $, " is more than ", adr
         ELSE
           ; заполнение памяти
           BLOCK adr-$, 0
         ENDIF
         ORG adr
    ENDM

; Макросы для проверки текущего адреса
    MACRO ASSERT_EQUAL adr
         IF $ != adr
           ASSERT 0
           DISPLAY /l, "Error! Entry point has been shifted (", $, " != ", adr, ")"
         ENDIF
    ENDM

    MACRO ASSERT_DONT_FIT adr
         IF $ > adr
           ASSERT 0
           DISPLAY /l, "Error! Image did not fit (", $, " > ", adr, ")"
         ENDIF
    ENDM

;-----------------------------------------------------------------------
; Конец
;-----------------------------------------------------------------------
